[
  {
    "objectID": "trademark.html",
    "href": "trademark.html",
    "title": "Trademark Policy",
    "section": "",
    "text": "This policy is adapted directly from the WordPress Foundation’s trademark policy for the WordPress and WordCamp names and logos. We admire the job that WordPress has done building a thriving open source community while at the same time making possible a wide variety of WordPress related businesses. We hope that this policy will help us do the same for Quarto."
  },
  {
    "objectID": "trademark.html#goals",
    "href": "trademark.html#goals",
    "title": "Trademark Policy",
    "section": "Goals",
    "text": "Goals\nRStudio, PBC owns and oversees the trademark for the Quarto name and logo. We have developed this trademark usage policy with the following goals in mind:\n\nWe’d like to make it easy for anyone to use the Quarto name or logo for community-oriented efforts that help spread and improve Quarto.\nWe’d like to make it clear how Quarto-related businesses and projects can (and cannot) use the Quarto name and logo.\nWe’d like to make it hard for anyone to use the Quarto name and logo to unfairly profit from, trick or confuse people who are looking for official Quarto resources.\n\nPlease note that it is not the goal of this policy to limit open source or commercial activity around Quarto. We actively encourage Quarto-based open source projects and businesses—our goal with this policy is to prevent confusion about the source of Quarto related software and services."
  },
  {
    "objectID": "trademark.html#permission",
    "href": "trademark.html#permission",
    "title": "Trademark Policy",
    "section": "Permission",
    "text": "Permission\nPermission from RStudio is required to use the Quarto name or logo as part of any project, product, service, domain name, or company name.\nWe will grant permission to use the Quarto name and logo for projects that meet the following criteria:\n\nThe primary purpose of your project is to promote the spread and improvement of the Quarto software.\nYour project is non-commercial in nature (it can make money to cover its costs or contribute to non-profit entities, but it cannot be run as a for-profit project or business).\nYour project neither promotes nor is associated with entities that currently fail to comply with the GPL license under which Quarto is distributed.\n\nIf your project meets these criteria, you will be permitted to use the Quarto name and logo to promote your project in any way you see fit with these exceptions: (1) Please do not use Quarto as part of a domain name; and (2) We do not allow the use of the trademark in advertising, including AdSense/AdWords.\nAll other Quarto-related businesses or projects can use the Quarto name and logo to refer to and explain their services, but they cannot use them as part of a product, project, service, domain name, or company name and they cannot use them in any way that suggests an affiliation with or endorsement by the Quarto open source project.\nThe abbreviation “QMD” is not covered by the Quarto trademark and you are free to use it in any way you see fit."
  },
  {
    "objectID": "trademark.html#examples",
    "href": "trademark.html#examples",
    "title": "Trademark Policy",
    "section": "Examples",
    "text": "Examples\nA consulting company can describe its business as “123 Publishing Services, offering Quarto consulting for publishers,” but cannot call its business “The Quarto Consulting Company.” Similarly, a business related to Quarto extensions can describe itself as “XYZ Extensions, the world’s best Quarto extensions,” but cannot call itself “The Quarto Extension Portal.”\nSimilarly, it’s OK to use the Quarto logo as part of a page that describes your products or services, but it is not OK to use it as part of your company or product logo or branding itself. Under no circumstances is it permitted to use Quarto as part of a domain name or top-level domain name.\nWhen in doubt about your use of the Quarto name or logo, please contact RStudio at permissions@rstudio.com for clarification."
  },
  {
    "objectID": "docs/reference/dates.html",
    "href": "docs/reference/dates.html",
    "title": "Quarto Dates and Date Formatting",
    "section": "",
    "text": "When you write a date for Quarto document, Quarto will attempt to parse a date string by trying a number of standard forms before ultimately attempting to infer the date format. Quarto will try dates formatted as follows, in the following order:\n\nMM/dd/yyyy\nMM-dd-yyyy\nMM/dd/yy\nMM-dd-yy\nyyyy-MM-dd\ndd MM yyyy\nMM dd, yyyy\nYYYY-MM-DDTHH:mm:ssZ\n\nIn addition, you may also provide date keywords, which will provide a dynamic date.\n\n\n\n\n\n\n\nKeyword\nDate\n\n\n\n\ntoday\nThe current local date, with the time portion set to 0.\n\n\nnow\nThe current local date and time.\n\n\nlast-modified\nThe last modified date and time of the file containing the date."
  },
  {
    "objectID": "docs/reference/dates.html#date-formatting",
    "href": "docs/reference/dates.html#date-formatting",
    "title": "Quarto Dates and Date Formatting",
    "section": "Date Formatting",
    "text": "Date Formatting\nWhen specifying a date format in Quarto, there are two ways to represent the format that you’d like.\n\nUsing a Date Style\nYou can specify a simple date style which will be used to format the date.\nFor example:\n---\ndate: 03/07/2005\ndate-format: long\n---\nValid styles and examples of the formatted output are as follows:\n\n\n\n\n\n\n\n\nStyle\nDescription\nExample\n\n\n\n\nfull\nA full date that includes the weekday name\nMonday, March 7, 2005\n\n\nlong\nA long date that includes a wide month name\nMarch 7, 2005\n\n\nmedium\nA medium date\nMar 7, 2005\n\n\nshort\nA short date with a numeric month\n3/7/05\n\n\niso\nA short date in ISO format\n2005-03-07\n\n\n\n\n\nUsing a Date Format\nYou can also specify a date format string that will be used to format the date. For example:\n---\ndate: 03/07/2005\ndate-format: \"MMM D, YYYY\"\nThe permissible values in this string include:\n\n\n\n\n\n\n\n\nFormat String\nOutput\nDescription\n\n\n\n\nYY\n18\nTwo-digit year\n\n\nYYYY\n2018\nFour-digit year\n\n\nM\n1-12\nThe month, beginning at 1\n\n\nMM\n01-12\nThe month, 2-digits\n\n\nMMM\nJan-Dec\nThe abbreviated month name\n\n\nMMMM\nJanuary-December\nThe full month name\n\n\nD\n1-31\nThe day of the month\n\n\nDD\n01-31\nThe day of the month, 2-digits\n\n\nd\n0-6\nThe day of the week, with Sunday as 0\n\n\ndd\nSu-Sa\nThe min name of the day of the week\n\n\nddd\nSun-Sat\nThe short name of the day of the week\n\n\ndddd\nSunday-Saturday\nThe name of the day of the week\n\n\nH\n0-23\nThe hour\n\n\nHH\n00-23\nThe hour, 2-digits\n\n\nh\n1-12\nThe hour, 12-hour clock\n\n\nhh\n01-12\nThe hour, 12-hour clock, 2-digits\n\n\nm\n0-59\nThe minute\n\n\nmm\n00-59\nThe minute, 2-digits\n\n\ns\n0-59\nThe second\n\n\nss\n00-59\nThe second, 2-digits\n\n\nSSS\n000-999\nThe millisecond, 3-digits\n\n\nZ\n+05:00\nThe offset from UTC, ±HH:mm\n\n\nZZ\n+0500\nThe offset from UTC, ±HHmm\n\n\nA\nAM PM\n\n\n\na\nam pm\n\n\n\n\nTo escape characters, wrap them in square brackets (e.g. [MM]).\nExample formats and outputs include:\n\n\n\n\n\n\n\nFormat\nOutput\n\n\n\n\nMMM D, YYYY\nMar 7, 2005\n\n\nDD/MM/YYYY\n07/03/2005\n\n\n[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]\nYYYYescape 2005-03-07T00:00:00-05:00Z\n\n\nYYYY-MM-DDTHH:mm:ssZ\n2005-03-07T00:00:00-05:00\n\n\ndddd MMM D, YYYY\nMonday Mar 7, 2005"
  },
  {
    "objectID": "docs/reference/globs.html",
    "href": "docs/reference/globs.html",
    "title": "Quarto Glob Syntax",
    "section": "",
    "text": "Quarto sometimes allows you to provide a path or paths using glob syntax, providing wildcard expansion and other behavior that makes it simple to match a list of files without having to specify each file individually. Globs may be used:\n\nWhen specifying render targets in Quarto projects (see Render Targets).\nWhen defining resources for Quarto websites (see Site Resources).\nWhen defining documents to include in a listing (see Listing Contents)."
  },
  {
    "objectID": "docs/reference/globs.html#glob-syntax",
    "href": "docs/reference/globs.html#glob-syntax",
    "title": "Quarto Glob Syntax",
    "section": "Glob Syntax",
    "text": "Glob Syntax\nThe below is a general reference of the syntax used for globs in Quarto.\n\n* - Matches everything without leaving the path segment.\n{foo,bar} - Matches foo or bar.\n[abcd] - Matches a, b, c or d.\n[a-d] - Matches a, b, c or d.\n[!abcd] - Matches any single character besides a, b, c or d.\n[[:<class>:]] - Matches any character belonging to <class>.\n\n[[:alnum:]] - Matches any digit or letter.\n[[:digit:]abc] - Matches any digit, a, b or c.\nSee https://facelessuser.github.io/wcmatch/glob/#posix-character-classes for a complete list of supported character classes.\n\n\\ - Escapes the next character for an os other than \"windows\".\n` - Escapes the next character for os set to \"windows\".\n/ - Path separator.\n\\ - Additional path separator only for os set to \"windows\".\n?(foo|bar) - Matches 0 or 1 instance of {foo,bar}.\n@(foo|bar) - Matches 1 instance of {foo,bar}. They behave the same.\n*(foo|bar) - Matches n instances of {foo,bar}.\n+(foo|bar) - Matches n > 0 instances of {foo,bar}.\n!(foo|bar) - Matches anything other than {foo,bar}.\n** - Matches any number of any path segments.\n\nMust comprise its entire path segment in the provided glob.\nSee https://www.linuxjournal.com/content/globstar-new-bash-globbing-option."
  },
  {
    "objectID": "docs/websites/website-about.html",
    "href": "docs/websites/website-about.html",
    "title": "About Pages",
    "section": "",
    "text": "Quarto makes it easy to create a simple about page for an individual or organization. When the about option is provided for a document, a special template will be used to layout the content of the current page with a custom layout designed to present a person or organization.\nFor example:\n---\ntitle: \"Finley Malloc\"\nabout:\n  template: jolla\n  image: profile.jpg\n  links:\n    - icon: twitter\n      text: twitter\n      href: https://twitter.com\n    - icon: github\n      text: Github\n      href: https://github.com\n---\n\nFinley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending  time unicycling and playing with her pet iguana.\n\n## Education\n\nUniversity of California, San Diego | San Diego, CA\nPhD in Mathematics | Sep 2011 - June 2015\n\nMacalester College | St. Paul MA\nB.A in Economics | Sep 2007 - June 2011\n\n## Experience\n\nWengo Analytics | Head Data Scientist | April 2018 - present\n\nGeoScynce | Chief Analyst | Spet 2012 - April 2018\nThe contents of this page will be laid out using the jolla template with the profile.png image, and generate a set of links for the items specified in links.\nYou can write and format the content of the page however you’d like - when the page is rendered, Quarto will use the content and options provided in the about option to create the about page, arranging the content content of the about option with the content in the page itself."
  },
  {
    "objectID": "docs/websites/website-about.html#templates",
    "href": "docs/websites/website-about.html#templates",
    "title": "About Pages",
    "section": "Templates",
    "text": "Templates\nQuarto includes 5 built in templates, drawing inspiration from the Postcards R Package. Built in templates include:\n\njolla\ntrestles\nsolana\nmarquee\nbroadside\n\nEach template will position the about elements with the content in a different layout. Select the template using the template option:\nabout:\n  template: trestles\nHere is a preview of each of the templates:\n\njollatrestlessolanamarqueebroadside\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImage\nThe image for the about page will be read from the document-level image option:\ntitle: Finley Malloc\nimage: profile.jpg\nabout:\n  template: jolla\nIn addition, you can customize how the image is displayed in the page to better meet your needs by setting the following options.\n\n\n\n\n\n\n\n\noption\ndescription\ntemplates\n\n\n\n\nimage-width\nA valid CSS width for your image.\nall\n\n\nimage-shape\nThe shape of the image on the about page. Choose from:rectangle, round, rounded\njolla, solana, trestles\n\n\n\nFor example:\ntitle: Finley Malloc\nimage: profile.png\nabout:\n  template: trestles\n  image-width: 10em\n  image-shape: round\n\n\nLinks\nYour about page also may contain a set of links to other resources about you or your organization. Each template will render these links in a slightly different way. Here are the options that you can specify for each link:\n\n\n\nOption\nDescription\n\n\n\n\nhref\nLink to file contained with the project or an external URL.\n\n\ntext\nText to display for navigation item (defaults to the document title if not provided).\n\n\nicon\nName of one of the standard Bootstrap 5 icons (e.g. “github”, “twitter”, “share”, etc.).\n\n\naria-label\nAccessible label for the navigation item."
  },
  {
    "objectID": "docs/websites/website-about.html#partial-page-content",
    "href": "docs/websites/website-about.html#partial-page-content",
    "title": "About Pages",
    "section": "Partial Page Content",
    "text": "Partial Page Content\nBy default, the about page will be generated using the entire contents of the page If you’d like, however, you may also choose to use only a portion of the page’s content to populate the about template. In this case, you can specify an id for the about page in the document front matter. When rendering the page, Quarto will find any div with that id and use the contents of that div to populate the about template. The div that provided the contents will be replaced with the formatted ‘about’ content. For example, you could write:\n---\ntitle: \"Finley Malloc\"\nabout:\n  id: hero-heading\n  template: jolla\n  image: profile.jpg\n  links:\n    - icon: twitter\n      text: twitter\n      href: https://twitter.com\n    - icon: github\n      text: Github\n      href: https://github.com\n---\n\n### This content appears above the formatted about page content.\n\n:::{#hero-heading}\n\nFinley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending  time unicycling and playing with her pet iguana.\n\n## Education\n\nUniversity of California, San Diego | San Diego, CA\nPhD in Mathematics | Sep 2011 - June 2015\n\nMacalester College | St. Paul MA\nB.A in Economics | Sep 2007 - June 2011\n\n## Experience\n\nWengo Analytics | Head Data Scientist | April 2018 - present\n\nGeoScynce | Chief Analyst | Spet 2012 - April 2018\n\n:::\n\n### This content appears below the formatted about page content."
  },
  {
    "objectID": "docs/websites/website-search.html",
    "href": "docs/websites/website-search.html",
    "title": "Website Search",
    "section": "",
    "text": "Quarto includes support for full text search of websites and books. By default, Quarto will automatically index the contents of your site and make it searchable using a locally built index. You can also configure Quarto search to use a hosted Algolia index."
  },
  {
    "objectID": "docs/websites/website-search.html#search-appearance",
    "href": "docs/websites/website-search.html#search-appearance",
    "title": "Website Search",
    "section": "Search Appearance",
    "text": "Search Appearance\nSearch is enabled by default for websites and books. If the site has a navbar the search UI will appear on the navbar, otherwise it will appear on the sidebar. You can control the location of search with the following options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlocation\nnavbar or sidebar (defaults to navbar if one is present on the page).\n\n\ntype\noverlay or textbox (overlay provides a button that pops up a search UI, textbox does search inline)\n\n\n\nFor example:\nwebsite:\n  search: \n    location: navbar\n    type: overlay\nNote that the above example reflects the default behavior so need not be explicitly specified. Note also that search is enabled by default for websites (you can disable it with search: false).\nThe overlay option displays the search UI as follows:\n\nThe textbox option displays search like this:"
  },
  {
    "objectID": "docs/websites/website-search.html#customizing-results",
    "href": "docs/websites/website-search.html#customizing-results",
    "title": "Website Search",
    "section": "Customizing Results",
    "text": "Customizing Results\nYou can use the following search options to customize how search results are displayed:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlimit\nThe number of results to display in the search results. Defaults to 20.\n\n\ncollapse-after\nThe number of sections matching a document to show before hiding additional sections behind a ‘more matches’ link. Defaults to 2.\n\n\n\ncopy-button\nIf true, the search textbox will include a small icon that when clicked will copy a url to the search results to the clipboard (this is useful if users would like to share a particular search with results). Defaults to false."
  },
  {
    "objectID": "docs/websites/website-search.html#using-algolia",
    "href": "docs/websites/website-search.html#using-algolia",
    "title": "Website Search",
    "section": "Using Algolia",
    "text": "Using Algolia\nIn addition to the built in search capability, Quarto websites can also be configured to use an external Algolia search index. When rendering a website, Quarto will produce a JSON file (search.json in the site output directory) which can be used to update an Algolia index. For more on creating indexes with Algolia, see Send and Update Your Data using Algolia.\n\nBasic Configuration\nIn order for Quarto to connect to your Algolia index, you need to provide basic connection information in your Quarto project file. You can find this connection information for your Algolia index in the Dashboard in the API Keys section. The following basic connection information is required:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nindex-name\nThe name of the index to use when performing a search.\n\n\napplication-id\nThe unique ID used by Algolia to identify your application.\n\n\nsearch-only-api-key\nThe Search-Only API key to use to connect to Algolia.\n\n\n\n\n\n\nImportant\n\n\n\nBe sure to use the Search Only API key, which provides read only access to your index and is safe to include in project files. Never use your Admin API key in a Quarto document or project.\n\n\n\n\nshow-logo\nDisplays a ‘search by Algolia’ logo in the footer of search results.\n\n\n\nFor example:\nwebsite:\n  search:\n    algolia:\n      index-name: <my-index-name>\n      application-id: <my-application-id>\n      search-only-api-key: <my-search-only-api-key>\n\n\nCustom Index Schema\nIf you are simply using the search.json file generated by Quarto as your Algolia index, the above configuration information is all that is required to set up search using Algolia.\nHowever, if you are generating an index in some other fashion, you may need to provide additional information to specify which fields Quarto should use when searching. You do this by including an index-fields key under algolia which specifies the names of specific fields in your index.\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nhref\nThe field to use to read the URL to this index entry. The user will be navigated to this URL when they select the matching search result. Note that Quarto groups results by URL (not including the anchor when grouping).\nThis field is required (either as an existing field in your index or with a mapped field name).\n\n\ntitle\nThe field to use to read the title of the index entry.\nThis field is required (either as an existing field in your index or with a mapped field name).\n\n\ntext\nThe field to use to read the text of the index entry.\nThis field is required (either as an existing field in your index or with a mapped field name).\n\n\nsection\nThe field to use to read the section of the index entry. Quarto groups results by URL and uses the section information (if present) to show matching subsections of the same document.\nThis field is optional.\n\n\n\nAny or all of the above may be specified in your Quarto project file. For example:\nwebsite:\n  search:\n    algolia:\n      index-name: <my-index-name>\n      application-id: <my-application-id>\n      search-only-api-key: <my-search-only-api-key>\n      index-fields:\n        href: url\n        section: sec\n        text: body\n\n\nAlgolia Insights\nBy default, Algolia provides a number of insights based upon the performance of your Algolia search. In addition, it may be helpful to understand more detailed tracking of the results that are viewed and clicked. You can enable click and conversion tracking using Algolia by setting the analytics-events to true:\nwebsite:\n  search:\n    algolia:\n      index-name: <my-index-name>\n      application-id: <my-application-id>\n      search-only-api-key: <my-search-only-api-key>\n      analytics-events: true\nYou can confirm that events are being properly sent to Algolia using the Event Debugger. Note that the click and conversion events use cookies to maintain an anonymous user identifier—if cookie consent is enabled, search events will only be enabled if cookie consent has been granted.\n\n\nAdvanced Configuration\nIn addition to the above configuration, you may also pass Algolia specific parameters when executing a search. For example, you may want to limit results to a particular facet or set of tags. To specify parameters, add the params key to your algolia yaml and provide params. For information about about available parameters, see Algolia’s Search API Parameters.\nFor example:\nwebsite:\n  search:\n    algolia:\n      index-name: <my-index-name>\n      application-id: <my-application-id>\n      search-only-api-key: <my-search-only-api-key>\n    index-fields:\n      href: url\n      section: sec\n      text: body\n    params:\n      tagFilters: ['tag1','tag2']"
  },
  {
    "objectID": "docs/websites/website-search.html#disabling-search",
    "href": "docs/websites/website-search.html#disabling-search",
    "title": "Website Search",
    "section": "Disabling Search",
    "text": "Disabling Search\nYou can disable search for an indvidual document by adding search: false to the document metadata. For example:\n---\ntitle: \"My Document\"\nsearch: false\n---\nIf you’d like to disable search support for an entire website, you can do so by including the following in your _quarto.yml file:\nwebsite:\n  search: false"
  },
  {
    "objectID": "docs/websites/website-listings.html",
    "href": "docs/websites/website-listings.html",
    "title": "Document Listings",
    "section": "",
    "text": "Listings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data.\nListings are useful for creating blogs, providing navigation for large numbers of documents, or any other scenario where you’d like the contents of a page to be automatically updated as documents are added, updated, and removed.\nYou can enable listings on a page using the listing option in the document front matter. This will instruct Quarto to generate additional content (the ‘listings’) when the page is rendered. For example, the following YAML in the front matter of a document:\n---\ntitle: \"Listing Example\"\nlisting: default\n---\nWill result in a listing of all documents in the directory (with the exception of the current document). It might look something like this:"
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-contents",
    "href": "docs/websites/website-listings.html#listing-contents",
    "title": "Document Listings",
    "section": "Listing Contents",
    "text": "Listing Contents\nYou can control what documents are included in the listing by using the contents option, which allows you to provide a set of input files (or globs of input files) that should be included in the listing. For each of the inputs that matches the contents of a listing, an item will be included using the metadata in the front matter of the document.\nFor example to include all the Quarto documents in the posts directory, you would write:\n---\ntitle: \"Listing Example\"\nlisting:\n  contents: posts\n---\nYou can write much more complex rules for including content by using globs and using a list of targets in the contents, such as:\n---\ntitle: \"Listing Example\"\nlisting:\n  contents:\n    - \"reports/*.qmd\"\n    - \"lab-notes/*reports.qmd\"\nReview the Quarto Glob Reference for more information about supported glob syntax.\n\n\n\n\n\n\nNote\n\n\n\nIf you provide a path to a directory, it will be treated as <directory>/** - the directory will be searched recursively for project inputs.\n\n\nIn addition to specifying lists of files or globs, contents can contain lists of metadata as well. For more about this, see Custom Listings."
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-types",
    "href": "docs/websites/website-listings.html#listing-types",
    "title": "Document Listings",
    "section": "Listing Types",
    "text": "Listing Types\nThere are three built in types of listings that you can choose from. Use the type option to choose the appearance of the listing:\n---\nlisting:\n  contents: posts\n  type: default\n---\nThe type field accepts the following values:\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ndefault\nA blog style list of items.\n\n\ntable\nA table of listings.\n\n\ngrid\nA grid of listing cards.\n\n\n\n\nDefaultGridTable\n\n\nBy default, listings will appear in full width rows that display the item’s metadata (author and date), title, description, and image.\n\n\n\nGrid style listings display a card for each item.\n\n\n\nThe table listing style provides a traditional tabular layout."
  },
  {
    "objectID": "docs/websites/website-listings.html#sorting-items",
    "href": "docs/websites/website-listings.html#sorting-items",
    "title": "Document Listings",
    "section": "Sorting Items",
    "text": "Sorting Items\nBy default, listings created from documents will be ordered by their title. Use the sort option to control the order of the listing. For example:\nlisting:\n  contents: posts\n  sort: \"date\"\nEach sort key in can include a field name and optionally either asc or desc to control whether to sort in ascending or descending order. When only the bame is specified, sorting by that field will be in ascending order.\nThe sort key can also contain one or more fields to sort by. For example:\nlisting:\n  contents: posts\n  sort:\n    - \"date\"\n    - \"title desc\"\nThis will sort the documents in the post directory first by their data in ascending order, then by their title in descending order."
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-options",
    "href": "docs/websites/website-listings.html#listing-options",
    "title": "Document Listings",
    "section": "Listing Options",
    "text": "Listing Options\nIt is possible to customize the appearance of listings using the following options for each type of listing display.\n\nDefault\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmax-items\nThe maximum number of items to include in this listing.\n\n\nimage-align\nWhether to place the image on the right or left side of the post content. Defaults to right.\n\n\nimage-height\nThe height of the image being displayed. The width is automatically determined and the image will fill the rectangle without scaling (cropped to fill).\n\n\nimage-placeholder\nThe default image for items if they have no image.\n\n\n\n\n\nGrids\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmax-items\nThe maximum number of items to include in this listing.\n\n\nimage-height\nThe height of the image being displayed. The width is automatically determined and the image will fill the rectangle without scaling (cropped to fill).\n\n\nimage-placeholder\nThe default image for items if they have no image.\n\n\ngrid-columns\nThe number of columns in the grid display. Defaults to 3.\n\n\ngrid-item-border\nWhether to display a border around the item card. Defaults to true.\n\n\ngrid-item-align\nAligns the content within the card (left, right, or center). Defaults to left.\n\n\n\n\n\nTables\n\n\n\n\n\n\n\nOptions\nDescription\n\n\n\n\nmax-items\nThe maximum number of items to include in this listing.\n\n\nimage-height\nThe height of the image being displayed. The width is automatically select and the image will fill the rectangle without scaling (cropped to fill).\n\n\nimage-placeholder\nThe default image for items if they have no image.\n\n\ntable-striped\nDisplay the table rows with alternating background colors (true or false). Defaults to false\n\n\ntable-hover\nHighlight rows of the table when the user hovers the mouse over them (true or false). Defaults to false.\n\n\nfield-links\nA list of fields that should link to the document in the table (defaults to title).\n\n\n\n\n\nAdvanced Options\n\n\n\nOption\nDescription\n\n\n\n\nfield-display-names\nA mapping that provides display name for specific fields. For example, to display the title column as ‘Report’ in a table listing you would write:\nlisting:\n  field-display-names:\n    title: \"Report\"\n\n\nmax-description-length\nThe maximum length of the description displayed in the listing (in characters). Defaults to 175.\n\n\ndate-format\nThe date format to use when displaying dates (e.g. d-M-yyyy).\nYou may either provide a date style (full, long, medium, or short) or a format string for formatting the date. The behavior of date styles varies depending upon locale, but examples in the en locale are as follows:\n\nfull\n\nSaturday, February 5, 2022\n\nlong\n\nFebruary 5, 2022\n\nmedium\n\nFeb 5, 2022\n\nshort\n\n2/5/22\n\n\nLearn more about supported date formatting values here.\n\n\n\nIn addition to the above listing wide options, each listing type has a variety of options to customize its appearance."
  },
  {
    "objectID": "docs/websites/website-listings.html#categories",
    "href": "docs/websites/website-listings.html#categories",
    "title": "Document Listings",
    "section": "Categories",
    "text": "Categories\nIn addition to displaying the listing contents, listings can also automatically add a list of categories to the page that they appear on. To enable categories you can set the categories option like:\nlisting:\n  categories: true\nwhich results in categories appearing in the right sidebar:\n\nWhen users click a category, the page will be updated to show only the listing items that match the selected category.\n\nCategory Appearance\nYou can choose between a few different display styles for categories:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nnumbered\nDisplays a list of categories in alphabetical order with the number of items in that category displayed next to the category name.\n\n\nunnumbered\nDisplay a list of categories in alphabetical order.\n\n\ncloud\nDisplays a ‘word cloud’ of categories.\n\n\n\nWhen multiple listings appear on the page, categories will be enabled based upon the option set in the first listing. If categories are enabled for the first listing, all listings on the page will contribute their item categories to the list of categories and all will be filtered when the user clicks a category."
  },
  {
    "objectID": "docs/websites/website-listings.html#feeds",
    "href": "docs/websites/website-listings.html#feeds",
    "title": "Document Listings",
    "section": "Feeds",
    "text": "Feeds\nYou can also have an RSS feed generated based upon the contents of a listing. This is great to allow your content to be syndicated or to be accessible via RSS Readers. Include a feed for your listing by including the feed option:\nlisting:\n  content: posts\n  feed: true\nWhen a feed is enabled for a listing on a page, an RSS file will automatically be generated using the name of the the file. For example, index.qmd will produce a feed at index.xml. A link to the feed will be included in the head of the page as well.\nGenerating feeds requires that the site-url be set for the site in your _quarto.yml file. For example:\nwebsite:\n  site-url: \"https://www.quarto.org\"\nYou can further customize your feed using the following options:\n\n\n\nOption\nDescription\n\n\n\n\nitems\nThe number of items to include in your feed. Defaults to 20.\n\n\ntype\nfull or partial. full, the default, includes the full contents of each document in the feed. partial includes only the first paragraph contents in the feed.\n\n\ntitle\nThe title for this feed. Defaults to the site title provided in your _quarto.yml file.\n\n\nimage\nThe image for this feed. If not specified, the image for the page the listing appears on will be used, otherwise an image will be used if specified for the site in your _quarto.yml file.\n\n\ndescription\nThe description of this feed. If not specified, the description for the page the listing appears on will be used, otherwise the description of the site will be used if specified in your _quarto.yml file.\n\n\nlanguage\nThe language of the feed. Omitted if not specified. See https://www.rssboard.org/rss-language-codes for a list of valid language codes."
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-fields",
    "href": "docs/websites/website-listings.html#listing-fields",
    "title": "Document Listings",
    "section": "Listing Fields",
    "text": "Listing Fields\nWhen reading the contents of a listing, Quarto uses the metadata read from the front matter of the document or the contents of the document itself to populate the following fields for each item:\n\n\n\n\n\n\n\nField Name\nDescription\n\n\n\n\ntitle\nThe title of the item, read from the title field of the front matter (or the first H1 of the document).\n\n\nsubtitle\nThe subtitle of the item, read from the subtitle field of the front matter.\n\n\nauthor\nThe author of the item, read from the author field of the front matter.\n\n\ndescription\nThe description of the item, read from the description or abstract field of the front matter or from the first paragraph of the document.\n\n\ndate\nThe date of the item, read from the date field of the front matter.\n\n\nimage\nThe image for this team, read from the image field of the front matter, or automatically discovered by taking the first of an image of class preview-image, an image with a file name starting with feature, cover, or thumbnail, or the first image to appear in the document.\n\n\nreading-time\nAn estimate of the reading time for this item, computed by counting the words in the item and assuming a reading speed of 200 words per minute.\n\n\ncategories\nCategories for the item, read from the categories field of the front matter.\n\n\nfilename\nThe name of the input file.\n\n\nfile-modified\nThe last modified date of this input file.\n\n\n\nDepending upon the type of listing that you are using, different fields are displayed automatically:\n\n\n\n\n\n\n\n\n\nField\nType: Default\nType: Table\nType: Grid\n\n\n\n\ntitle\nx\nx\nx\n\n\nsubtitle\nx\n\n\n\n\nauthor\nx\nx\nx\n\n\ndescription\nx\n\nx\n\n\ndate\nx\nx\nx\n\n\nimage\nx\n\nx\n\n\n\n\nCustomizing Fields\nThough specific columns are displayed by default, each of the types will allow you to display any of the above columns by using the fields options. For example, to display more fields in a table (as columns), you write:\nlisting:\n  type: table\n  contents: posts\n  fields: [image, date, title, author, reading-time]\nwhich produces:\n\n\n\nTable with custom list of fields\n\n\nEach type of listing will handle the fields in different ways.\n\nTables\n\nFor table type listings, the list of fields will be displayed as columns in the order that the fields appear in the list.\n\nDefault\n\nFor default type listings, the various fields will be placed logically, with the image in the right column, the title, subtitle, and description in the center column, and any other fields in the left column.\n\n\nGrid\n\nFor grid listings, the image, title, subtitle, reading-time, categories, description, author, and date fields will be arranged on the body of the card. The filename and file-modified fields will appear in the card footer. Any other fields will appear in a table at the bottom of the card body."
  },
  {
    "objectID": "docs/websites/website-listings.html#user-tools",
    "href": "docs/websites/website-listings.html#user-tools",
    "title": "Document Listings",
    "section": "User Tools",
    "text": "User Tools\nListings support interactive tools to allow the viewer of the listing to sort, filter, or page through listings.\n\nSorting\nUsers can use the select box to choose how to sort the items in the listing (or in the case of tables, by clicking on the column headings). By default, the sorting control will allow the user to sort by title, date, or author. You can stop this UI from being displayed to the user with the option:\nlisting:\n  sort-ui: false\nYou can control which fields are included in the sort list by providing a list of field names in the sort-ui key:\nlisting:\n  sort-ui: [title, date]\n\n\nFiltering\nListings include a filter box positioned on the top right of the listing content. The filter box allows readers to perform a ‘typeahead’ search of the listing contents. You can disable the filtering control using the option:\nlisting:\n  filter-ui: false\nBy default, if the filtering control is enabling, all fields that are being displayed in the listing will be searchable. If you’d like to limit searching / filtering to specific fields, you can do so by providing a field list in the filter-ui key:\nlisting:\n  filter-ui: [title, date]\n\n\nPagination\nListings also natively support pagination of the items. The default number of items displayed on a page depends up the listing type:\n\n\n\nListing Type\nItems Per Page\n\n\n\n\ndefault\n25\n\n\ntable\n30\n\n\ngrid\n18\n\n\n\nYou can control the number of items displayed per page using the option page-size:\nlisting:\n  page-size: 36"
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-location",
    "href": "docs/websites/website-listings.html#listing-location",
    "title": "Document Listings",
    "section": "Listing Location",
    "text": "Listing Location\nBy default, listings will simply be appended to the main content region of the page. If you’d like to control where a listing appears, set an id for that listing and use that id on a corresponding div in the page. For example, updating the page used in the previous example to this:\n---\ntitle: \"Listing Example\"\nlisting:\n  id: sample-listings\n  contents: posts\n  sort: \"date desc\"\n  type: table\n---\n\nYou can review the following documents for additional information:\n\n::: {#sample-listings}\n:::\n\nLearn more about Quarto [here](https://www.quarto.com).\nResults in a listing page like:\n\n\nMultiple Listings\nYou can place any number of listings on a single page. The following would populate two listings on a single page:\n---\ntitle: Team Documents\nlisting: \n  - id: lab-reports\n    contents: \"lab-reports/*.qmd\"\n    type: table\n  - id: meeting-notes\n    contents: \"meeting-notes/*.qmd\"\n    type: table\n---\n\n## Lab Reports\n\n:::{#lab-reports}\n:::\n\n## Meeting Notes\n\n:::{#meeting-notes}\n:::"
  },
  {
    "objectID": "docs/websites/website-navigation.html",
    "href": "docs/websites/website-navigation.html",
    "title": "Website Navigation",
    "section": "",
    "text": "There are a variety of options available for providing website navigation, including:\n\nUsing top navigation (a navbar) with optional sub-menus.\nUsing side navigation with a hierarchy of pages.\nCombining top and side navigation (where top navigation links to different sections of the site each with their own side navigation).\n\nIn addition, you can add full text search to either the top or side navigation interface."
  },
  {
    "objectID": "docs/websites/website-navigation.html#top-navigation",
    "href": "docs/websites/website-navigation.html#top-navigation",
    "title": "Website Navigation",
    "section": "Top Navigation",
    "text": "Top Navigation\nTo add top-navigation to a website, add a navbar entry to the website config in _quarto.yml. For example, the following YAML:\nwebsite:\n  navbar:\n    background: primary\n    search: true\n    left:\n      - text: \"Home\"\n        file: index.qmd\n      - talks.qmd\n      - about.qmd \nResults in a navigation bar that looks something like this:\n\nAbove we use the left option to specify items for the left side of the navigation bar. You can also use the right option to specify items for the right side.\nThe text for navigation bar items will be taken from the underlying target document’s title. Note that in the above example we provide a custom text: \"Home\" value for index.qmd.\nYou can also create a navigation bar menu by including a menu (which is a list of items much like left and right). For example:\nleft:\n  - text: \"More\"\n    menu:\n      - talks.qmd\n      - about.qmd \nHere are all of the options available for top navigation:\n\n\n\nOption\nDescription\n\n\n\n\ntitle\nNavbar title (uses the site: title if none is specified). Use title: false to surpress the display of the title on the navbar.\n\n\nlogo\nLogo image to be displayed left of the title.\n\n\nbackground\nBackground color (“primary”, “secondary”, “success”, “danger”, “warning”, “info”, “light”, “dark”, or hex color)\n\n\nforeground\nForeground color (“primary”, “secondary”, “success”, “danger”, “warning”, “info”, “light”, “dark”, or hex color). The foreground color will be used to color navigation elements, text and links that appear in the navbar.\n\n\nsearch\nInclude a search box (true or false)\n\n\nleft / right\nLists of navigation items for left and right side of navbar\n\n\npinned\nAlways show the navbar (true or false). Defaults to false, and uses headroom.js to automatically show the navbar when the user scrolls up on the page.\n\n\ncollapse\nCollapse the navbar items into a hamburger menu when the display gets narrow (defaults to true)\n\n\ncollapse-below\nResponsive breakpoint at which to collapse navbar items to a hamburger menu (“sm”, “md”, “lg”, “xl”, or “xxl”, defaults to “lg”)\n\n\n\nHere are the options available for individual navigation items:\n\n\n\nOption\nDescription\n\n\n\n\nhref\nLink to file contained with the project or external URL.\n\n\ntext\nText to display for navigation item (defaults to the document title if not provided).\n\n\nicon\nName of one of the standard Bootstrap 5 icons (e.g. “github”, “twitter”, “share”, etc.).\n\n\naria-label\nAccessible label for the navigation item.\n\n\nmenu\nList of navigation items to populate a drop-down menu.\n\n\n\nFor more information on controlling the appearance of the navigation bar using HTML themes, see HTML Themes - Navigation."
  },
  {
    "objectID": "docs/websites/website-navigation.html#side-navigation",
    "href": "docs/websites/website-navigation.html#side-navigation",
    "title": "Website Navigation",
    "section": "Side Navigation",
    "text": "Side Navigation\nIf your site consists of more than a handful of documents, you might prefer to use side navigation, which enables you to display an arbitrarily deep hierarchy of articles.\nIf you are reading this page on a desktop device then you will see the default side navigation display on the left (otherwise you’ll see a title bar at the top which you can click or touch to reveal the navigation).\nTo add side navigation to a website, add a sidebar entry to the website section of _quarto.yml. For example:\nwebsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    contents:\n      - section: \"Basics\"\n        contents:\n          - index.qmd\n          - basics-knitr.qmd\n          - basics-jupyter.qmd\n      - section: \"Layout\"\n        contents:\n          - layout.qmd\n          - layout-knitr.qmd\n          - layout-jupyter.qmd\nThere are two styles of side navigation available: “docked” which shows the navigation in a sidebar with a distinct background color, and “floating” which places it closer to the main body text. Here’s what the “docked” and “floating” styles look like (respectively):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere are all of the options available for side navigation:\n\n\n\nOption\nDescription\n\n\n\n\nid\nOptional identifier (used only for hybrid navigation, described below).\n\n\ntitle\nSidebar title (uses the project title if none is specified).\n\n\nsubtitle\nOptional subtitle\n\n\nlogo\nOptional logo image\n\n\nsearch\nInclude a search box (true or false). Note that if there is already a search box on the top navigation bar it won’t be displayed on the sidebar.\n\n\ntools\nList of sidebar tools (e.g. link to github or twitter, etc.). See the next section for details.\n\n\nitems\nList of navigation items to display (typically top level items will in turn have a list of sub-items).\n\n\nstyle\n“docked” or “floating”\n\n\ntype\n“dark” or “light” (hint to make sure the text color is the inverse of the background)\n\n\nbackground\nBackground color (“none”, “primary”, “secondary”, “success”, “danger”, “warning”, “info”, “light”, “dark”, or “white”). Defaults to “light”.\n\n\nforeground\nForeground color (“primary”, “secondary”, “success”, “danger”, “warning”, “info”, “light”, “dark”, or hex color). The foreground color will be used to color navigation elements, text and links that appear in the sidebar.\n\n\nborder\nWhether to show a border on the sidebar. “true” or “false”\n\n\nalignment\nAlignment (“left”, “right”, or “center”).\n\n\ncollapse-level\nWhether to show sidebar navigation collapsed by default. The default is 2, which shows the top and next level fully expanded (but leaves the 3rd and subsequent levels collapsed).\n\n\npinned\nAlways show a title bar that expands to show the sidebar at narrower screen widths (true or false). Defaults to false, and uses headroom.js to automatically show the navigation bar when the user scrolls up on the page.\n\n\n\nFor more information on controlling the appearance of the side navigation using HTML themes, see HTML Themes - Navigation.\n\nSidebar Tools\nIn addition to traditional navigation, the sidebar can also display a set of tools (e.g. social actions, github view or edit actions, etc.) A tool definition consists of an icon name and an href to follow when clicked. For icon, use the icon name of any of the 1,300+ Bootstrap Icons.\nFor example:\n\n\n\nwebsite:\n  sidebar:\n    tools:\n      - icon: twitter\n        href: https://twitter.com\n      - icon: github\n        menu:\n          - text: Source Code\n            url:  https://code.com\n          - text: Report a Bug\n            url:  https://bugs.com"
  },
  {
    "objectID": "docs/websites/website-navigation.html#hybrid-navigation",
    "href": "docs/websites/website-navigation.html#hybrid-navigation",
    "title": "Website Navigation",
    "section": "Hybrid Navigation",
    "text": "Hybrid Navigation\nIf you have a website with dozens or even hundreds of pages you will likely want to use top and side navigation together (where the top navigation links to various sections, each with their own side navigation).\nTo do this, provide a list of sidebar entries and give them each an id, which you then use to reference them from the navbar. For example, if you are using the Diátaxis Framework for documentation, you might have separate sections for tutorials, how-to guides, explanations, and reference documents:\n\nYour site configuration might look something like this:\nwebsite:\n  navbar:\n    search: true\n    left:\n      - text: \"Home\"\n        file: index.qmd\n      - sidebar:tutorials\n      - sidebar:howto\n      - sidebar:fundamentals\n      - sidebar:reference\n\n  sidebar:\n    - id: tutorials\n      title: \"Tutorials\"\n      style: \"docked\"\n      background: light\n      collapse-level: 2\n      contents: \n        # navigation items\n        \n    - id: howto\n      title: \"How-To\"\n      contents:\n        # navigation items\n        \n    - id: fundamentals\n      title: \"Fundamentals\"\n      contents: :\n        # navigation items\n        \n    - id: reference\n      title: \"Reference\"\n      contents: \n        # navigation items\n    \nNote that the first sidebar definition contains a few options (e.g. style and background). These options are automatically inherited by the other sidebars."
  },
  {
    "objectID": "docs/websites/website-navigation.html#page-navigation",
    "href": "docs/websites/website-navigation.html#page-navigation",
    "title": "Website Navigation",
    "section": "Page Navigation",
    "text": "Page Navigation\nIf you have a website with several pages in a section or subsection, it is often convenient to offer the user the ability to navigate to the next page (or previous page) at the bottom of the page that they’ve just finished reading. You can enable this using:\nwebsite:\n  page-navigation: true\nWhen enabled, page navigation will be displayed at the bottom of the page whenever there is a next or previous page (including in the next or previous section). This option is enabled by default for books but not for websites.\n\nSeparators\nIf you include a page separator in the sidebar (either between sections or items), page navigation controls will not appear to continue pagination across the separator. For example, in the following sidebar:\nwebsite:\n  sidebar:\n    contents:\n      - section: \"First Section\"\n      - contents:\n        - href: document1.qmd\n        - href: document2.qmd\n        - href: document3.qmd\n      - section: \"---\"\n      - section: \"Second Section\"\n        contents:\n          - href: document4.qmd\n          - href: document5.qmd\n          - href: document6.qmd\nWhen the user reaches the bottom of document3.qmd, they will see previous navigation to go back to document2.qmd, but they will not see next navigation to continue onto document 4. This behavior is useful when you have sections of contents that don’t naturally flow together in sequential order. Use the separator to denote this in the sidebar with a horizontal line and to break up pagination."
  },
  {
    "objectID": "docs/websites/website-navigation.html#page-footer",
    "href": "docs/websites/website-navigation.html#page-footer",
    "title": "Website Navigation",
    "section": "Page Footer",
    "text": "Page Footer\nUse the page-footer option to provide a common footer for all of the pages in a website. The simplest footer just provides text that will be centered and displayed in a lighter typeface:\nwebsite:\n  page-footer: \"Copyright 2021, Norah Jones\" \nYou can alternatively target the left, right, and center regions of the footer individually:\nwebsite:\n  page-footer: \n    left: \"Copyright 2021, Norah Jones\" \n    right: \n      - icon: github\n        href: https://github.com/\n      - icon: twitter \n        href: https://twitter.com/ \nNote for the right region of the footer we included navigational items for GitHub and Twitter rather than text. You can include navigational items in any region of the footer.\nYou can use the background, foreground, and border options to further control the appearance of the footer. By default, the footer has no background color and a top border. To eliminate the border you would do this:\nwebsite:\n  page-footer:\n    border: false\nTo use a light background (e.g. to match a navigation bar) you would do this:\nwebsite:\n  page-footer:\n    background: light\nUnless specified, the color (foreground) used for elements that appear in the footer will be automatically determined by using a color that contrasts with the footer background."
  },
  {
    "objectID": "docs/websites/website-navigation.html#hiding-navigation",
    "href": "docs/websites/website-navigation.html#hiding-navigation",
    "title": "Website Navigation",
    "section": "Hiding Navigation",
    "text": "Hiding Navigation\nFor some pages (especially those with a completely custom layout) you can hide navigation altogether (navbar, sidebar, or both). In these case, add the following to the page front matter:\n# Hides the sidebar on this page\nsidebar: false\n\n# Hides the navbar on this page\nnavbar: false"
  },
  {
    "objectID": "docs/websites/website-navigation.html#reader-mode",
    "href": "docs/websites/website-navigation.html#reader-mode",
    "title": "Website Navigation",
    "section": "Reader Mode",
    "text": "Reader Mode\nIf you’d like users to be able to hide the side navigation and table of contents and have a more focused reading experience, you can enabled reader-mode. When enabled, a reader-mode toggle will appear on the navbar, if present, or on the sidebar. When pressed, the toggle will ‘roll up’ the sidebar and table of contents.\n\nTo enable reader-mode, use the following in your project:\nwebsite:\n  reader-mode: true"
  },
  {
    "objectID": "docs/websites/website-navigation.html#site-search",
    "href": "docs/websites/website-navigation.html#site-search",
    "title": "Website Navigation",
    "section": "Site Search",
    "text": "Site Search\nYou can add site search by including search: true in either your site-navbar or site-sidebar configuration. For example:\nwebsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    items:\n      - text: \"Basics\"\n        contents:\n          - index.qmd\n          - basics-jupyter.md\n        # etc"
  },
  {
    "objectID": "docs/websites/website-navigation.html#github-links",
    "href": "docs/websites/website-navigation.html#github-links",
    "title": "Website Navigation",
    "section": "GitHub Links",
    "text": "GitHub Links\nYou can add various links (e.g. to edit pages, report issues, etc.) to the GitHub repository where your site source code is hosted. To do this, add a repo-url along with one or more actions in repo-actions. For example:\nwebsite:\n  repo-url: https://github.com/quarto-dev/quarto-demo\n  repo-actions: [edit, issue]\nThe links will be displayed immediately below the page table of contents:\n\nBy default, the main branch will be used for generating links. You can specify an alternate branch using the repo-branch option."
  },
  {
    "objectID": "docs/websites/website-navigation.html#redirects",
    "href": "docs/websites/website-navigation.html#redirects",
    "title": "Website Navigation",
    "section": "Redirects",
    "text": "Redirects\nIf you rename or move a page on your site, you may want to create redirects from the old URLs so that existing links don’t break. You can do this by adding aliases from old pages to renamed pages.\nFor example, let’s say you renamed page.qmd to renamed-page.qmd. You would add the following aliases entry to renamed-page.qmd to create the redirect:\n---\ntitle: \"Renamed Page\"\naliases:\n  - page.html\n---\nThis can also be useful for situations where you re-organize content on your site into a different directory hierarchy or break one large article into smaller ones. For this case, you may want to add the URL hash of the section that you have broken into a new page. For example:\n---\ntitle: \"Learning More\"\naliases:\n  - overview.html#learning-more\n---\n\n\n\n\n\n\nTip\n\n\n\nDepending on where you are deploying your site there may be more powerful tools available for defining redirects based on patterns. For example, Netlify _redirects files or .htaccess files. Search your web host’s documentation for “redirects” to see if any of these tools are available."
  },
  {
    "objectID": "docs/websites/website-navigation.html#pages-404",
    "href": "docs/websites/website-navigation.html#pages-404",
    "title": "Website Navigation",
    "section": "404 Pages",
    "text": "404 Pages\nWhen a browser can’t find a requested web page, it displays a 404 error indicating that the file can’t be found. Browser default 404 pages can be pretty stark, so you may want to create a custom page with a more friendly message and perhaps pointers on how users might find what they are looking for.\nMost web serving platforms (e.g. Netlify, GitHub Pages, etc.) will use a file named 404.html in the root of your website as a custom error page if you provide it. You can include a custom 404 page in a Quarto website by creating a markdown file named 404.qmd in the root of your project. For example:\n---\ntitle: Page Not Found\n---\n\nThe page you requested cannot be found (perhaps it was moved or renamed).\n\nYou may want to try searching to find the page's new location.\nNote that you can use HTML alongside markdown within your 404.qmd file in order to get exactly the appearance and layout you want.\nYour 404 page will appear within the chrome of your site (e.g. fonts, css, layout, navigation, etc.). This is so that users don’t feel that they’ve irrecoverably “left” your site when they get a 404 error. If you don’t want this behavior, then provide a 404.html rather than 404.qmd.\nHere are some examples of how various popular websites handle custom 404 pages: https://blog.fluidui.com/top-404-error-page-examples/.\n\nNon-Root Site Paths\nIf your website is served from the root of a domain (e.g. https://example.com/) then simply providing a 404.qmd file as described above is all that’s required to create a custom 404 page.\nHowever, if your website is not served from the root of a domain then you need to provide one additional bit of configuration to make sure that resources (e.g. your site’s CSS) are resolved correctly within 404 pages.\nFor example, if your site is served from https://example.com/mysite/ then you’d add the following to your project website configuration within _quarto.yml:\nwebsite:\n  title: \"My Site\"\n  site-path: \"/mysite/\"\nNote that if you are already providing a site-url (which is required for generation of sitemaps and social metadata preview images) then it’s enough to simply include the path within the site-url:\nwebsite:\n  title: \"My Site\"\n  site-url: \"https://example.com/mysite/\""
  },
  {
    "objectID": "docs/websites/publishing-websites.html",
    "href": "docs/websites/publishing-websites.html",
    "title": "Publishing Websites",
    "section": "",
    "text": "There are a wide variety of ways to publish Quarto websites. Website content is by default written to the _site sub-directory (you can customize this using the output-dir option). Publishing is simply a matter of copying the output directory to a web server or web hosting service.\nBelow we describe several convenient options for Quarto website deployment including GitHub Pages, Netlify, RStudio Connect, Firebase, Site44, and Amazon S3. We’ll mostly defer to the documentation provided by the various services, but will note any Quarto website specific configuration required."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#rendering-for-publish",
    "href": "docs/websites/publishing-websites.html#rendering-for-publish",
    "title": "Publishing Websites",
    "section": "Rendering for Publish",
    "text": "Rendering for Publish\nThe most important thing you should be sure to do before publishing is a final render of your project:\nquarto render\nIf you are publishing a book you’ll want to add the --to all argument to ensure that all output formats (e.g. PDF, EPUB) have up to date content:\nquarto render --to all\nThis is particularly important to remember because incremental changes you make when using the development server aren’t rendered into the output directory. To ensure that your output is up to date before publishing you should always do a full quarto render."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#github-pages",
    "href": "docs/websites/publishing-websites.html#github-pages",
    "title": "Publishing Websites",
    "section": "GitHub Pages",
    "text": "GitHub Pages\nGitHub Pages is a service that lets you publish a website from any GitHub repository. There are a few configuration steps required to host a Quarto website using GitHub Pages:\n\nCreate a file named .nojekyll in your repository (this is required to disable some processing of HTML files that GitHub does by default). You can do this with the following:\ntouch .nojekyll\nIf you are using Windows Powershell, you can do this with:\nni  .nojekyll\nSet the output-dir within your _quarto.yml project file to “docs”:\nproject:\n  type: website\n  output-dir: docs\nConfigure your gh-pages to serve content from the “docs” directory:\n\n\nSee the GitHub Pages documentation for additional details on creating and deploying websites with GitHub."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#netlify",
    "href": "docs/websites/publishing-websites.html#netlify",
    "title": "Publishing Websites",
    "section": "Netlify",
    "text": "Netlify\nNetlify is a popular website hosting service that allows for both direct upload of website files or integrated publishing from Git repositories (GitHub, GitLab, or Bitbucket) via commit-hooks.\nIf you are using Netlify Git integration, be sure to set the publish directory to the output directory of your website (_site by default but modifiable via the output-dir metadata value). For example:"
  },
  {
    "objectID": "docs/websites/publishing-websites.html#rstudio-connect",
    "href": "docs/websites/publishing-websites.html#rstudio-connect",
    "title": "Publishing Websites",
    "section": "RStudio Connect",
    "text": "RStudio Connect\nRStudio Connect is a server product from RStudio for secure sharing of websites, applications, reports, and plots.\nUnlike the other website publishing options described here, RStudio Connect is a server that you run inside an organization, so is suitable for publishing content that you only want visible within your organization’s network as opposed to visible to the entire internet.\nYou can deploy a Quarto website to RStudio Connect from the command line using the quarto_publish_site() function from the R quarto package. For example:\nlibrary(quarto)\nquarto_publish_site(server = \"https://rsc.example.com\")\nNote that once you’ve published the site for the first time you can omit the server argument:\nquarto_publish_site()\nYou can also publish to RStudio Connect directly from within RStudio. To do this, just click the Publish button  on the editor toolbar or preview window:\n\nFor the time being Publish finished website only is the only option supported for publishing Quarto websites to RStudio Connect. Support for publishing websites with source code (so they can be rendered on the server) will be added to an upcoming release of RStudio Connect.\n\n\n\n\n\n\nNote\n\n\n\nYou should be running the latest release of RStudio (v2022.02) if you want to publish Quarto websites. The preview release has many other Quarto related enhancements so is highly recommended even if you aren’t using the publishing features."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#google-firebase",
    "href": "docs/websites/publishing-websites.html#google-firebase",
    "title": "Publishing Websites",
    "section": "Google Firebase",
    "text": "Google Firebase\nGoogle Firebase has a web hosting service that enables easy deployment of websites using a set of command line tools.\nFirebase websites by default deploy content from the public directory of the Firebase project directory. This means that you should set the output-dir to \"public\" within _quarto.yml:\nproject:\n  type: website\n  output-dir: public"
  },
  {
    "objectID": "docs/websites/publishing-websites.html#site44",
    "href": "docs/websites/publishing-websites.html#site44",
    "title": "Publishing Websites",
    "section": "Site44",
    "text": "Site44\nSite44 is a service that allows you to publish websites from within Dropbox folders. Site44 creates a Dropbox/Apps/site44 directory, and any folders within that directory are published as websites.\nThe recommended workflow for deploying Quarto websites to Site44 is to develop your website in a separate project directory, and then, when it’s ready for final publishing, copy the contents of the _site directory to the folder for your website."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#amazon-s3",
    "href": "docs/websites/publishing-websites.html#amazon-s3",
    "title": "Publishing Websites",
    "section": "Amazon S3",
    "text": "Amazon S3\nIf you are a user of Amazon Web Services you can serve your website directly from Amazon S3. Note however that this option is a bit more technically involved than GitHub Pages, Netlify, or Site44. See the article on Hosting a Static Website on Amazon S3 for additional details."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#other-services",
    "href": "docs/websites/publishing-websites.html#other-services",
    "title": "Publishing Websites",
    "section": "Other services",
    "text": "Other services\nAny web server or web host can be used to deploy a Quarto website. Here’s a recent CNET roundup of other web hosts you could consider. You can also deploy a Quarto website on any internal (intranet) web server."
  },
  {
    "objectID": "docs/websites/website-blog.html",
    "href": "docs/websites/website-blog.html",
    "title": "Creating a Blog",
    "section": "",
    "text": "Quarto websites include integrated support for blogging. Blogs consist of a collection of posts along with a navigational page that lists them in reverse chronological order. Blogs can include a custom about page, publish an RSS feed, and use a wide variety of themes.\nYou can create websites that consist entirely of a single blog, websites that have multiple blogs, or you can add a blog to a website that contains other content."
  },
  {
    "objectID": "docs/websites/website-blog.html#blog-projects",
    "href": "docs/websites/website-blog.html#blog-projects",
    "title": "Creating a Blog",
    "section": "Blog Projects",
    "text": "Blog Projects\nTo create a new blog, use the quarto create-project command with --type website:blog. For example, to create a blog within the directory myblog you would do this:\nquarto create-project myblog --type website:blog\nThis will result in the directory myblog being populated with a website that serves a single blog:\nCreating project at myblog:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n\n\n\n\n\n\nNote\n\n\n\nIf you are using RStudio, you can alternatively use the New Project command to create a Quarto Blog. Note that this feature is only available in the preview release of RStudio.\n\n\nHere’s a summary of the key files created within the project:\n\n\n\nFile\nDescription\n\n\n\n\n_quarto.yml\nQuarto project file.\n\n\nindex.qmd\nBlog home page.\n\n\nabout.qmd\nBlog about page.\n\n\nposts/\nDirectory containing posts\n\n\nposts/_metadata.yml\nShared options for posts\n\n\nstyles.css\nCustom CSS for website\n\n\n\nLet’s take a closer look at the various components of the project."
  },
  {
    "objectID": "docs/websites/website-blog.html#home-page",
    "href": "docs/websites/website-blog.html#home-page",
    "title": "Creating a Blog",
    "section": "Home Page",
    "text": "Home Page\nThe home page is a listing page for all of the documents in the posts directory:\n\nHere’s the source code for the home page:\n---\ntitle: \"myblog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n---\nWhen you render a new post, the listing page will automatically updated, adding the most recent post to the top of the list.\n\n\n\n\n\n\nWarning\n\n\n\nIt is not recommended that you use dynamic dates (for example today or last-modified) in your blog posts. This will cause the order of your blog and feed to be changed each time the document is rendered or modified.\n\n\nSee the article on Listing Pages to learn more about customizing listings, including use a grid layout rather than the default shown above.\n\nCategories\nThe listing page is configured to enable categories, which display in the right margin of the page:\n---\ntitle: \"myblog\"\nlisting:\n  # (additional metadata excluded for brevity)\n  categories: true\n---\nThe categories are read from the front matter of documents included in the listing. For example, here is sample post metadata that includes categories:\n---\ntitle: \"Post With Code\"\ndescription: \"Post description\"\nauthor: \"Fizz McPhee\"\ndate: \"5/22/2021\"\ncategories:\n  - news\n  - code\n  - analysis\n---\nSee the article on Categories to learn more."
  },
  {
    "objectID": "docs/websites/website-blog.html#about-page",
    "href": "docs/websites/website-blog.html#about-page",
    "title": "Creating a Blog",
    "section": "About Page",
    "text": "About Page\nThe about.qmd document includes additional information on the blog and its author. For example:\n\nHere’s what the source code of an about.qmd might look like:\n---\ntitle: \"About\"\nimage: profile.jpg\nabout:\n  template: jolla\n  links:\n    - icon: twitter\n      text: Twitter\n      href: https://twitter.com\n    # (additional links excluded for brevity)\n---\n\n## About this blog\n\nThis is the contents of the about page for my blog.\nSee the article on About Pages to learn about the various options available for customizing page output."
  },
  {
    "objectID": "docs/websites/website-blog.html#posts-directory",
    "href": "docs/websites/website-blog.html#posts-directory",
    "title": "Creating a Blog",
    "section": "Posts Directory",
    "text": "Posts Directory\nThe posts that make up the contents of the blog are located in the posts directory.\nAdd a new post to your blog by creating a sub-directory within posts, and adding an index.qmd file to the directory. That qmd file is the new blog post and when you render that, the blog home page will automatically update to include the newest post at the top of the listing.\n\nDrafts\nAdd draft: true to the document options if you’d like a post to not be included in the listing, site map, or site search. For example:\n---\ntitle: \"My Post\"\ndescription: \"Post description\"\nauthor: \"Fizz McPhee\"\ndate: \"5/22/2021\"\ndraft: true\n---\nTo publish the post when it is complete, simply remove draft: true from the document options and then render it.\n\n\nFreezing Posts\nBlogs posts that contain executable code often have the problem that posts created last year can’t be rendered this year (for example, because the packages used by the post have changed). A similar problem can also arise when a blog has multiple contributors and not everyone has the right software (or the right versions) to render all of the posts. Finally, posts that include computations can often take a while to render, and you don’t want the cumulative time required to render the site to grow too large.\nThe solution to these problems is to freeze the output of computational blog posts. When a post is rendered with freeze: true, the markdown output from the the underlying engine (e.g. Jupyter or Knitr) is saved. When the entire site is rendered these computations are not re-run, but rather read from the previously frozen results.\nThe only time an article with freeze: true is rendered is when you explicitly re-render it. By specifying this option for blog posts you can ensure that posts rendered now will always re-render well with the rest of the site, even if the software required to originally render them isn’t available.\nIn the default blog we include a file (_metadata.yml) that establishes shared metadata for all documents within the posts directory. In this file, we specify that we want freeze: true set by default for all posts:\n# options apply to all posts in this folder\n\n# freeze computational output\nfreeze: true\nSee the article on the freeze option to learn more about freezing computational output within websites."
  },
  {
    "objectID": "docs/websites/website-blog.html#themes",
    "href": "docs/websites/website-blog.html#themes",
    "title": "Creating a Blog",
    "section": "Themes",
    "text": "Themes\nBlogs can use any of the 25 Bootswatch themes included with Quarto. You can also create your own themes. The default blog generated by quarto create-project uses the cosmo theme. Here are links to the available themes along with thumbnails of what the simple default blog looks like under a few of them:\n\n\n\n\ndefault\ncerulean\ncosmo\ncyborg\ndarkly\nflatly\njournal\nlitera\nlumen\nlux\nmateria\nminty\nmorph\npulse\nquartz\nsandstone\nsimplex\nsketchy\nslate\nsolar\nspacelab\nsuperhero\nunited\nvapor\nyeti\nzephyr\n\n\n\nlitera\n\n\n\n\n\nsolar\n\n\n\n\n\nmorph"
  },
  {
    "objectID": "docs/websites/website-blog.html#rss-feed",
    "href": "docs/websites/website-blog.html#rss-feed",
    "title": "Creating a Blog",
    "section": "RSS Feed",
    "text": "RSS Feed\nBlogs typically include an RSS feed that allows their content to be easily syndicated to feed readers and other websites. You can enable RSS for a blog by doing the following:\n\nIn the quarto.yml file, add a site-url and description to the website key (without these options being set in the project file, Quarto cannot generated a feed). For example:\nwebsite:\n  title: \"myblog\"\n  site-url: https://www.myblogexample.io\n  description: \"A great sample blog\"\nIn your blog home page index.qmd add the feed: true option to the listing. For example:\n---\ntitle: \"myblog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n  feed: true\n---\n\nNow, when your site is rendered, an RSS feed will also be generated. To learn more, see the article on RSS Feeds.\n\n\n\n\n\n\nIncluding an RSS Link on the Navbar\n\n\n\nYou can add an RSS link to your navbar by including the following in your _quarto.yml project file. For example:\nwebsite:\n  title: \"myblog\"\n  site-url: https://www.myblogexample.io\n  description: \"A great sample blog\"\n  navbar:\n    right:\n      - icon: rss\n        href: index.xml"
  },
  {
    "objectID": "docs/websites/website-blog.html#publishing",
    "href": "docs/websites/website-blog.html#publishing",
    "title": "Creating a Blog",
    "section": "Publishing",
    "text": "Publishing\nThere are a wide variety of ways to publish Quarto blogs. Blog content is by default written to the _site sub-directory. Publishing is simply a matter of copying this directory to a web server or web hosting service.\nThe article on Publishing Websites describes in more detail how to publish to the following services:\n\nGitHub Pages\nNetlify\nRStudio Connect\nFirebase\nSite44\nAmazon S3"
  },
  {
    "objectID": "docs/websites/website-blog.html#subscriptions",
    "href": "docs/websites/website-blog.html#subscriptions",
    "title": "Creating a Blog",
    "section": "Subscriptions",
    "text": "Subscriptions\nYou may want to allow readers of your blog to subscribe to updates via email. You can use a third party email service to manage and send these emails.\nThird party email services will typically take your RSS Feed as input (e.g. https://https://www.myblogexample.io/index.xml) and provide HTML for a subscription widget that you can place on your blog. A good place to locate that widget is often right margin of your blog.\nHere are the steps required to add a subscription widget:\n\nUse your email service features to generate the HTML for your subscription widget. MailChimp, for example, provides HTML like this for a minimal subscription widget.\n<span style=\"font-weight: 600;\">Subscribe</span>\n\n<!-- Begin Mailchimp Signup Form -->\n<link href=\"http://cdn-images.mailchimp.com/embedcode/slim-10_7_dtp.css\" rel=\"stylesheet\" type=\"text/css\">\n<style type=\"text/css\">\n    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif;  width:170px;}\n    /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block.\n       We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */\n    #mc-embedded-subscribe-form{margin-left:-5px;}\n</style>\n<div id=\"mc_embed_signup\">\n<form action=\"<site_url>\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" class=\"validate\" target=\"_blank\" novalidate>\n    <div id=\"mc_embed_signup_scroll\">\n\n    <input type=\"email\" value=\"\" name=\"EMAIL\" class=\"email\" id=\"mce-EMAIL\" placeholder=\"email address\" required>\n    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\n    <div style=\"position: absolute; left: -5000px;\" aria-hidden=\"true\"><input type=\"text\" name=\"b_f718424fc5df77c22533bdaa6_a3c37fb57b\" tabindex=\"-1\" value=\"\"></div>\n        <div class=\"optionalParent\">\n            <div class=\"clear foot\" style=\"margin-top: 10px;\">\n                <input type=\"submit\" value=\"Subscribe\" name=\"subscribe\" id=\"mc-embedded-subscribe\" class=\"button\">\n                <p class=\"brandingLogo\"></p>\n            </div>\n        </div>\n    </div>\n</form>\n</div>\n\n<!--End mc_embed_signup-->\n\n\n\n\n\n\nWarning\n\n\n\nThe above widget HTML will not work in your blog as the subscription HTML needs to contain value specific to your blog. See your email service provider’s instructions for generating a subscription widget.\n\n\nCreate the file subscribe.html in the root of your project.\nPaste the HTML for your subscription widget into subscribe.html and save the file.\nAdd subscribe.html to the margin-header in your _quarto.yml file:\nwebsite:\n  # (additional metadata excluded for brevity)\n  margin-header: subscribe.html\n\nThe result looks like this:"
  },
  {
    "objectID": "docs/websites/website-tools.html",
    "href": "docs/websites/website-tools.html",
    "title": "Website Tools",
    "section": "",
    "text": "You can provide standard headers and footers for pages on your site. These can apply to the main document body or to the sidebar. Available options include:\n\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\nbody-header\nMarkdown to insert at the beginning of each page’s body (below the title and author block).\n\n\nbody-footer\nMarkdown to insert below each page’s body.\n\n\nmargin-header\nMarkdown to insert above right margin content (i.e. table of contents).\n\n\nmargin-footer\nMarkdown to insert below right margin content.\n\n\n\nFor example:\nbody-header: | \n  This page brought to you by <https://example.com>\nmargin-header: |\n  ![Logo image](logo.png)"
  },
  {
    "objectID": "docs/websites/website-tools.html#social-metadata",
    "href": "docs/websites/website-tools.html#social-metadata",
    "title": "Website Tools",
    "section": "Social Metadata",
    "text": "Social Metadata\nYou can enhance your website and the content that you publish to it by including additional types of metadata, including:\n\nFavicon\nTwitter Cards\nOpen Graph\n\n\nFavicon\nThe favicon for your site provides an icon for browser tabs and other sites that link to yours. Use the favicon option to provide the path to a favicon image. For example:\nwebsite:\n  favicon: logo.png\n\n\nTwitter Cards\nTwitter Cards provide an enhanced appearance when someone links to your site on Twitter. When a link to your site is included in a Tweet, Twitter automatically crawls your site and fetches any Twitter Card metadata. To enable the automatic generation of Twitter Card metadata for your site, you can add the following to your _quarto.yml configuration file:\nwebsite:\n  twitter-card: true\nIn this case, Quarto will automatically generate a title, description, and preview image for the content. For more information about how Quarto finds preview images, see Preview Images.\nYou may also provide additional metadata to be used when generating the Twitter Card, including:\n\n\n\nKey\nDescription\n\n\n\n\ntitle\nThe title of the page. Quarto will automatically use the title metadata from the page metadata. If you’d like you can override this just for the Twitter Card by including a title in the twitter-card metadata.\n\n\ndescription\nA short description of the content. Quarto will automatically use the description metadata from the page metadata. If you’d like you can override this just for the Twitter Card by including a description in the twitter-card metadata.\n\n\nimage\nThe path to a preview image for this content. By default, Quarto will use the image value from the site: metadata. If you provide an image, you may also optionally provide an image-width and image-height to improve the appearance of your Twitter Card.\nIf image is not provided, Quarto will automatically attempt to locate a preview image. For more information, see Preview Images.\n\n\ncard-style\nEither summary or summary_large_image. If this is not provided, the best style will automatically selected based upon other metadata. You can learn more about Twitter Card styles here.\n\n\ncreator\n@username of the content creator. Note that strings with special characters such as @ must be quoted in yaml.\n\n\nsite\n@username of website. Note that strings with special characters such as @ must be quoted in yaml.\n\n\n\nHere is a more comprehensive example of specifying Twitter Card metadata in a quarto.yml file:\nwebsite:\n  twitter-card:\n    creator: \"@dragsonstyle\"\n    site: \"@rstudio\"\nQuarto will automatically merge global metadata found in the website: twitter-card key with any metadata provided in the document itself in the twitter-card key. This is useful when you need to specify a mix of global options (for example, site) with per document options such as title or image.\n\n\nOpen Graph\nThe Open Graph protocol is a specification that enables richer sharing of links to articles on the web. It will improve the previews of your content when a link to it is pasted into applications like Slack, Discord, Facebook, Linkedin, and more. To enable the automatic generation of Open Graph metadata for your content, include the following in your _quarto.yml configuration file:\nwebsite:\n  opengraph: true\nIn this case, Quarto will automatically generate a title, description, and preview image for the content. For more information about how Quarto finds preview images, see Preview Images.\nYou may also provide additional metadata to be used when generating the Open Graph metadata, including:\n\n\n\nKey\nDescription\n\n\n\n\ntitle\nThe title of the page. Quarto will automatically use the title metadata from the page metadata. If you’d like you can override this just for the Open Graph metadata by including a title in the open-graph metadata.\n\n\ndescription\nA short description of the content. Quarto will automatically use the description metadata from the page metadata. If you’d like you can override this just for the Open Graph metadata by including a description in the open-graph metadata.\n\n\nimage\nThe path to a preview image for this content. By default, Quarto will use the image value from the site: metadata. If you provide an image, you may also optionally provide an image-width and image-height.\nIf image is not provided, Quarto will automatically attempt to locate a preview image. For more information, see Preview Images.\n\n\nlocale\nThe locale that the Open Graph metadata is marked up in.\n\n\nsite-name\nThe name which should be displayed for the overall site. If not explicitly provided in the open-graph metadata, Quarto will use the site:title value.\n\n\n\nHere is a more comprehensive example of specifying Open Graph metadata in a quarto.yml file:\nwebsite:\n  open-graph:\n    locale: es_ES\n    site-name: Quarto\nQuarto will automatically merge global metadata found in the website: open-graph key with any metadata provided in the document itself in the open-graph key. This is useful when you need to specify a mix of global options (for example, site) with per document options such as title or image.\n\n\nPreview Images\nYou can specify a preview image for your article in several different ways:\n\nYou can explicitly provide a full url to the preview image using the image field in the appropriate metadata. For example:\ntitle: \"My Document\"\ntwitter-card:\n  image: \"https://quarto.org/docs/websites/images/tools.png\"\nYou may provide a document relative path to an image (such as images/preview-code.png) or a project relative path to an image (such as /images/preview-code.png). If you provide a relative path such as this, you must also provide a site-url in your site’s metadata. For example in your _quarto.yml configuration file:\nwebsite:\n  site-url: \"https://www.quarto.org\"\nand in your document front matter:\ntitle: \"My Document\"\ntwitter-card:\n  image: \"/docs/websites/images/tools.png\"\nAny image that is being rendered in the page may also be used as a preview image by giving it the class name preview-image. Quarto will select the first image it finds with this class. For example, the following image will be used as the preview image when included on a page:\n![](images/tools.png){.preview-image}\nIf you label an image with this class, you must also provide a site-url in your site’s metadata.\nIf none of the above ways of specifying a preview image have been used, Quarto will attempt to find a preview image by looking for an image included in the rendered document with one of the following names: preview.png, feature.png, cover.png, or thumbail.png."
  },
  {
    "objectID": "docs/websites/website-tools.html#google-analytics",
    "href": "docs/websites/website-tools.html#google-analytics",
    "title": "Website Tools",
    "section": "Google Analytics",
    "text": "Google Analytics\nYou can add Google Analytics to your website by adding adding a google-analytics key to your _quarto.yml file. In its simplest form, you can just pass your Google Analytics tracking Id (e.g. UA-xxxxxxx) or Google Tag measurement Id (e.g. G-xxxxxxx) like:\nwebsite:\n  google-analytics: \"UA-XXXXXXXX\"\nQuarto will use the key itself to determine whether to embed Google Analytics (analytics.js) or Google Tags (gtag) as appropriate.\nIn addition to this basic configuration, you can exercise more fine grained control of your site analytics using the following keys.\n\n\n\nKey\nDescription\n\n\n\n\ntracking-id\nThe Google tracking Id or measurement Id of this website.\n\n\nstorage\ncookies - Use cookies to store unique user and session identification (default).\nnone - Do not use cookies to store unique user and session identification.\nFor more about choosing storage options see Storage.\n\n\nanonymize-ip\nAnonymize the user ip address. For more about this feature, see IP Anonymization (or IP masking) in Google Analytics.\n\n\nversion\nThe version number of Google Analytics to use. Currently supports either 3 (for analytics.js) or 4 (for gtag). This is automatically detected based upon the tracking-id, but you may specify it.\n\n\n\n\nStorage\nGoogle Analytics uses cookies to distinguish unique users and sessions. If you choose to use cookies to store this user data, you should consider whether you need to enable Cookie Consent in order to permit the viewer to control any tracking that you enable.\nIf you choose none for storage, this will have the following effects:\n\nFor Google Analytics v3 (analytics.js)\nNo tracking cookies will be used. Individual page hits will be properly tracked, enabling you to see which pages are viewed and how often they are viewed. Unique user and session tracking will not report data correctly since the tracking cookies they rely upon are not set.\nFor Google Tags (gtag)\nUser consent for ad and analytics tracking cookies will be withheld. In this mode, Google Analytics will still collect user data without the user identification, but that data is currently not displayed in the Google Analytics reports."
  },
  {
    "objectID": "docs/websites/website-tools.html#cookie-consent",
    "href": "docs/websites/website-tools.html#cookie-consent",
    "title": "Website Tools",
    "section": "Cookie Consent",
    "text": "Cookie Consent\nQuarto includes the ability to request cookie consent before enabling scripts that set cookies, using Cookie Consent.\nThe user’s cookie preferences will automatically control Google Analytics (if enabled) and can be used to control custom scripts you add as well (see Custom Scripts and Cookie Consent. You can enable the default request for cookie consent using the following:\nwebsite:\n  cookie-consent: true\nYou can further customize the appearance and behavior of the consent using the following:\n\n\n\n\n\n\n\nKey\nDescription\n\n\n\n\ntype\nThe type of consent that should be requested, using one of these two values:\nimplied - (default) This will notify the user that the site uses cookies and permit them to change preferences, but not block cookies unless the user changes their preferences.\nexpress - This will block cookies until the user expressly agrees to allow them (or continue blocking them if the user doesn’t agree).\n\n\nstyle\nThe style of the consent banner that is displayed:\nsimple - (default) A simple dialog in the lower right corner of the website.\nheadline - A full width banner across the top of the website.\ninterstitial - An semi-transparent overlay of the entire website.\nstandalone - An opaque overlay of the entire website.\n\n\npalette\nWhether to use a dark or light appearance for the consent banner:\nlight - A light colored banner.\ndark - A dark colored banner.\n\n\npolicy-url\nThe url to the website’s cookie or privacy policy.\n\n\nprefs-text\nThe text to display for the cookie preferences link in the website footer.\n\n\n\nA custom example might look more like:\nwebsite:\n  cookie-consent:\n    type: express\n    style: headline\n    palette: dark\n  google-analytics:\n    tracking-id: \"G-XXXXXXX\"\n    anonymize-ip: true\n\nCookie Preferences\nIn addition to requesting consent when a new user visits your website, Cookie Consent will also add a cookie preferences link to the footer of the website. You can control the text of this link using prefs-text. If you would rather position this link yourself, just add a link with the id #open_preferences_center to the website and Cookie Consent will not add the preferences link to the footer. For example:\nChange [cookie preferences](#open_preferences_center)\n\n\nCustom Scripts and Cookie Consent\nCookie Consent works by preventing the execution of scripts unless the user has expressed their consent. To control your custom scripts using Cookie Consent:\n\nInsert script tags as type='text/plain' (when the user consents, the type will be switched to text/javascript and the script will be executed).\n\n\n\nAdd a cookie-consent attribute to your script tag, setting it one of the following 4 levels:\n\n\n\nLevel\nDescription\n\n\n\n\nstrictly-necessary\nStrictly scripts are loaded automatically and cannot be disabled by the user.\n\n\nfunctionality\nScripts that are required for basic functionality of the website, for example, remembering a user language preference.\n\n\ntracking\nScripts that are used to track users, for example Google Analytics.\n\n\ntargeting\nScripts that are used for the purposed of advertising to ad targeting, for example Google AdSense remarketing.\n\n\n\n\nAn example script that is used for user tracking would look like:\n<script type=\"text/plain\" cookie-consent=\"tracking\">\n\n// My tracking JS code here\n\n</script>"
  },
  {
    "objectID": "docs/websites/website-tools.html#site-resources",
    "href": "docs/websites/website-tools.html#site-resources",
    "title": "Website Tools",
    "section": "Site Resources",
    "text": "Site Resources\nBesides input and configuration files, your site likely also includes a variety of resources (e.g. images) that you will want to publish along with your site. Quarto will automatically detect any files that you reference within your site and copy them to the output directory (e.g. _site).\nIf this auto-detection fails for any reason, or if you want to publish a file not explicitly linked to from within your site, you can add a resources entry to your configuration. For example, here we specify that we want to include all Excel spreadsheets within the project directory as part of the website:\nproject:\n  type: website\n  resources: \n    - \"*.xlsx\"\nNote that the *.xslx value is quoted: this is because YAML requires that strings that begin with non-alphanumeric characters be quoted.\nYou can also add a resources metadata value to individual files. For example:\ntitle: \"My Page\"\nresources:\n  - \"sheet.xlsx\"\nImages are the most commonly used type of resource file. If you have global images (e.g. a logo) that you want to reference from various pages within your site, you can use a site-absolute path to refer to the images, and it will be automatically converted to a relative path during publishing. For example:\n![](/images/logo.png)"
  },
  {
    "objectID": "docs/websites/website-tools.html#dark-mode",
    "href": "docs/websites/website-tools.html#dark-mode",
    "title": "Website Tools",
    "section": "Dark Mode",
    "text": "Dark Mode\nQuarto websites can support both a light and dark mode. For example, you may use the flatly and darkly themes (which are designed to be used in tandem as dark and light appearances) as:\ntheme:\n  light: flatly\n  dark: darkly\nFor more about selecting the dark and light themes for your website, see Dark Mode.\n\n\n\n\n\n\n\n\nLight\nDark\n\n\n\n\n\n\n\n\n\n\nWhen enabled, a toggle that allows your reader to control the appearance of the website will appear. The toggle will automatically be added to the website navigation as follows:\n\nIf a navbar has been specified, the toggle will appear in the top right corner of the nav bar.\nIf there is no navbar present, but a sidebar has been specified, the toggle will appear in the same location that the sidebar tools appears (adjacent to the title or logo in the sidebar).\nIf there is no navbar or sidebar present, the toggle will appear in the top right corner of the page."
  },
  {
    "objectID": "docs/websites/index.html",
    "href": "docs/websites/index.html",
    "title": "Creating a Website",
    "section": "",
    "text": "Quarto Websites are a convenient way to publish groups of documents. Documents published as part of a website share navigational elements, rendering options, and visual style.\nWebsite navigation can be provided through a global navbar, a sidebar with links, or a combination of both for sites that have multiple levels of content. You can also enable full text search for websites.\nThis site is an example of a Quarto Website (you can see the source code for it here: https://github.com/quarto-dev/quarto-web)."
  },
  {
    "objectID": "docs/websites/index.html#getting-started",
    "href": "docs/websites/index.html#getting-started",
    "title": "Creating a Website",
    "section": "Getting Started",
    "text": "Getting Started\nTo create a new website project, use the Quarto create-project command:\nquarto create-project mysite --type website\nThis will create the scaffolding for a simple website in the mysite sub-directory. Here is what the _quarto.yml config file will look like for the site:\nproject:\n  type: website\n\nwebsite:\n  title: \"mysite\"\n  navbar:\n    background: primary\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nThis will create the scaffolding for a simple website in the mysite sub-directory. To build and view the site use the preview command:\nquarto preview mysite\nThis will build the website and run a local web server to view it. To render (but not preview) the website into the _site directory:\nquarto render mysite\nBy default, all valid Quarto input files in the project directory will be included in the website (save for ones with a file or directory prefix of . or _).\nSee the Project Basics article to learn more about working with projects, including specifying an explicit list of files to render, as well as adding custom pre and post render scripts to your project.\n\nVS Code\nIf you are using VS Code you can open a new workspace with your website project using the code command from within VS Code:\ncode mysite\n\n\nRStudio\nIf you are using RStudio you can also create a Quarto website via the New Project command:\n\nRender documents within the site using the Render command, render the entire site using the Render Site command on the Build tab."
  },
  {
    "objectID": "docs/websites/index.html#workflow",
    "href": "docs/websites/index.html#workflow",
    "title": "Creating a Website",
    "section": "Workflow",
    "text": "Workflow\nQuarto includes a live-reloading development server that you will likely find convenient to use while working on websites. Start the server with:\nquarto preview\nThe development server will automatically re-render input files whenever they change.\nChanges to configuration files (e.g. _quarto.yml) as well as site resources (e.g. theme or CSS files) will also cause an automatic refresh.\nIf you are using RStudio a site development server will be run automatically when you render a document or the site. You can also start the development server directly using the Serve Website command on the Build tab.\nYou can customize the behavior of the preview server (port, whether it opens a browser, etc.) using command line options or the _quarto.yml config file. See quarto preview help or the project file reference for additional details.\n\n\n\n\n\n\nImportant\n\n\n\nAs you preview your site, pages will be rendered and updated. However, if you make changes to global options (e.g. _quarto.yml or included files) you need to fully re-render your site to have all of the changes reflected. Consequently, you should always fully quarto render your site before deploying it, even if you have already previewed changes to some pages with the preview server."
  },
  {
    "objectID": "docs/websites/index.html#linking",
    "href": "docs/websites/index.html#linking",
    "title": "Creating a Website",
    "section": "Linking",
    "text": "Linking\nWhen creating links between pages in your site, you can provide the source file as the link target (rather than the .html file). You can also add hash identifiers (#) to the source file if you want to link to a particular section in the document. For example:\n[about](about.qmd)\n[about](about.qmd#section)\nOne benefit of using this style of link as opposed to targeting .html files directly is that if you at some point convert your site to a book the file-based links will automatically resolve to section links for formats that produce a single file (e.g. PDF or MS Word)."
  },
  {
    "objectID": "docs/websites/index.html#learning-more",
    "href": "docs/websites/index.html#learning-more",
    "title": "Creating a Website",
    "section": "Learning More",
    "text": "Learning More\nOnce you’ve got a basic website up and running check out these articles for various ways to enhance your site:\nWebsite Navigation describes various ways to add navigation to a website, including top-level navigation bars, sidebars, or hybrid designs that uses both. This article also covers adding full-text search as well as a site-wide footer.\nWebsite Tools covers adding social metadata (e.g. for Twitter Cards) and Google Analytics to your site, as well as enabling users to toggle between dark and light color schemes.\nWebsite Options provides a comprehensive reference to all of the available website options.\nCode Execution provides tips for optimizing the rendering of sites with large numbers of documents or expensive computations.\nPublishing Websites enumerates the various options for publishing websites including GitHub Pages, Netlify, Google Firebase, and RStudio Connect."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html",
    "href": "docs/websites/website-listings-custom.html",
    "title": "Custom Listings",
    "section": "",
    "text": "In addition to the 3 built in types of listings, you can also build a completely custom display of the items. This custom display can generate any HTML and can optionally still take advantage of the sorting, filtering, and pagination provided by listings."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#listing-templates",
    "href": "docs/websites/website-listings-custom.html#listing-templates",
    "title": "Custom Listings",
    "section": "Listing Templates",
    "text": "Listing Templates\nTo build a custom listing display, you create an EJS template that will be used to generate the HTML for a set of items that are passed to the template. EJS templates allow to generate HTML using plain javascript, making it easy to loop through items and output their values in your custom HTML.\nTo use a custom template, pass it in the template option for a listing:\nlisting:\n  template: gallery.ejs\nWhen a listing with a custom template is rendered, the listing contents will be read and processed into a set of items that are passed to the template for rendering. For example, in this case, all the documents in the posts directory will be read into items and passed to the gallery.ejs template.\nlisting:\n  contents: posts\n  template: gallery.ejs\nA simple template for outputing a list of documents might look like:\n```{=html}\n<ul>\n<% for (const item of items) { %>\n  <li><a href=\"<%- item.path %>\"><%= item.title %></a></li>\n<% } %>\n</ul>\n```\nwhich produces simple HTML output like:\n\nWhen rendered, the above template will receive an array of listing items called items. When the contents of a listing are loaded from a list a documents, each of those items will be populated with the fields described in Listing Item Fields. In addition, any other fields included in a documents metadata will be passed as a property of the item, making it possible to use custom metadata in your documents and the listing display."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#metadata-listings",
    "href": "docs/websites/website-listings-custom.html#metadata-listings",
    "title": "Custom Listings",
    "section": "Metadata Listings",
    "text": "Metadata Listings\nThe contents option for a listing most commonly contains a list of paths or globs, but it can also contain metadata. When contents are metadata, the metadata will be read into items and passed to the template. For example:\nlisting:\n  template: custom.ejs\n  contents:\n    - name: First Item\n      href: https://www.quarto.org\n      custom-field: A custom value\n    - name: Second Item\n      href: https://www.rstudio.org\n      custom-field: A second custom value\ncould be rendered using:\n```{=html}\n<ul>\n<% for (const item of items) { %>\n  <li>\n    <a href=\"<%- item.href %>\"><%= item.name %></a><br/>\n    <%= item['custom-field'] %>\n  </li>\n<% } %>\n</ul>\n```\nwhich produces a simple HTML display like:"
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#metadata-file-listings",
    "href": "docs/websites/website-listings-custom.html#metadata-file-listings",
    "title": "Custom Listings",
    "section": "Metadata File Listings",
    "text": "Metadata File Listings\nThe contents option for a listing can also point to one or more yaml files (which contain metadata). In that case, the metadata will be read from the files into items and passed to the template. For example:\nlisting:\n  template: custom.ejs\n  contents:\n    - items.yml\nwhere the contents of items.yml is:\n- name: First Item\n  href: https://www.quarto.org\n  custom-field: A custom value\n- name: Second Item\n  href: https://www.rstudio.org\n  custom-field: A second custom value\n\nTemplate Examples\nPortions of this website are built using custom listings. The best place to start is with our gallery, which is a listing built using a custom template and a metadata file. You can view the source code used to create the gallery page in our Github repository.\n\n\n\n\n\n\n\nFile\nDescription\n\n\n\n\ngallery.yml\nThe metadata that controls what items are displayed in the gallery listing.\n\n\ngallery.ejs\nThe template used to display the items on the page.\n\n\nindex.qmd\nThe Quarto document that configures and positions the listing in the #gallery div."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#sorting-filtering-and-pagination",
    "href": "docs/websites/website-listings-custom.html#sorting-filtering-and-pagination",
    "title": "Custom Listings",
    "section": "Sorting, Filtering, and Pagination",
    "text": "Sorting, Filtering, and Pagination\nBy default, sorting, filtering, and pagination are disabled for custom listings templates, but with some simple changes to your template and listing options, you can add this capability to your custom listing. To do this, you need to include the following three things in your custom template:\n\nInclude a list class on the HTML tag that contains the list of items.\nFor each item, include <%= metadataAttrs(item) %> in the HTML tag that contains the item. This will allow Quarto write custom attributes that are used for sorting and filtering.\nWithin each item, include a class that identifies the tag whose text represents the contents of an item’s field. The class must be the name of the field prefixed with listing-, for example the tag whose inner text is the item.name should include a class listing-name.\n\nFor example, we can modify the above custom.ejs template as follows:\n```{=html}\n<ul class=\"list\">\n<% for (const item of items) { %>\n  <li <%= metadataAttrs(item) %>>\n    <a href=\"<%- item.href %>\" class=\"listing-name\"><%= item.name %></a><br/>\n    <span class=\"listing-custom-field\"><%= item['custom-field'] %><span>\n  </li>\n<% } %>\n</ul>\n```\nOnce you have included these items in your template, can you then enable the options in your listing:\nlisting:\n  sort-ui: true\n  filter-ui: true\n  page-size: 10\nThe UI elements will now appear on the page and should interact properly with your custom listing.\n\nField Display Names\nYou may want to provide a custom display name for your field to provide a better name than the field name. For example, the field name would appear in the sort UI. You can use field-display-names to create mapping from a field to a display name. For example:\nlisting:\n  template: custom.ejs\n  contents:\n    - items.yml\n  sort-ui: true\n  filter-ui: true\n  page-size: 10\n  field-display-names:\n    name: \"Name\"\n    custom-field: \"Custom\"\n\n\nDate Sorting and Formatting\nTo properly format and sort date values, you can specify type information for fields in your items. If you specify a field is a date, it will automatically be formatted using the specified date formatting (either default or specified using date-format) and will support date sorting in ascending or descending order. If you specific a field as a number, it will support ascending and descending numeric sorting.\nYou and specify field types as follows\nlisting:\n  template: custom.ejs\n  contents:\n    - items.yml\n  field-types:\n    custom-date: date\n    custom-number: number\n\n\nRequired Fields\nSince listings are generated using fields that are specified in other documents or via metadata, it can be helpful to ensure that required fields are present. You can note required fields as following:\nlisting:\n  template: custom.ejs\n  contents:\n    - items.yml\n  field-required: [name, custom-field]\nIf the listing page is rendered an any of contents are missing a value for either of the required fields, an error will be thrown noting the field that is required and the file or metadata that has omitted it."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Quarto",
    "section": "",
    "text": "The overarching goal of Quarto is to make the process of creating and collaborating on scientific and technical documents dramatically better. We hope to do this in several dimensions:\n\nCreate a writing and publishing environment with great integrated tools for technical content. We want to make authoring with embedded code, equations, figures, complex diagrams, interactive widgets, citations, cross references, and the myriad other special requirements of scientific discourse straightforward and productive for everyone.\nHelp authors take full advantage of the web as a connected, interactive platform for communications, while still providing the ability to create excellent printed output from the same document source. Researchers shouldn’t need to choose between LaTeX, MS Word, and HTML but rather be able to author documents that target all of them at the same time.\nMake reproducible research and publications the norm rather than the exception. Reproducibility requires that the code and data required to create a manuscript are an integrated part of it. However, this isn’t often straightforward in practice—Quarto aims to make it easier to adopt a reproducible workflow than not.\n\nQuarto is open source software licensed under the GNU GPL v2. We believe that it’s better for everyone if the tools used for research and science are free and open. Reproducibility, widespread sharing of knowledge and techniques, and the leveling of the playing field by eliminating cost barriers are but a few of the shared benefits of free software in science."
  },
  {
    "objectID": "about.html#project",
    "href": "about.html#project",
    "title": "About Quarto",
    "section": "Project",
    "text": "Project\nAt the core of Quarto is Pandoc, a powerful and flexible document processing tool. Quarto adds a number of facilities to Pandoc aimed at scientific and technical publishing, including:\n\nEmbedding code and output from Python, R, and JavaScript via integration with Jupyter, Knitr, and Observable.\nA variety of extensions to Pandoc markdown useful for technical writing including cross-references, sub-figures, layout panels, hoverable citations and footnotes, callouts, and more.\nA project system for rendering groups of documents at once, sharing options across documents, and producing aggregate output like websites and books.\n\nDevelopment of Quarto is sponsored by RStudio, PBC, where we previously created a similar system (R Markdown) that shared the same goals, but was targeted principally at users of the R language. The same core team works on both Quarto and R Markdown:\n\nJ.J. Allaire (@jjallaire)\nChristophe Dervieux (@cderv)\nCarlos Scheidegger (@cscheid)\nCharles Teague (@dragonstyle)\nYihui Xie (@yihui)\n\nWith Quarto, we are hoping to bring these tools to a much wider audience.\nQuarto is a registered trademark of RStudio. Please see our trademark policy for guidelines on usage of the Quarto trademark."
  },
  {
    "objectID": "about.html#contribute",
    "href": "about.html#contribute",
    "title": "About Quarto",
    "section": "Contribute",
    "text": "Contribute\nYou can contribute to Quarto in many ways:\n\nBy opening issues to provide feedback and share ideas.\nBy submitting Pull Request (PR) to fix opened issues\nBy submitting Pull Request (PR) to suggest new features (it is considered good practice to open an issue for discussion before working on a pull request for a new feature).\n\nPlease be mindful of our code of conduct as you interact with other community members.\n\nPull Requests\nPull requests are very welcome! Here’s how to contribute via PR:\n\nFork the repository, clone it locally, and make your changes in a new branch specific to the PR. For example:\n# clone your fork\n$ git clone https://github.com/<username>/quarto-cli\n\n# configure for your platform (./configure-macos.sh, ./configure-linux.sh, or ./configure-windows.cmd)\n$ cd quarto-cli\n$ ./configure-macos.sh\n\n# checkout a new branch\n$ git checkout -b feature/newthing\nFor significant changes (e.g more than small bug fixes), ensure that you have signed the individual or corporate contributor agreement as appropriate. You can send the signed copy to jj@rstudio.com.\nSubmit the pull request. It is ok to submit as draft in your are still working on it but would like some feedback from us. It always good to share in the open that you are working on it.\n\nWe’ll try to be as responsive as possible in reviewing and accepting pull requests."
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Open Source License",
    "section": "",
    "text": "The Quarto source code is available at https://github.com/quarto-dev/\nQuarto is a registered trademark of RStudio. Please see our trademark policy for guidelines on usage of the Quarto trademark.\nQuarto also makes use of several other open-source projects, the distribution of which is subject to their respective licenses. Major components and their licenses include:\n\n\n\nProject\nLicense\n\n\n\n\nPandoc\nGNU GPL v2\n\n\nBootstrap 5.0\nMIT\n\n\nBootswatch 5.0\nMIT\n\n\nDeno\nMIT\n\n\nesbuild\nMIT\n\n\nDart Sass\nMIT\n\n\nObservable Runtime\nISC"
  }
]