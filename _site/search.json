[
  {
    "objectID": "trademark.html",
    "href": "trademark.html",
    "title": "Trademark Policy",
    "section": "",
    "text": "This policy is adapted directly from the WordPress Foundation’s trademark policy for the WordPress and WordCamp names and logos. We admire the job that WordPress has done building a thriving open source community while at the same time making possible a wide variety of WordPress related businesses. We hope that this policy will help us do the same for Quarto."
  },
  {
    "objectID": "trademark.html#goals",
    "href": "trademark.html#goals",
    "title": "Trademark Policy",
    "section": "Goals",
    "text": "Goals\nRStudio, PBC owns and oversees the trademark for the Quarto name and logo. We have developed this trademark usage policy with the following goals in mind:\n\nWe’d like to make it easy for anyone to use the Quarto name or logo for community-oriented efforts that help spread and improve Quarto.\nWe’d like to make it clear how Quarto-related businesses and projects can (and cannot) use the Quarto name and logo.\nWe’d like to make it hard for anyone to use the Quarto name and logo to unfairly profit from, trick or confuse people who are looking for official Quarto resources.\n\nPlease note that it is not the goal of this policy to limit open source or commercial activity around Quarto. We actively encourage Quarto-based open source projects and businesses—our goal with this policy is to prevent confusion about the source of Quarto related software and services."
  },
  {
    "objectID": "trademark.html#permission",
    "href": "trademark.html#permission",
    "title": "Trademark Policy",
    "section": "Permission",
    "text": "Permission\nPermission from RStudio is required to use the Quarto name or logo as part of any project, product, service, domain name, or company name.\nWe will grant permission to use the Quarto name and logo for projects that meet the following criteria:\n\nThe primary purpose of your project is to promote the spread and improvement of the Quarto software.\nYour project is non-commercial in nature (it can make money to cover its costs or contribute to non-profit entities, but it cannot be run as a for-profit project or business).\nYour project neither promotes nor is associated with entities that currently fail to comply with the GPL license under which Quarto is distributed.\n\nIf your project meets these criteria, you will be permitted to use the Quarto name and logo to promote your project in any way you see fit with these exceptions: (1) Please do not use Quarto as part of a domain name; and (2) We do not allow the use of the trademark in advertising, including AdSense/AdWords.\nAll other Quarto-related businesses or projects can use the Quarto name and logo to refer to and explain their services, but they cannot use them as part of a product, project, service, domain name, or company name and they cannot use them in any way that suggests an affiliation with or endorsement by the Quarto open source project.\nThe abbreviation “QMD” is not covered by the Quarto trademark and you are free to use it in any way you see fit."
  },
  {
    "objectID": "trademark.html#examples",
    "href": "trademark.html#examples",
    "title": "Trademark Policy",
    "section": "Examples",
    "text": "Examples\nA consulting company can describe its business as “123 Publishing Services, offering Quarto consulting for publishers,” but cannot call its business “The Quarto Consulting Company.” Similarly, a business related to Quarto extensions can describe itself as “XYZ Extensions, the world’s best Quarto extensions,” but cannot call itself “The Quarto Extension Portal.”\nSimilarly, it’s OK to use the Quarto logo as part of a page that describes your products or services, but it is not OK to use it as part of your company or product logo or branding itself. Under no circumstances is it permitted to use Quarto as part of a domain name or top-level domain name.\nWhen in doubt about your use of the Quarto name or logo, please contact RStudio at permissions@rstudio.com for clarification."
  },
  {
    "objectID": "docs/tools/vscode.html",
    "href": "docs/tools/vscode.html",
    "title": "VS Code",
    "section": "",
    "text": "Quarto can render Jupyter notebooks represented as plain text (.qmd) or as a normal notebook file (.ipynb). The Quarto VS Code Extension includes many tools that enhance working these documents, including:\n\nIntegrated render and preview for Quarto documents.\nSyntax highlighting for markdown and embedded languages\nCompletion and diagnostics for YAML options\nCompletion for embedded languages (e.g. Python, R, Julia, etc.)\nCommands and key-bindings for running cells and selected lines.\nLive preview for LaTeX math as well as Mermaid and Graphviz diagrams\n\nThe Quarto extension integrates directly with the Jupyter, R, and Julia extensions. For example, here the Quarto extension runs a Python cell and shows contextual help for Python functions:\n\n\n\nYou can install the Quarto extension from the VS Code Extension Marketplace, the Open VSX Registry or directly from a VISX extension file."
  },
  {
    "objectID": "docs/tools/vscode.html#render-and-preview",
    "href": "docs/tools/vscode.html#render-and-preview",
    "title": "VS Code",
    "section": "Render and Preview",
    "text": "Render and Preview\nThe Quarto VS Code extension includes commands and keyboard shortcuts for rendering Quarto documents (both standalone and within websites or books). After rendering, quarto preview is used behind the scenes to provide a preview pane within VS Code alongside your document:\n\nTo render and preview, execute the Quarto: Render command. You can alternatively use the Ctrl+Shift+K keyboard shortcut, or the Render button at the top right of the editor:\n\n\n\n\n\n\n\nNote that on the Mac you should use Cmd rather than Ctrl as the prefix for all Quarto keyboard shortcuts.\n\n\n\nAdditionally, there are commands available to render specific formats. Here is a complete list of the supported render commands:\n\nQuarto: Render\nQuarto: Render HTML\nQuarto: Render PDF\nQuarto: Render Word\n\nThe Quarto: Render command renders the default format of the currently active document. The other commands render specific formats (regardless of the document’s default format). The Ctrl+Shift+K keyboard shortcut will re-execute the most recently executed render command.\n\n\n\n\n\n\nEmbedded preview is currently supported for HTML and PDF based formats (including revealjs and beamer slideshows). However, for Word and other formats you need to use an appropriate external program to preview the output.\n\n\n\n\nExternal Preview\nIf you prefer to use an external browser for preview (or have no preview triggered at all by rendering) you can use the Preview Type option to specify an alternate behavior:"
  },
  {
    "objectID": "docs/tools/vscode.html#code-cells",
    "href": "docs/tools/vscode.html#code-cells",
    "title": "VS Code",
    "section": "Code Cells",
    "text": "Code Cells\nThere are a variety of tools that make it easier to edit and execute code cells. Editing tools include syntax highlighting, code folding, code completion, and signature tips:\n\nFor Python, R, and Julia cells, commands are available to execute the current cell, previous cells, or the currently selected line(s). Cell output is shown side by side in the Jupyter interactive console:\n\nHere are all of the commands and keyboard shortcuts available for executing cells:\n\n\n\nQuarto Command\nKeyboard Shortcut\n\n\n\n\nRun Current Cell\n⇧⌘ Enter\n\n\nRun Selected Line(s)\n⌘ Enter\n\n\nRun Next Cell\n⌥⌘ N\n\n\nRun Previous Cell\n⌥⌘ P\n\n\nRun All Cells\n⌥⌘ R\n\n\nRun Cells Above\n⇧⌥⌘ P\n\n\nRun Cells Below\n⇧⌥⌘ N\n\n\n\nEnhanced features for embedded languages (e.g. completion, code execution) can be enabled by installing the most recent version(s) of these extensions:\n\nPython Extension\nR Extension\nJulia Extension\n\nNote that you can quickly insert a new code cell using the Ctrl+Shift+I keyboard shortcut."
  },
  {
    "objectID": "docs/tools/vscode.html#contextual-assistance",
    "href": "docs/tools/vscode.html#contextual-assistance",
    "title": "VS Code",
    "section": "Contextual Assistance",
    "text": "Contextual Assistance\nExecute the Quarto: Show Assist Panel command to show a panel in the sidebar that shows contextual assistance depending on the current cursor location:\n\nHelp/documentation is shown when editing code\nA realtime preview of equations is shown when editing LaTeX math\nThumbnail previews are shown when your cursor is located on a markdown image.\n\nFor example, below help on the matplotlib plot() function is shown automatically when the cursor is located on the function:"
  },
  {
    "objectID": "docs/tools/vscode.html#live-preview",
    "href": "docs/tools/vscode.html#live-preview",
    "title": "VS Code",
    "section": "Live Preview",
    "text": "Live Preview\nWhile editing LaTeX math or Mermaid and Graphviz diagrams, click the Preview button above the code (or use the Ctrl+Shift+L keyboard shortcut) to open a live preview which will update automatically as you edit.\nHere we see a preview of the currently edited LaTeX equation displayed in the Quarto assist panel:\n\nHere we see a Graphviz diagram preview automatically updated as we edit:"
  },
  {
    "objectID": "docs/tools/vscode.html#yaml-intelligence",
    "href": "docs/tools/vscode.html#yaml-intelligence",
    "title": "VS Code",
    "section": "YAML Intelligence",
    "text": "YAML Intelligence\nYAML code completion is available for project files, YAML front matter, and executable cell options:\n\nIf you have incorrect YAML it will also be highlighted when documents are saved:\n\nNote that YAML intelligence features require version 0.9.44 or later of the Quarto CLI."
  },
  {
    "objectID": "docs/tools/vscode.html#code-snippets",
    "href": "docs/tools/vscode.html#code-snippets",
    "title": "VS Code",
    "section": "Code Snippets",
    "text": "Code Snippets\nCode snippets are templates that make it easier to enter repeating code patterns (e.g. code blocks, callouts, divs, etc.). Execute the Insert Snippet command within a Quarto document to insert a markdown snippet:"
  },
  {
    "objectID": "docs/tools/vscode.html#document-navigation",
    "href": "docs/tools/vscode.html#document-navigation",
    "title": "VS Code",
    "section": "Document Navigation",
    "text": "Document Navigation\nIf you have a large document use the outline view for quick navigation between sections:\n\nYou can also use the Go to Symbol in Editor command or keyboard shortcut Ctrl+Shift+O for type-ahead navigation of the current document’s outline.\nUse the Go to File command Ctrl+P to navigate to other files and the Go to Symbol in Workspace command Ctrl+T for type-ahead navigation to all headings in the workspace:"
  },
  {
    "objectID": "docs/tools/vscode.html#notebook-editor",
    "href": "docs/tools/vscode.html#notebook-editor",
    "title": "VS Code",
    "section": "Notebook Editor",
    "text": "Notebook Editor\nIn addition to editing Quarto document as plain-text .qmd files, you can also use the VS Code Notebook Editor to author .ipynb notebooks that are rendered with Quarto. Next we’ll review the basics of editing .ipynb notebooks for use with Quarto.\n\nYAML Front Matter\nThe first cell of your notebook should be a Raw cell that contains the document title, author, and any other options you need to specify. Note that you can switch the type of a call to Raw using the cell type menu at the bottom right of the cell:\n\nIn this example we specify that we want code to appear collapsed by default. There are YAML options to control many other aspects of document rendering. See the documentation on Authoring and Output Formats for additional details.\n\n\nMarkdown Cells\nHere’s the underlying code for the markdown cell:\n\nNote that a Quarto cross-reference (@fig-polar) is included in the markdown. Any valid Pandoc markdown syntax can be included in markdown cells.\n\n\nOutput Options\nQuarto uses leading comments with a special prefix (#|) to denote cell options. Here we specify the label and fig-cap options so that the plot generated from the cell can be cross-referenced.\n\nNote that options must appear at the very beginning of the cell. As with document front-matter, option names/values use YAML syntax.\nThere are many output options available, including options to optionally hide code, warnings, and/or output. See the documentation on Output Outputs for additional details.\n\n\nCell Execution\nNote that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render notebook.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Notebook\"\nexecute: \n  enabled: true\n---\nThere are many other execution options available (e.g. to control caching, optimizing kernel start-up time, etc.). Learn more about these options in Execution Options.\n\n\nConverting Notebooks\nYou can convert between .ipynb and .qmd representations of a notebook using the quarto convert command. For example:\nquarto convert basics-jupyter.ipynb\nquarto convert basics-jupyter.qmd\nSee quarto convert help for additional details on converting notebooks."
  },
  {
    "objectID": "docs/tools/text-editors.html",
    "href": "docs/tools/text-editors.html",
    "title": "Text Editors",
    "section": "",
    "text": "If you are editing plain markdown documents (with no embedded computations) you may want to use your favorite text editor (Vim, Emacs, Sublime, etc.) to author Quarto documents. This articles provides some guidance on the optimal workflow when using text editors with Quarto.\nNote that if you are using either the Jupyter or Knitr computational engine you will likely be better off using JupyterLab or VS Code (for .ipynb notebooks) or RStudio (for .qmd documents) as these environments provide code-completion, incremental cell execution, and other useful tools for working with executable code."
  },
  {
    "objectID": "docs/tools/text-editors.html#workflow",
    "href": "docs/tools/text-editors.html#workflow",
    "title": "Text Editors",
    "section": "Workflow",
    "text": "Workflow\nThe ideal workflow for authoring Quarto markdown documents is to run the quarto preview command from within a terminal:\nquarto preview document.qmd\nThe document will be rendered and a web browser with a “live preview” opened. Position this browser so that you can see it as you edit and save the document:\n\nEvery time you save the preview will be automatically updated. You can use quarto preview for both HTML and PDF output.\nPreview uses the default format specified within the document—to use an alternate format pass the --to option to quarto preview. For example:\nquarto preview notebook.qmd --to pdf\n\n\n\n\n\n\nNote that if you are authoring a book or website you can also use quarto preview on the project directory, which will create a live preview for the entire project.\n\n\n\n\nRender without Preview\nYou can render a document (or group of documents) without previewing them using the quarto render command:\nquarto render document.qmd\nUse the --to argument to render to a specific format:\nquarto render document.qmd --to docx\n\n\nFile Extension\nMost text editors have a syntax highlighting mode that applies to markdown files (typically with the .md extension). You will likely want to configure your editor to also recognize the .qmd extension as having markdown content."
  },
  {
    "objectID": "docs/tools/jupyter-lab.html",
    "href": "docs/tools/jupyter-lab.html",
    "title": "JupyterLab",
    "section": "",
    "text": "Quarto can render Jupyter notebooks represented as plain text (.qmd) or as a normal notebook file (.ipynb). One benefit of using .ipynb is that you can use JupyterLab as your editor.\nHere is the “Hello, Quarto” example from the homepage inside JupyterLab:\n\nIf you look at the source code you’ll note that YAML options were provided both at the top of the document and within the code cell. We’ll describe working with YAML options in more detail below."
  },
  {
    "objectID": "docs/tools/jupyter-lab.html#workflow",
    "href": "docs/tools/jupyter-lab.html#workflow",
    "title": "JupyterLab",
    "section": "Workflow",
    "text": "Workflow\nThe ideal workflow for authoring Quarto notebooks in JupyterLab is to run the quarto preview command from within a terminal:\nquarto preview notebook.ipynb\nThe notebook will be rendered and a web browser with a “live preview” opened. Position this browser so that you can see it as you edit and save the notebook:\n\nEvery time you save within JupyterLab the preview will be automatically updated. You can use quarto preview for both HTML and PDF output.\nIn the screenshot above you’ll note that we ran quarto preview inside a JupyterLab terminal window—this is generally recommended so that you can see progress and error messages when renders occur.\nPreview uses the default format specified within the document—to use an alternate format pass the --to option to quarto preview. For example:\nquarto preview notebook.ipynb --to pdf\n\n\n\n\n\n\nNote that if you are authoring a book or website you can also use quarto preview on the project directory, which will create a live preview for the entire project.\n\n\n\n\nRunning JupyterLab\nTo run JupyterLab, invoke the jupyter module from within the shell where you are using Quarto:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m jupyter lab\n\n\nMac/Linux\npython3 -m jupyter lab\n\n\n\n\n\nRender without Preview\nYou can render a notebook (or group of notebooks) without previewing them using the quarto render command:\nquarto render notebook.ipynb\nUse the --to argument to render to a specific format:\nquarto render notebook.ipynb --to docx\nNote that the target file (in this case notebook.ipynb) should always be the very first command line argument."
  },
  {
    "objectID": "docs/tools/jupyter-lab.html#yaml-front-matter",
    "href": "docs/tools/jupyter-lab.html#yaml-front-matter",
    "title": "JupyterLab",
    "section": "YAML Front Matter",
    "text": "YAML Front Matter\nThe first cell of your notebook should be a Raw cell that contains the document title, author, and any other options you need to specify. Note that you can switch the type of a call to Raw using the notebook toolbar:\n\nIn this example we specify that we want code to appear collapsed by default. There are YAML options to control many other aspects of document rendering. See the documentation on Authoring and Output Formats for additional details."
  },
  {
    "objectID": "docs/tools/jupyter-lab.html#markdown-cells",
    "href": "docs/tools/jupyter-lab.html#markdown-cells",
    "title": "JupyterLab",
    "section": "Markdown Cells",
    "text": "Markdown Cells\nHere’s the underlying code for the markdown cell:\n\nNote that a Quarto cross-reference (@fig-polar) is included in the markdown. Any valid Pandoc markdown syntax can be included in markdown cells."
  },
  {
    "objectID": "docs/tools/jupyter-lab.html#output-options",
    "href": "docs/tools/jupyter-lab.html#output-options",
    "title": "JupyterLab",
    "section": "Output Options",
    "text": "Output Options\nQuarto uses leading comments with a special prefix (#|) to denote cell options. Here we specify the label and fig-cap options so that the plot generated from the cell can be cross-referenced.\n\nNote that options must appear at the very beginning of the cell. As with document front-matter, option names/values use YAML syntax.\nThere are many output options available, including options to optionally hide code, warnings, and/or output. See the documentation on Output Options for additional details."
  },
  {
    "objectID": "docs/tools/jupyter-lab.html#cell-execution",
    "href": "docs/tools/jupyter-lab.html#cell-execution",
    "title": "JupyterLab",
    "section": "Cell Execution",
    "text": "Cell Execution\nNote that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render notebook.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Notebook\"\nexecute: \n  enabled: true\n---\nThere are many other execution options available (e.g. to control caching, optimizing kernel start-up time, etc.). Learn more about these options in Execution Options."
  },
  {
    "objectID": "docs/tools/jupyter-lab.html#plain-text-editing",
    "href": "docs/tools/jupyter-lab.html#plain-text-editing",
    "title": "JupyterLab",
    "section": "Plain Text Editing",
    "text": "Plain Text Editing\nIt’s also possible to edit Jupyter notebooks in a plain-text markdown format. You might prefer this if there is more narrative than code in your notebook or if you want to use a file format that is more version control friendly.\nHere is the plain text markdown version of the notebook used in the previous examples:\n---\ntitle: \"Matplotlib Demo\"\nauthor: \"Norah Smith\"\ndate: \"5/22/2021\"\nformat: \n  html:\n    code-fold: true\njupyter: python3\n---\n\n## Polar Axis\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\nNote that we’ve added the jupyter: python3 option to the YAML front matter to indicate which Jupyter kernel to render with. You would render this document with:\nquarto render basics-jupyter.qmd\nMarkdown files with embedded code chunks should use the file extension .qmd.\n\n\n\n\n\n\nTip\n\n\n\nIf you are doing most of your work in .qmd files you should consider using RStudio, which includes full support for editing .qmd files that use Python and Jupyter (including code completion, cell-at-a-time execution, and side-by-side preview). See the article on using RStudio for additional details.\n\n\n\nConverting Notebooks\nYou can convert between .ipynb and .qmd representations of a notebook using the quarto convert command. For example:\nquarto convert basics-jupyter.ipynb # converts to qmd\nquarto convert basics-jupyter.qmd   # converts to ipynb\nSee quarto convert help for additional details on converting notebooks.\n\n\nJupytext\nYou can use Jupytext to maintain parallel synchronized versions of .qmd and .ipynb files. Learn more about Jupytext at https://jupytext.readthedocs.io/en/latest/."
  },
  {
    "objectID": "docs/tools/rstudio.html",
    "href": "docs/tools/rstudio.html",
    "title": "RStudio IDE",
    "section": "",
    "text": "The latest release of RStudio (v2022.02) includes support for editing and preview of Quarto documents.\nIf you are using Quarto within RStudio it is strongly recommended that you use this version (the documentation below assumes you are using this build).\nYou can download RStudio v2022.02 from https://rstudio.com/products/rstudio/download/.\n\n\n\n\n\n\nEnabling Quarto Features\n\n\n\n\n\n\n\n\n\nIf you have already installed the Quarto CLI then RStudio will detect this and enable Quarto features automatically. Alternatively, there is a version of Quarto built-in to RStudio that you can activate from R Markdown Preferences.\n\n\n\n\n\n\n\nUse the File : New File : Quarto Document… command to create new Quarto documents:\n\n\n\n\nUse the Render button to preview documents as you edit them:\n\nIf you prefer to automatically render whenever you save you can check the Render on Save option on the editor toolbar.\nThe preview will appear alongside the editor:\n\nThe preview will update whenever you re-render the document. Side-by-side preview works for both HTML and PDF output.\n\n\n\nIf you want to create a new project for a Quarto document or set of documents, use the File : New Project… command, specify New Directory, then choose Quarto Project:\n\nYou can use this UI to create both vanilla projects as well as websites and books. Options are also provided for creating a git repository and initializing an renv environment for the project."
  },
  {
    "objectID": "docs/tools/rstudio.html#knitr-engine",
    "href": "docs/tools/rstudio.html#knitr-engine",
    "title": "RStudio IDE",
    "section": "Knitr Engine",
    "text": "Knitr Engine\nQuarto is designed to be highly compatible with existing R Markdown documents. You should generally be able to use Quarto to render any existing Rmd document without changes.\nOne important difference between R Markdown documents and Quarto documents is that in Quarto chunk options are typically included in special comments at the top of code chunks rather than within the line that begins the chunk. For example:\n```{r}\n#| echo: false\n#| fig-cap: \"Air Quality\"\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\nQuarto uses this approach to both better accommodate longer options like fig-cap, fig-subcap, and fig-alt as well as to make it straightforward to edit chunk options within more structured editors that don’t have an easy way to edit chunk metadata (e.g. most traditional notebook UIs).\n\n\n\n\n\n\nNote\n\n\n\nNote that if you prefer it is still possible to include chunk options on the first line (e.g. ```{r, echo = FALSE}). That said, we recommend using the comment-based syntax to make documents more portable and consistent across execution engines.\n\n\nChunk options included this way use YAML syntax rather than R syntax for consistency with options provided in YAML front matter. You can still however use R code for option values by prefacing them with !expr. For example:\n#| fig-cap: !expr paste(\"Air\", \"Quality\")"
  },
  {
    "objectID": "docs/tools/rstudio.html#jupyter-engine",
    "href": "docs/tools/rstudio.html#jupyter-engine",
    "title": "RStudio IDE",
    "section": "Jupyter Engine",
    "text": "Jupyter Engine\nYou can also work with Quarto markdown documents that target the Jupyter engine within RStudio. These files will typically include a jupyter option in the YAML front matter indicating which kernel to use. For example:\n---\ntitle: \"Matplotlib Demo\"\nauthor: \"Norah Smith\"\njupyter: python3\n---\nIf you want to work within a virtual environment (venv), use the File : New Project… command, specify the Jupyter engine with a venv, and specify which packages you’d like to seed the venv with:\n\nRStudio will automatically activate this virtual environment whenever you open the project. You can install additional Python packages into the environment using the RStudio Terminal tab. For example:"
  },
  {
    "objectID": "docs/tools/rstudio.html#r-package",
    "href": "docs/tools/rstudio.html#r-package",
    "title": "RStudio IDE",
    "section": "R Package",
    "text": "R Package\nIf you are not using RStudio and/or you prefer to render from the R console, you can do so using the quarto R package. To install the R package:\ninstall.packages(\"quarto\")\nThen, to render a document:\nlibrary(quarto)\nquarto_render(\"document.qmd\")\nTo live preview (automatically render & refresh the browser on save) for a document you are working on, use the quarto_preview() function:\nlibrary(quarto)\nquarto_preview(\"document.qmd\")\nIf you are working on a website or book project, you can also use quarto_preview() on a project directory:\nlibrary(quarto)\nquarto_preview()"
  },
  {
    "objectID": "docs/faq/rmarkdown.html",
    "href": "docs/faq/rmarkdown.html",
    "title": "FAQ for R Markdown Users",
    "section": "",
    "text": "Quarto sounds similar to R Markdown. What is the difference and why create a new project?\nAt its core, Quarto works the same way as R Markdown: \n\nThe goal of Quarto is to make the process of creating and collaborating on scientific and technical documents dramatically better. Quarto combines the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system with “batteries included” that reflects everything we’ve learned from R Markdown over the past 10 years.\nThe number of languages and runtimes used for scientific discourse is very broad (and the Jupyter ecosystem in particular is extraordinarily popular). Quarto is at its core multi-language and multi-engine (supporting Knitr, Jupyter, and Observable today and potentially other engines tomorrow).\nOn the other hand, R Markdown is fundamentally tied to R which severely limits the number of practitioners it can benefit. Quarto is RStudio’s attempt to bring R Markdown to everyone! Unlike R Markdown, Quarto doesn’t have a dependency or requirement for R. Quarto was developed to be multilingual, beginning with R, Python, Javascript, and Julia, with the idea that it will work even for languages that don’t yet exist.\nWhile it is a “new” system, it should also be noted that it is highly compatible with existing content: you can render most R Markdown documents and Jupyter notebooks unmodified with Quarto. The concept is to make a major, long term investment in reproducible research, while keeping it compatible with existing formats and adaptable to the various environments users work in.\n\n\nIs R Markdown going away? Will my R Markdown documents continue to work?\nR Markdown is not going away! R Markdown is used extensively and continues to work well. It will continue to be actively supported. We’re not leaving R Markdown, we’re expanding our scope. Over the years there have been many feature requests, and rather than implementing them all in R Markdown, for certain features we may refer you to Quarto. Everything that is currently in R Markdown will continue to work and be supported. There are no plans for deprecation.\nRead more about this in Yihui Xie’s blog post With Quarto Coming, is R Markdown Going Away? No.\n\n\nShould I switch from R Markdown to Quarto?\nIf you like using R Markdown, there’s no need to switch! R Markdown will continue to be supported and work as it always has been. You’re welcome to try Quarto if you like, but there’s no need to switch. Some new features may only exist in Quarto, so if you want to use those, then that’s where you would give those a try.  \nWe should emphasize that switching is not imperative. While we don’t plan on major feature initiatives in R Markdown and related packages, we are going to continue to maintain them (smaller improvements and bug fixes) for a long time to come. Furthermore, since Rmd files can in most cases be rendered without modification by Quarto, you can continue using R Markdown and the switching cost will still be minimal whenever you decide to do it. \n\n\nI use X (bookdown, blogdown, etc.). What is the Quarto equivalent?\nHere are the Quarto equivalents for various packages and features of the R Markdown ecosystem (in some cases Quarto equivalents are not yet available but will be later this year):\n\n\n\n\nFeature\nR Markdown\nQuarto\n\n\n\n\nBasic Formats\n\nhtml_document\npdf_document\nword_document\n\n\nhtml\npdf\ndocx\n\n\n\nBeamer\n\nbeamer_presentation\n\n\nbeamer\n\n\n\nPowerPoint\n\npowerpoint_presentation\n\n\npptx\n\n\n\nHTML Slides\n\nxaringan\nioslides\nrevealjs\n\n\nrevealjs\n\n\n\nAdvanced Layout\n\ntufte\ndistill\n\n\nQuarto Article Layout\n\n\n\nCross References\n\nhtml_document2\npdf_document2\nword_document2\n\n\nQuarto Crossrefs\n\n\n\nWebsites & Blogs\n\nblogdown\ndistill\n\n\nQuarto Websites\nQuarto Blogs\n\n\n\nBooks\n\nbookdown\n\n\nQuarto Books\n\n\n\nInteractivity\nShiny Documents\nQuarto Interactive Documents\n\n\nPaged HTML\npagedown\nSummer 2022\n\n\nJournal Articles\nrticles\nSummer 2022\n\n\nDashboards\nflexdashboard\nFall 2022\n\n\nInteractive Tutorials\nlearnr\nNo equivalent planned\n\n\n\n\n\n\nCan you create custom formats for Quarto like you can for R Markdown?\nNot currently, but we expect that this capability will be available in version 1.0 of Quarto (which will be available before rstudio::conf in July).\n\n\nWhen would be a good time to start new projects in Quarto rather than R Markdown?\nOur current plan is to announce Quarto v1.0 at rstudio::conf (end of July). This will be a stable release that will be an excellent foundation for starting new projects with Quarto or migrating existing R Markdown projects (if you are so inclined).\n\n\nDoes the RStudio IDE support Quarto?\nYes! You need to use the latest release of RStudio (v2022.02), which includes support for editing and preview of Quarto documents.\nYou can download RStudio v2022.02 from https://rstudio.com/products/rstudio/download/.\n\n\nDoes RStudio Connect support Quarto?\nYes! You can publish Quarto content to RStudio Connect v2021.08.0 or later. Quarto has to be enabled as documented in the RStudio Connect admin guide. Connect’s user documentation refers to Quarto.org docs on how to publish from the RStudio IDE. To publish Python-based Quarto content, you can use the rsconnect-python CLI from various locations, including VSCode, JupyterLab or the terminal."
  },
  {
    "objectID": "docs/faq/index.html",
    "href": "docs/faq/index.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "What can I use Quarto for?\nQuarto® is an open-source scientific and technical publishing system built on Pandoc. You can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books and more. \n\n\n\nHow do I install Quarto?\nVisit the Quarto.org Get Started page, which provides installation instructions for Windows, Mac OS, and Linux. \n\n\n\nIs Quarto free to use?\nYes! Quarto is open source with a GPL-2 license. You can use or disseminate it any way that you would any GPL-2 licensed open source software. \n\n\nWhat output formats can Quarto create?\nThere are many output formats available in Quarto. This includes all of the built in Pandoc formats (e.g. HTML, PDF, MS Word, Revealjs, ePub, etc.) as well as various ways to publish multiple documents (websites, blogs, and books). Learn more at Quarto Formats. \n\n\nWhat editing tools can I use with Quarto?\nYou can use a wide variety of tools with Quarto. We have provided documentation for writing and editing Quarto documents in VSCode, JupyterLab, RStudio IDE, or any text editor. Visit the Get Started with Quarto page to install, and then choose your tool for a brief introductory guide.\n\n\nCan I use Jupyter notebooks with Quarto?\nYes! Quarto can render Jupyter notebooks and you can use Jupyter, JupyterLab or any other .ipynb notebook editor with Quarto. You can render existing .ipynb notebooks as-is with Quarto, but adding Quarto-specific output options or a YAML header can enhance the output. Visit theJupyterLab page for more information.\n\n\nWhat programming languages are supported in Quarto?\nThe principal languages supported by Quarto are Python, R, Julia, and Observable JavaScript. Integration with Jupyter also enables the use of many other languages. \nEach Quarto document can be optionally processed by a computational engine (the engine can be manually specified or automatically detected based on the code chunks within). Current engines include Knitr (which is also used by R Markdown and supports a variety of languages including R, Python, and Julia, etc.) and Jupyter (which supports many languages including Python, Julia, and R). See the documentation on Engine Binding for additional details.\n\n\nWhat human languages are supported in Quarto?\nYou can write your Quarto documentation in your human language of choice. The lang document option is used to identify the main language of the document using IETF language tags (following the BCP 47 standard), such as en or en-GB. \n\n\nHow can I share documents and have people comment on them?\nYou can publish Quarto content to various locations. See the user guides for publishing documents and publishing websites  for details on using GitHub Pages, Netlify, RStudio Connect, and other services. with Quarto. Once documents are published you can use  hypothes.is, Utterances, or Giscus for commenting. Learn more in the documentation on commenting.\n\n\nCan I do collaborative editing with Quarto?\nThere is not yet anything specific for collaborative editing in Quarto. You can collaborate on .qmd files in the same way you currently do for any text or code files. \nRStudio Workbench allows for Project Sharing for interactive editing and collaboration on the same document.\n\n\nWhere can I publish Quarto websites?\nThere are a wide variety of ways to publish Quarto websites. Website content is by default written to the _site sub-directory (you can customize this using the output-dir option). Publishing is simply a matter of copying the output directory to a web server or web hosting service.\nThe publishing documentation describes several convenient options for Quarto website deployment including RStudio Connect, Netlify, GitHub Pages, Firebase, Site44, and Amazon S3. We’ll mostly defer to the documentation provided by those various services, but will note any Quarto website specific configuration required.\n\n\nDoes RStudio Connect support Quarto?\nYes! You can publish Quarto content to RStudio Connect v2021.08.0 or later. Quarto has to be enabled as documented in the RStudio Connect admin guide. Connect’s user documentation refers to Quarto.org docs on how to publish from the RStudio IDE. To publish Python-based Quarto content, you can use the rsconnect-python CLI from various locations, including VSCode, JupyterLab or the terminal.\n\n\nWho are the developers of Quarto?\nDevelopment of Quarto is sponsored by RStudio, PBC. The same core team works on both Quarto and R Markdown:\n\nCarlos Scheidegger (@cscheid)\nCharles Teague (@dragonstyle)\nChristophe Dervieux (@cderv)\nJ.J. Allaire (@jjallaire)\nYihui Xie (@yihui)\n\nHere is the full contributors list. Quarto is open source and we welcome contributions in our github repository as well! https://github.com/quarto-dev/quarto-cli.\n\n\nWhy the name Quarto?\nWe wanted to use a name that had meaning in the history of publishing and landed on Quarto, which is the format of a book or pamphlet produced from full sheets printed with eight pages of text, four to a side, then folded twice to produce four leaves. The earliest known European printed book is a Quarto, the Sibyllenbuch, believed to have been printed by Johannes Gutenberg in 1452–53.\n\n\nWhere can I report bugs or request features?\nThanks for finding something and sharing with us! You can file an issue in the Quarto repository https://github.com/quarto-dev/quarto-cli/issues.\n\n\nWhere can I ask questions and discuss using Quarto with others?\nThe best place to ask questions and see what questions other people have is in Quarto discussions (https://github.com/quarto-dev/quarto-cli/discussions)."
  },
  {
    "objectID": "docs/projects/virtual-environments.html",
    "href": "docs/projects/virtual-environments.html",
    "title": "Virtual Environments",
    "section": "",
    "text": "Virtual environments provide a project-specific version of installed packages. This both helps you to faithfully reproduce your environment (e.g. if you are collaborating with a colleague or deploying to a server) as well as isolate the use of packages so that upgrading a package in one project doesn’t break other projects.\nThere are several popular flavors of virtual environment, we will cover the following ones here:\nBelow we’ll provide some example workflows for using these tools with Quarto. In these examples we’ll assume that you are already within a project directory that contains Quarto documents (so the environment will be created as a sub-directory of the project).\nWe’ll also cover using virtual environments with JupyterLab, RStudio, and VS Code."
  },
  {
    "objectID": "docs/projects/virtual-environments.html#using-venv",
    "href": "docs/projects/virtual-environments.html#using-venv",
    "title": "Virtual Environments",
    "section": "Using venv",
    "text": "Using venv\nHere we’ll provide a brief run through of creating a venv for a Quarto project. See the full documentation on using virtual environments with Python for additional details.\nTo create a new Python 3 virtual environment in the directory env:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m venv env\n\n\nMac/Linux\npython3 -m venv env\n\n\n\nTo use the environment you need to activate it. This differs slightly depending on which platform / shell you are using:\n\n\n\n\n\n\n\nShell\nCommand\n\n\n\n\nWindows\n(Command)\nenv\\Scripts\\activate.bat\n\n\nWindows\n(PowerShell)\nenv\\Scripts\\Activate.ps1\n\n\nMac/Linux\nsource env/bin/activate\n\n\n\n\n\n\n\n\n\nPowerShell Note\n\n\n\nNote that you may receive an error about running scripts being disabled when activating within PowerShell. If you get this error then execute the following command:\nSet-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser\n\n\nOnce you’ve activated the environment, you need to ensure that you have the packages required to render your documents. This will typically encompass jupyter / jupyterlab plus whatever other packages are used in your Python code. ip to install packages into your environment. For example:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip install jupyter matplotlib pandas\n\n\nMac/Linux\npython3 -m pip install jupyter matplotlib pandas\n\n\n\nAssuming you installed all of the required packages (likely more than just pandas and matplotlib) you should now be able to quarto render documents within the directory.\nTo deactivate an environment use the deactivate command:\ndeactivate\n\nSaving Environments\nTo make your environment reproducible, you need to create a requirements.txt file that enumerates all of the packages in use. To do this use the pip freeze command:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip freeze > requirements.txt\n\n\nMac/Linux\npython3 -m pip freeze > requirements.txt\n\n\n\nYou should generally check the requirements.txt file into version control.\n\n\nRestoring Environments\nTo reproduce the environment on another machine you create an empty environment, activate it, and then pip install using requirements.txt:\nFirst, follow the instructions above for creating and activating a virtual environment for your platform/shell.\nThen, install packages from requirements.txt:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip install -r requirements.txt\n\n\nMac/Linux\npython3 -m pip install -r requirements.txt"
  },
  {
    "objectID": "docs/projects/virtual-environments.html#using-conda",
    "href": "docs/projects/virtual-environments.html#using-conda",
    "title": "Virtual Environments",
    "section": "Using conda",
    "text": "Using conda\nThis section will cover the basics of creating and using conda environments with Quarto projects. See this article on managing project specific environments with Conda for additional details.\nTo create a new environment in the directory env:\nconda create --prefix env python\nIf this is the first time you’ve used conda in your shell, you may need to execute one of the following commands before using other conda tools:\n\n\n\n\n\n\n\nShell\nCommand\n\n\n\n\nWindows\n(Command)\nconda init cmd.exe\n\n\nWindows\n(PowerShell)\nconda init powershell\n\n\nLinux / Older Mac\n(Bash)\nconda init bash\n\n\nNewer Mac\n(Zsh)\nconda init zsh\n\n\n\nYou will likely need to exit and restart your terminal for conda init to be reflected in your session.\nTo use the environment you need to activate it, which you do as follows:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\nconda activate .\\env\n\n\nMac/Linux\nconda activate ./env\n\n\n\nOnce you’ve activated the environment, you need to ensure that you have the packages required to render your documents. This will typically encompass jupyter / jupyterlab plus whatever other packages are used in your Python code. Use conda install to install packages into your environment. For example:\nconda install jupyterlab\nconda install pandas matplotlib \nAssuming you installed all of the required packages (likely more than just pandas and matplotlib) you should now be able to quarto render documents within the directory.\nUse conda deactivate to exit an activated environment:\nconda deactivate\n\nSaving Environments\nTo make your environment reproducible, you need to create a environment.yml file that enumerates all of the packages in use. Do this using the conda env export command:\nconda env export > environment.yml\nYou should generally check the environment.yml file into version control.\n\n\nRestoring Environments\nTo reproduce the environment on another machine you just pass the environment.yml file as an argument to conda create:\nconda create --prefix env -f environment.yml"
  },
  {
    "objectID": "docs/projects/virtual-environments.html#using-renv",
    "href": "docs/projects/virtual-environments.html#using-renv",
    "title": "Virtual Environments",
    "section": "Using renv",
    "text": "Using renv\nThe renv package provides functionality similar to the venv and conda, but for R packages. To create a new renv environment, install the renv package from CRAN then call the renv::init() function:\ninstall.pacakges(\"renv\")\nrenv::init()\nAs part of initialization, your .Rprofile file is modified to ensure that the renv is activated automatically at the start of each R session.\nIf you plan on using both R and Python in your project, you can have renv automatically create and manage a Python virtual environment as follows:\nrenv::use_python()\nTo install R packages use the standard R install.packages function. You can also install GitHub packages using the renv::install function. For example:\ninstall.packages(\"ggplot2\")      # install from CRAN\nrenv::install(\"tidyverse/dplyr\") # install from GitHub\nTo install Python packages just use pip as described above from the built-in RStudio terminal.\n\nSaving Environments\nTo record the current versions of all R (and optionally Python) packages, use the renv::snapshot() function:\nrenv::snapshot()\nThis will record an renv.lock file for R packages and a requirements.txt file for Python packages). These files should be checked into version control.\n\n\nRestoring Environments\nTo reproduce the environment on another machine use the renv::restore() function:\nrenv::restore()"
  },
  {
    "objectID": "docs/projects/virtual-environments.html#jupyterlab",
    "href": "docs/projects/virtual-environments.html#jupyterlab",
    "title": "Virtual Environments",
    "section": "JupyterLab",
    "text": "JupyterLab\nTo use Jupyter or JupyterLab within a Python virtual environment you just need to activate the environment and then launch the Jupyter front end. For example:\n\n\n\n\n\n\n\nShell\nCommand\n\n\n\n\nWindows\n(Command)\nenv\\Scripts\\activate.bat\npy -m jupyter lab\n\n\nWindows (PowerShell)\nenv\\Scripts\\Activate.ps1\npy -m jupyter lab\n\n\nMac/Linux\nsource env/bin/activate\npython3 -m jupyter lab\n\n\n\nAll of the Python packages installed within the env will be available in your Jupyter notebook session. The workflow is similar if you are using conda environments."
  },
  {
    "objectID": "docs/projects/virtual-environments.html#rstudio",
    "href": "docs/projects/virtual-environments.html#rstudio",
    "title": "Virtual Environments",
    "section": "RStudio",
    "text": "RStudio\nIf you are using Quarto within RStudio it is strongly recommended that you use the current release of RStudio from https://www.rstudio.com/products/rstudio/download/ (the documentation below assumes you are using this build).\n\nrenv\nIf you are using renv, RStudio will automatically do the right thing in terms of binding Quarto to the R and/or Python packages in your project-local environments.\nIf you need to install R packages ust use install.packages; if you need to install Python packages simply use pip or conda within the Terminal as described above.\n\n\nvenv / condaenv\nRStudio will automatically activate any venv or condaenv that it finds within a project directory. Just be sure to create an RStudio project within the same directory where you created your env and things will work as expected with no additional configuration.\nIf you need to install Python packages simply use pip or conda within the Terminal as described above."
  },
  {
    "objectID": "docs/projects/virtual-environments.html#vs-code",
    "href": "docs/projects/virtual-environments.html#vs-code",
    "title": "Virtual Environments",
    "section": "VS Code",
    "text": "VS Code\nIf you create a virtual environment in the env/ directory as described above, Visual Studio Code should automatically discover that environment when you load a workspace from the environment’s parent directory.\nNote that this applies only to venv not Conda environments (which have a separate mechansim for binding to the current VS Code session).\nYou can read more about VS Code support for virtual environments here: https://code.visualstudio.com/docs/python/environments."
  },
  {
    "objectID": "docs/projects/code-execution.html",
    "href": "docs/projects/code-execution.html",
    "title": "Managing Execution",
    "section": "",
    "text": "Rendering a list of input files has the potential to be quite time consuming depending on the computations required. There are a number of techniques you can use to minimize the time required to rebuild a site that has expensive computations."
  },
  {
    "objectID": "docs/projects/code-execution.html#incremental-render",
    "href": "docs/projects/code-execution.html#incremental-render",
    "title": "Managing Execution",
    "section": "Incremental Render",
    "text": "Incremental Render\nWhen working on a project you are typically iterating on a single document at a time. You can render a single file (or single directory or list of files) incrementally by specifying it on the command-line:\nquarto render introduction.qmd\nquarto render subdir/\nEven though you are rendering only part of the project, any associated project-handling code is still executed. So for example in a book project the entire book is still produced (using previously rendered versions of the other chapters)."
  },
  {
    "objectID": "docs/projects/code-execution.html#freeze",
    "href": "docs/projects/code-execution.html#freeze",
    "title": "Managing Execution",
    "section": "Freeze",
    "text": "Freeze\nYou can use the freeze option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\nexecute:\n  freeze: true  # never re-render during project render\nexecute:\n  freeze: auto  # re-render only when source changes\nNote that freeze controls whether execution occurs during global project renders. If you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\n\nUsing Freeze\nFreeze is generally used when you have either a large number of collaborators or many computational documents created over a longer period of time. In both cases it can be challenging to fully re-execute every document when you render the site. This could be because some documents have esoteric or environment-specific requirements (e.g. require access/authentication to a data source) or due to general fragility of dependencies over time. Using freeze ensures that you can always reproducibly render your site.\nThe computational results of documents executed with freeze are stored in the _freeze directory, and re-used when needed to fulfill document renders. You should check the contents of _freeze into version control so that others rendering the project don’t need to reproduce your computational environment to render it in their environment.\nNote that you’ll still want to take care to fully re-render your project when things outside of source code change (e.g. input data). You can remove previously frozen output by deleting the _freeze folder at the root of yourproject.\n\n\nVirtual Environments\nYou can also combine freeze with the use of virtual environments to divide your project into sub-directories that each have their own set of dependencies. This allows multiple collaborators to use a set of localized dependencies for the documents they are responsible for, but at the same time still be able to render the entire project without requiring all of its dependencies.\nTo learn how to create and use a virtual environment, see the full documentation on Virtual Environments\nHere’s an example workflow of using virtual environments with freeze:\n\nInclude freeze: true in the project execution options:\nexecute:\n  freeze: true\nCreate a sub-directory of documents (e.g. research), and initialize and use a virtual environment within it:\nresearch/\n  document1.qmd\n  document2.qmd\n  env/\n  requirements.txt\nWhen working wihtin this sub-directory, activate the virtual environment before rendering its documents. For example:\ncd research\nsource venv/bin/activate\nquarto render               # render all files in subdir\nquarto render document.qmd  # render a single-file\n\nThis sub-directory render won’t use the cached freeze results but instead will re-run all of the computations using the directory-specific virtual environment. You can of course also include sub-directories within this directory and their documents will also be rendered using the parent virtual environment."
  },
  {
    "objectID": "docs/projects/code-execution.html#cache",
    "href": "docs/projects/code-execution.html#cache",
    "title": "Managing Execution",
    "section": "Cache",
    "text": "Cache\nYou can use the cache option to cache the results of computations (using the knitr cache for R documents, and Jupyter Cache for Jupyter documents):\nexecute:\n  cache: true\nNote that cache invalidation is triggered by changes in chunk source code (or other cache attributes you’ve defined). You may however need to manually refresh the cache if you know that some other input (or even time) has changed sufficiently to warrant an update. To do this, render either individual files or an entire project using the --cache-refresh option:\nquarto render mydoc.qmd --cache-refresh # single doc\nquarto render --cache-refresh           # entire project"
  },
  {
    "objectID": "docs/projects/code-execution.html#notebooks",
    "href": "docs/projects/code-execution.html#notebooks",
    "title": "Managing Execution",
    "section": "Notebooks",
    "text": "Notebooks\nNote that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render notebook.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Notebook\"\nexecute: \n  enabled: true\n---"
  },
  {
    "objectID": "docs/projects/code-execution.html#working-dir",
    "href": "docs/projects/code-execution.html#working-dir",
    "title": "Managing Execution",
    "section": "Working Dir",
    "text": "Working Dir\nBy default, the working directory for rendering files within a project is the directory of the file itself. If you prefer to use the main project directory instead, you can add the execute-dir: project option to your config:\nproject:\n  execute-dir: project\nNote that from within your code you can always determine the location of the currently executing Quarto project using the QUARTO_PROJECT_DIR environment variable."
  },
  {
    "objectID": "docs/projects/quarto-projects.html",
    "href": "docs/projects/quarto-projects.html",
    "title": "Project Basics",
    "section": "",
    "text": "Quarto projects are directories that provide:\n\nA way to render all or some of the files in a directory with a single command (e.g. quarto render myproject).\nA way to share YAML configuration across multiple documents.\nThe ability to redirect output artifacts to another directory.\nThe ability to freeze rendered output (i.e. don’t re-execute documents unless they have changed).\n\nIn addition, projects can have special “types” that introduce additional behavior (e.g. websites or books).\n\n\n\n\n\n\nNote\n\n\n\nIf you are just getting started with Quarto and/or you don’t have previous experience with markdown publishing systems, you probably want to skip learning about projects for now. Once you are comfortable with the basics, come back to this article to learn more."
  },
  {
    "objectID": "docs/projects/quarto-projects.html#creating-projects",
    "href": "docs/projects/quarto-projects.html#creating-projects",
    "title": "Project Basics",
    "section": "Creating Projects",
    "text": "Creating Projects\nUse the quarto create-project command to create a new project. If you have an existing directory of documents that you want to treat as a project just invoke create-project with no arguments from within the directory:\nquarto create-project\nTo create a project in a new directory just provide a directory name on the command line:\nquarto create-project myproject"
  },
  {
    "objectID": "docs/projects/quarto-projects.html#shared-metadata",
    "href": "docs/projects/quarto-projects.html#shared-metadata",
    "title": "Project Basics",
    "section": "Shared Metadata",
    "text": "Shared Metadata\nWhen you create a project, a _quarto.yml config file is created. Here is an example of what the _quarto.yml file might look like:\nproject:\n  output-dir: _output\n\ntoc: true\nnumber-sections: true\nbibliography: references.bib  \n  \nformat:\n  html:\n    css: styles.css\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\nAny document rendered within the project directory will automatically inherit the metadata defined at the project level.\nNote that the project file contains both global options that apply to all formats (e.g. toc and bibliography) as well as format-specific options.\nYou can also provide per-directory options by adding a _metadata.yml file to any sub-directory of your project. Options provided within _metadata.yml use the same schema as _quarto.yml, and are merged with any options you’ve already provided in _quarto.yml."
  },
  {
    "objectID": "docs/projects/quarto-projects.html#rendering-projects",
    "href": "docs/projects/quarto-projects.html#rendering-projects",
    "title": "Project Basics",
    "section": "Rendering Projects",
    "text": "Rendering Projects\nYou can render files within a project either one-by-one or all at once (in either case, shared project metadata will be used).\nTo render all of the documents within a project, just use quarto render within the project directory (or target a specific directory with a command line argument):\n# render project in current dir\nquarto render \n\n# render project in 'myproject'\nquarto render myproject\nYou can also render only the files within a sub-directory of a project. For example, if the current directory contains a project with sub-directories tutorials, how-to, and articles, you can render just the contents of articles as follows:\n# render only documents in the 'articles' sub-directory\nquarto render articles\nNote that when rendering a project, command line arguments you pass to quarto render will be used for each file in the project. For example. this command will render only the PDF format:\nquarto render --to pdf\nquarto render myproject --to pdf\nIf you are working with Quarto from R, you can also render a project from the R console using the quarto R package.\nlibrary(quarto)\nquarto_render()"
  },
  {
    "objectID": "docs/projects/quarto-projects.html#render-targets",
    "href": "docs/projects/quarto-projects.html#render-targets",
    "title": "Project Basics",
    "section": "Render Targets",
    "text": "Render Targets\nBy default, all valid Quarto input files (.qmd, .ipynb, .md, .Rmd) in the project directory will be rendered, save for ones with a file or directory prefix of . (hidden files) or _ (typically used for non top-level files, e.g. ones included in other files).\nIf you don’t want to render all of the target documents in a project, or you wish to control the order of rendering more precisely, you can add a project: render: [files] entry to your project metadata. For example:\nproject:\n  render:\n    - section1.qmd\n    - section2.qmd\nNote that you can use wildcards when defining the render list. For example:\nproject:\n  render:\n    - section*.qmd\nYou can also use the prefix ! to ignore some paths in the render list. Note that in that case you need to start by specifying everything you do want to render. For example:\nproject:\n  render:\n    - \"*.qmd\"\n    - \"!ignored.qmd\"\n    - \"!ignored-dir/\"\n\n\n\n\n\n\nNote\n\n\n\nIf the name of your output file needs to start with . or _ (for instance _index.md for Hugo users), you must name the Quarto input file without the prefix (for instance index.qmd) and add an explicit output-file parameter in the YAML such as\n---\noutput-file: _index.md\n---"
  },
  {
    "objectID": "docs/projects/quarto-projects.html#project-scripts",
    "href": "docs/projects/quarto-projects.html#project-scripts",
    "title": "Project Basics",
    "section": "Project Scripts",
    "text": "Project Scripts\nMany more complex projects have additional processing that needs to take place periodically (e.g. data import and preparation) or even before/after each render. Project scripts are a way to incorporate this processing into your workflow.\n\nPeriodic Scripts\nYou can use the quarto run command to run a TypeScript, R, Python, or Lua script. For example:\nquarto run import.py\nAvailable script interpreters for quarto run include:\n\n\n\nLanguage\nInterpreter\n\n\n\n\nTypeScript\nDeno (embedded in Quarto)\n\n\nR\nRscript from PATH\n\n\nPython\nPython from PATH (or launcher on Windows)\n\n\nLua\nLua 5.3 (embedded in Pandoc)\n\n\n\nUsing TypeScript or Lua enables you to create scripts with no additional installation requirements. On the other hand, if your project is already using Python or R then scripts in those languages might be more convenient.\nIf you are using TypeScript, please be sure to consult the section below on Deno Scripts for additonal details on the Deno standard library and importing external scripts.\n\n\nPre and Post Render Scripts\nYou can arrange for one or more scripts to execute before and/or after each render using the pre-render and post-render project options. For example:\nproject:\n  type: website\n  pre-render: prepare.py\n  post-render: \n    - compress.ts\n    - fix-links.py\nNote that pre-render and post-render also support arbitrary shell commands. So you could for example use make to do data preparation this way:\nproject:\n  type: website\n  pre-render: make prepare\nPre and post render scripts are run with the main project directory.\nThe following environment variables are passed to pre and post-render scripts (note that all paths are relative to the main project directory):\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nQUARTO_PROJECT_RENDER_ALL\nSet to “1” if this is a render of all files in the project (as opposed to an incremental render or a render for preview). This unset if Quarto is not rendering all files.\n\n\nQUARTO_PROJECT_OUTPUT_DIR\nOutput directory\n\n\nQUARTO_PROJECT_INPUT_FILES\nNewline separated list of all input files being rendered (passed only to pre-render)\n\n\nQUARTO_PROJECT_OUTPUT_FILES\nNewline separated list of all output files rendered (passed only to post-render).\n\n\n\nIf you have a pre-render step that is expensive, you may want only run it when the entire project is being rendered. Here’s how you would do this in the various supported script languages:\n\nTypeScriptPythonRLua\n\n\nif (!Deno.env.get(\"QUARTO_PROJECT_RENDER_ALL\")) {\n  Deno.exit();\n}\n\n\nimport os\nif not os.getenv(\"QUARTO_PROJECT_RENDER_ALL\"):\n  exit()\n\n\nif (!nzchar(Sys.getenv(\"QUARTO_PROJECT_RENDER_ALL\"))) {\n  quit()\n}\n\n\nif not os.getenv(\"QUARTO_PROJECT_RENDER_ALL\") then\n  os.exit();\nend\n\n\n\n\n\nDeno Scripts\nIf you want to create project scripts with TypeScript, quarto run enables you to use the Deno TypeScript interpreter bundled with Quarto. This interpreter also includes the complete Deno standard library. For example, to use the Deno YAML parser you would do this:\nimport { parse } from \"https://deno.land/std/encoding/yaml.ts\";\n\nconst config = parse(Deno.readTextFileSync(\"_quarto.yml\"));\nThe reference to the Deno encoding library above uses a URL: it’s important to note that in spite of this the library is not downloaded from a remote server (in fact, importing from remote servers is disabled entirely in the Quarto Deno interpreter). Rather, the Deno standard library is shipped with Quarto, making standard library URLs available in an offline cache.\nYou may come across example code that embeds versions directly in Deno library imports. For example:\nimport { format } from \"https://deno.land/std@0.119.0/datetime/mod.ts\";\nThese version-bound imports will not work with Quarto (as its local standard library cache is populated with unversioned URLs). The correct form of the above import is thus:\nimport { format } from \"https://deno.land/std/datetime/mod.ts\";\nYou may also see examples of Deno code that imports 3rd party libraries directly from URLs. As noted above, this functionality is not available in Quarto Deno scripts. Rather, you should download any external libraries you wish to use, include them with your project source code, and import them using relative file paths."
  },
  {
    "objectID": "docs/books/index.html",
    "href": "docs/books/index.html",
    "title": "Creating a Book",
    "section": "",
    "text": "Quarto Books are combinations of multiple documents (chapters) into a single manuscript. Books can be created in a variety of formats:\n\nHTML\nPDF\nMS Word\nEPUB\n\nHTML books are actually just a special type of Quarto Website and consequently support all of the same features as websites including full-text search. The most important difference is that HTML books use chapter numbers and therefore support Cross References between different chapters.\nHere are some examples of books created with Quarto:\n\n\n\nBook\nSource\n\n\n\n\nHands on Programming with R\nCode\n\n\nVisualization Curriculum\nCode"
  },
  {
    "objectID": "docs/books/index.html#getting-started",
    "href": "docs/books/index.html#getting-started",
    "title": "Creating a Book",
    "section": "Getting Started",
    "text": "Getting Started\nTo create a new book project, use the Quarto create-project command:\nquarto create-project mybook --type book\nThis will create the scaffolding for a simple book in the mybook sub-directory. To build and view the HTML version of the book use the preview command:\nquarto preview mybook\nThis will build the HTML version of the book and run a local web server to view it. Here’s what you’ll see in your browser for the simple book scaffolding:\n\nThe book’s chapters are contained in the files index.qmd, intro.qmd, summary.qmd. Try adding some content to one of these files and saving—you’ll notice that the book preview is automatically updated in the browser.\nYou’ll also notice that a Quarto project file (_quarto.yml) was created in the mybook directory. This file contains the initial configuration for your book:\nproject:\n  type: book\n\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"8/18/2021\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreport\n  epub:\n    cover-image: cover.png\nSee the Project Basics article to learn more about working with projects, including how to add custom pre and post render scripts to your book.\n\nVS Code\nIf you are using VS Code you can open a new workspace with your book project using the code command from within VS Code:\ncode mybook\n\n\nRStudio\nIf you are using RStudio you can also create a Quarto book via the New Project command:\n\nRender chapters within the book using the Render command, render the entire book using the Render Book command on the Build tab."
  },
  {
    "objectID": "docs/books/index.html#workflow",
    "href": "docs/books/index.html#workflow",
    "title": "Creating a Book",
    "section": "Workflow",
    "text": "Workflow\n\nDevelopment\nWhen working on a book, you’ll typically run the local development server as described above and incrementally preview content as you work:\nquarto preview\nIf you are authoring within RStudio, you can run the development server within the RStudio Viewer pane using the Serve Book command on the Build Tab.\nThe development server will automatically re-render input files whenever they change.\nChanges to configuration files (e.g. _quarto.yml) as well as site resources (e.g. theme or CSS files) will also cause an automatic refresh.\nYou can customize the behavior of the preview server (port, whether it opens a browser, etc.) using command line options or the _quarto.yml config file. See quarto preview help or the project file reference for additional details.\n\n\n\n\n\n\nImportant\n\n\n\nAs you preview your book, chapters will be rendered and updated. However, if you make changes to global options (e.g. _quarto.yml or included files) you need to fully re-render your book to have all of the changes reflected. Consequently, you should always fully quarto render your book before deploying it, even if you have already previewed changes to some chapters with the preview server.\n\n\n\n\nPublishing\nWhen you are ready to publish the book, use the render command to render all output formats:\nquarto render --to all\nIf you pass no arguments to quarto render the default format (HTML) will be rendered. You can also render individual formats via the --to argument:\nquarto render           # render default format (HTML)\nquarto render --to pdf  # render PDF format only\nThe output of your book will be written to the _book sub-directory of your book project:\nmybook/\n  _book/\n    index.html # and other book files\n    mybook.pdf\n    mybook.epub\nSee the documentation on Publishing Websites for details on how to publish books to GitHub Pages, Netlify, and other services. Note that in that documentation the output-dir may be referred to as _site: for publishing books you should use _book rather than _site."
  },
  {
    "objectID": "docs/books/index.html#learning-more",
    "href": "docs/books/index.html#learning-more",
    "title": "Creating a Book",
    "section": "Learning More",
    "text": "Learning More\nOnce you’ve got the basic book template up and running check out these articles for various ways to enhance your book:\nBook Structure delves into different ways to structure a book (numbered and unnumbered chapters/sections, creating multiple parts, adding appendices, etc.)\nBook Crossrefs explains how to create cross references to sections, figures, tables, equations and more within books.\nBook Output covers customizing the style and appearance of your book in the various output format as well as how to provide navigation and other tools for readers.\nBook Options provides a comprehensive reference to all of the available book options.\nCode Execution provides tips for optimizing the rendering of books with large numbers of documents or expensive computations.\nPublishing Websites enumerates the various options for publishing your book as a website including GitHub Pages, Netlify, Google Firebase, and RStudio Connect."
  },
  {
    "objectID": "docs/books/book-output.html",
    "href": "docs/books/book-output.html",
    "title": "Customizing Book Output",
    "section": "",
    "text": "This article covers customizing the output of book projects, including how to tailor the styles and appearance of books in each supported output format."
  },
  {
    "objectID": "docs/books/book-output.html#format-options",
    "href": "docs/books/book-output.html#format-options",
    "title": "Customizing Book Output",
    "section": "Format Options",
    "text": "Format Options\nIf you want to specify rendering options (including format-specific options), you do it within the _quarto.yml project file rather than within the individual markdown documents. This is because when rendering a book all of the chapters are combined together into a single document (with a single set of format options).\nHere’s an example configuration:\nhighlight-style: pygments\n\nformat:\n  html:\n    theme: cosmo\n    code-copy: true\n  pdf: default\n    \nbibliography: references.bib\ncsl: citestyle.csl\nNote that in the above configuration the highlight-style option applies to all formats whereas the html options apply to only HTML output. The bibliography related options naturally also apply to all formats."
  },
  {
    "objectID": "docs/books/book-output.html#reader-tools",
    "href": "docs/books/book-output.html#reader-tools",
    "title": "Customizing Book Output",
    "section": "Reader Tools",
    "text": "Reader Tools\n\nSidebar Tools\nBooks automatically include a navigational sidebar that can optionally include tools for searching book contents, sharing links to the book, etc. Here is an example _quarto.yml file that enables these options:\nbook:\n  title: \"Hands-On Programming with R\"\n  author: \"Garrett Grolemund\"\n  search: true\n  repo-url: https://github.com/jjallaire/hopr/\n  repo-actions: [edit]\n  downloads: [pdf, epub]\n  sharing: [twitter, facebook]\n  \ncomments:\n  hypothesis: true\nNote the various tools that now appear:\n\n\nThe search box enables full text search of the entire book\nThe buttons immediately below the book title in the sidebar provide a link to the GitHub repo for the book, downloads for PDF and ePub versions of the book, and links for sharing the book on Twitter and Facebook.\nImmediately below the table of contents on the right there is an “Edit this page” link that takes the reader to the edit interface on GitHub for the current chapter. Note that in this example we specify repo-actions: [edit]. You can optionally also add issue and source actions (e.g. repo-actions: [edit, issue, source]).\nThe Hypothesis commenting bar appears on the far right of the page. Note that commenting is a feature available for all Quarto HTML output so appears in its own YAML key.\n\n\nSidebar Options\nNote that books utilize the standard sidebar component from Quarto Websites. This means that you can use any of the available sidebar options within your book configuration. For example, here we specify a docked sidebar with a light background:\nbook:\n  title: \"Hands-On Programming with R\"\n  author: \"Garrett Grolemund\"\n  sidebar:\n    style: docked\n    background: light"
  },
  {
    "objectID": "docs/books/book-output.html#cover-images",
    "href": "docs/books/book-output.html#cover-images",
    "title": "Customizing Book Output",
    "section": "Cover Images",
    "text": "Cover Images\nYou can provide a cover image for EPUB and/or HTML formats using the cover-image option. For example:\nbook:\n  cover-image: cover.png\nYou can also do this on a per-format basis (if for example you want to provide a higher resolution image for EPUB and a lower resolution image for HTML to reduce download time). For example:\nformat:\n   html: \n     cover-image: cover.png\n   epub:\n     cover-image: cover-highres.png"
  },
  {
    "objectID": "docs/books/book-output.html#output-path",
    "href": "docs/books/book-output.html#output-path",
    "title": "Customizing Book Output",
    "section": "Output Path",
    "text": "Output Path\nBy default, book output is written to the _book directory of your project. You can change this via the output-dir project option. For example:\nproject:\n  type: book\n  output-dir: docs\nSingle file outputs like PDF, EPUB, etc. are also written to the output-dir. Their file name is derived from the book title. You can change this via the output-file option:\nbook:\n  title: \"My Book\"\n  output-file: \"my-book\"\nNote that the output-file should not have a file extension (that will be provided automatically as appropriate for each format)."
  },
  {
    "objectID": "docs/books/book-output.html#latex-output",
    "href": "docs/books/book-output.html#latex-output",
    "title": "Customizing Book Output",
    "section": "LaTeX Output",
    "text": "LaTeX Output\nIn some cases you’ll want to do customization of the LaTeX output before creating the final printed manuscript (e.g. to affect how text flows between pages or within and around figures). The best way to approach this is to develop your book all the way to completion, then render with the keep-tex option:\nformat:\n  pdf:\n    keep-tex: true\nThe complete LaTeX source code of your book will be output into the main book source directory (e.g. to “my-book.tex”). This LaTeX can be compiled without Quarto, so is suitable for submitting to an external publisher.\nAt this point you should probably make a copy or git branch of the book directory to perform your final LaTeX modifications within (since the modifications you make to LaTeX will not be preserved in your markdown source, and will therefore be overwritten the next time you render)."
  },
  {
    "objectID": "docs/books/book-output.html#html-styles",
    "href": "docs/books/book-output.html#html-styles",
    "title": "Customizing Book Output",
    "section": "HTML Styles",
    "text": "HTML Styles\nHTML output can be customized either by adding (or enhancing) a custom theme, or by providing an ordinary CSS file. Use the theme option to specify a theme:\nformat:\n  html:\n    theme: cosmo\nTo further customize a theme add a custom theme file:\nformat:\n  html:\n    theme: [cosmo, theme.scss]\nYou can learn more about creating theme files in the documentation on HTML Themes.\nYou can also just use plain CSS. For example:\nformat:\n  html:\n    css: styles.css"
  },
  {
    "objectID": "docs/books/book-output.html#epub-styles",
    "href": "docs/books/book-output.html#epub-styles",
    "title": "Customizing Book Output",
    "section": "EPUB Styles",
    "text": "EPUB Styles\nYou can also use CSS to customize EPUB output:\nformat:\n  epub:\n    css: epub-styles.css\n    epub-cover-image: epub-cover.png\nNote that we also specify a cover image. To learn more about other EPUB options, see the Pandoc documentation on EPUBs."
  },
  {
    "objectID": "docs/books/book-output.html#pdf-styles",
    "href": "docs/books/book-output.html#pdf-styles",
    "title": "Customizing Book Output",
    "section": "PDF Styles",
    "text": "PDF Styles\nYou can include additional LaTeX directives in the preamble of your book using the include-in-header option. You can also add documentclass and other options (see the Pandoc documentation on LaTeX options for additional details). For example:\nformat:\n  pdf: \n    documentclass: scrbook\n    include-in-header: preamble.tex\n    fontfamily: libertinus\nQuarto uses the KOMA Script scrreprt document class by default for PDF books. KOMA-Script classes are drop-in replacements for the standard classes with an emphasis on typography and versatility.\nYou can switch to KOMA scrbook as demonstrated above, or to the standard LaTeX book and report classes. You can find a summary of the differences between book and report here: https://tex.stackexchange.com/questions/36988"
  },
  {
    "objectID": "docs/books/book-output.html#ms-word-styles",
    "href": "docs/books/book-output.html#ms-word-styles",
    "title": "Customizing Book Output",
    "section": "MS Word Styles",
    "text": "MS Word Styles\nYou can customize MS Word output by creating a new reference doc, and then applying it to your book as follows:\nformat:\n  docx:\n    reference-doc: custom-reference.docx\nTo create a new reference doc based on the Pandoc default, execute the following command:\nquarto pandoc -o custom-reference.docx --print-default-data-file reference.docx\nThen, open custom-reference.docx in MS Word and modify styles as you wish:\n\n\n\nYou can open the Styles pane from the HOME tab in the MS Word toolbar.\n\n\nWhen you move the cursor to a specific element in the document, an item in the styles list will be highlighted. If you want to modify the style of any type of element, you can click the drop-down menu on the highlighted item, and you will see a dialog box like this:\n\nAfter you finish modifying the styles, you can save the document and use it as the template for future Word documents."
  },
  {
    "objectID": "docs/books/book-structure.html",
    "href": "docs/books/book-structure.html",
    "title": "Book Structure",
    "section": "",
    "text": "The structure of a Quarto book can be as simple as a list of chapters, or can alternatively incorporate multiple parts and/or appendices. Quarto book chapters and sections are automatically numbered (for cross-referencing), however you can also specify that some parts of the book should remain unnumbered.\nThe simple book configuration generated by quarto create-project illustrates the basics:\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/9/2021\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n\nThe index file is required and includes preface, acknowledgements, etc. Headings in the index file are unnumbered by default.\nThe remainder of chapters includes one or more book chapters.\nThe references.md file will include the generated bibliography (see References below for details)."
  },
  {
    "objectID": "docs/books/book-structure.html#titles",
    "href": "docs/books/book-structure.html#titles",
    "title": "Book Structure",
    "section": "Titles",
    "text": "Titles\nSince rendering options are provided in _quarto.yml, you’ll typically see a simple level-one header at the top of chapters. For example:\n# Introduction\nNote that the following is also still perfectly valid:\n---\ntitle: \"Introduction\"\n---"
  },
  {
    "objectID": "docs/books/book-structure.html#chapter-numbers",
    "href": "docs/books/book-structure.html#chapter-numbers",
    "title": "Book Structure",
    "section": "Chapter Numbers",
    "text": "Chapter Numbers\nAll chapters are numbered by default. If you want a chapter to be unnumbered simply add the .unnumbered class to its main header. For example:\n# Resources {.unnumbered}\nYou can mix together numbered and unnumbered chapters. Note however that while you can link to unnumbered chapters, you can’t cross reference figures, tables, etc. within them. Unnumbered chapters are therefore mostly useful for prefatory content or references at the end of your book."
  },
  {
    "objectID": "docs/books/book-structure.html#section-numbers",
    "href": "docs/books/book-structure.html#section-numbers",
    "title": "Book Structure",
    "section": "Section Numbers",
    "text": "Section Numbers\nYou can set the numbering depth via the number-depth option. For example, to only number sections immediately below the chapter level, use this:\nnumber-depth: 1\nNote that toc-depth is independent of number-depth (i.e. you can have unnumbered entries in the TOC if they are masked out from numbering by number-depth)."
  },
  {
    "objectID": "docs/books/book-structure.html#references",
    "href": "docs/books/book-structure.html#references",
    "title": "Book Structure",
    "section": "References",
    "text": "References\nYou should include a div with the id #refs at the location in your book where you’d like the bibliography to be generated. For example the references.md file generated by quarto create-project includes this:\n# References {.unnumbered}\n\n::: {#refs}\n:::\nNote that you can change the chapter title to whatever you like, remove .unnumbered to have it be numbered like other chapters, and add other content before or after the bibliography as necessary."
  },
  {
    "objectID": "docs/books/book-structure.html#creating-an-index",
    "href": "docs/books/book-structure.html#creating-an-index",
    "title": "Book Structure",
    "section": "Creating an Index",
    "text": "Creating an Index\nFor PDF output, you can create an index using the LaTeX makeidx package along with the \\index command.\nTo add an index to the PDF output for a book, add these include-in-header and include-after-body entries to your pdf format configuration in _quarto.yml: quart\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n    include-in-header: \n      text: |\n        \\usepackage{makeidx}\n        \\makeindex\n    include-after-body: \n      text: |\n        \\printindex\nThen, add \\index{entry} commands wherever you want an index entry. For example:\nMarkdown\\index{Markdown} allows you to write using\nan easy-to-read, easy-to-write plain text format.\nNote that \\index commands are automatically ignored for non-PDF output."
  },
  {
    "objectID": "docs/books/book-structure.html#parts-appendices",
    "href": "docs/books/book-structure.html#parts-appendices",
    "title": "Book Structure",
    "section": "Parts & Appendices",
    "text": "Parts & Appendices\nYou can divide your book into parts using part within the book chapters. For example:\nchapters:\n  - index.qmd\n  - preface.qmd\n  - part: dice.qmd\n    chapters: \n      - basics.qmd\n      - packages.qmd\n  - part: cards.qmd\n    chapters:\n      - objects.qmd\n      - notation.qmd\n      - modifying.qmd\n      - environments.qmd\nNote that the markdown files dice.qmd and cards.qmd contain the part title (as a level one header) as well as some introductory content for the part. If you just need a part title then you can alternatively use this syntax:\n- part: \"Dice\"\n  chapters: \n    - basics.qmd\n    - packages.qmd\nYou can include appendices by adding an appendices key to your book config. For example:\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/9/2021\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n  appendices:\n    - tools.qmd\n    - resources.qmd\n  \nParts and appendices show up like this in HTML output:\n\nIn LaTeX output, the \\part command is used for parts. In EPUB and MS Word output parts are ignored entirely.\nAppendices are numbering using uppercase alpha, and have a prefix inserted into their title to indicate they are an appendix (e.g. “Appendix A — Additional Resources”). You can customize the prefix and delimiter using the following options:\ncrossref:\n  appendix-title: \"App.\"\n  appendix-delim: \":\"\nWhich would result in the above example being output as: “App. A: Additional Resources”."
  },
  {
    "objectID": "docs/books/book-structure.html#page-navigation",
    "href": "docs/books/book-structure.html#page-navigation",
    "title": "Book Structure",
    "section": "Page Navigation",
    "text": "Page Navigation\nIf you have a book with several pages in a section or subsection, it is often convenient to offer the user the ability to navigate to the next page (or previous page) at the bottom of the page that they’ve just finished reading. You can enable this using:\nbook:\n  page-navigation: true\nWhen enabled, page navigation will be displayed at the bottom of the page whenever there is a next or previous page (including in the next or previous section). This option is enabled by default for books but not for websites."
  },
  {
    "objectID": "docs/books/book-structure.html#page-footer",
    "href": "docs/books/book-structure.html#page-footer",
    "title": "Book Structure",
    "section": "Page Footer",
    "text": "Page Footer\nUse the page-footer option to provide a common footer for all of the pages in a book. The simplest footer just provides text that will be centered and displayed in a lighter typeface:\nbook:\n  page-footer: \"Copyright 2021, Norah Jones\" \nYou can alternatively target the left, right, and center regions of the footer individually:\nbook:\n  page-footer: \n    left: \"Copyright 2021, Norah Jones\" \n    right: \n      - icon: github\n        href: https://github.com/\n      - icon: twitter \n        href: https://twitter.com/ \nNote for the right region of the footer we included navigational items for GitHub and Twitter rather than text. You can include navigational items in any region of the footer.\nYou can use the background, foreground, and border options to further control the appearance of the footer. By default, the footer has no background color and a top border. To eliminate the border you would do this:\nbook:\n  page-footer:\n    border: false\nTo use a light background (e.g. to match a navigation bar) you would do this:\nbook:\n  page-footer:\n    background: light\nUnless specified, the color (foreground) used for elements that appear in the footer will be automatically determined by using a color that contrasts with the footer background."
  },
  {
    "objectID": "docs/books/book-crossrefs.html",
    "href": "docs/books/book-crossrefs.html",
    "title": "Book Crossrefs",
    "section": "",
    "text": "One important difference between creating a website and a book is that in addition to their web output, books can also be rendered as a single continuous document (e.g a PDF or MS Word document). Books also may or may not be read digitally (which means that internal hyperlinks may or may not be available).\nTo create books that are consumable in all of these mediums, special care should be taken when creating links to other chapters or sections within chapters (note though that if your book targets only HTML output you can feel free to use conventional hyperlinks).\nQuarto cross references provide automatic numbering and reference creation for figures, tables, equations, sections, listings, theorems, and proofs. In books, cross references work the same way except they can reach across chapters.\nIf you aren’t already familiar with using crossrefs you may want to read the documentation on cross references before reading on about how they work with books."
  },
  {
    "objectID": "docs/books/book-crossrefs.html#creating-references",
    "href": "docs/books/book-crossrefs.html#creating-references",
    "title": "Book Crossrefs",
    "section": "Creating References",
    "text": "Creating References\nTo reference a figure, table, or other cross-referenceable entity, use the @ syntax (similar to citations) along with the ID / label of the entity you are referencing: For example:\nSee @fig-penginus-by-island for a breakdown by island.\nReferences made this way will be automatically resolved across chapters (including the requisite chapter number in the reference).\nTo make a chapter or section reference-able, you add a #sec id to its main heading. For example:\n# Introduction {#sec-introduction}\nTo refer to a section, include a cross-reference to it using an @ identifier as we did above in the figure example:\nSee @sec-introduction for additional discussion.\nTo refer to a chapter or appendix explicitly you should spell out “Chapter” or “Appendix” and use the number-only form of cross reference:\nSee [Chapter -@sec-visualization] for more details on visualizing model diagnostics."
  },
  {
    "objectID": "docs/books/book-crossrefs.html#section-numbers",
    "href": "docs/books/book-crossrefs.html#section-numbers",
    "title": "Book Crossrefs",
    "section": "Section Numbers",
    "text": "Section Numbers\nBy default, all headings in your document create a numbered section. You customize numbering depth using the number-depth option. For example, to only number sections immediately below the chapter level, use this:\nnumber-depth: 1\nNote that toc-depth is independent of number-depth (i.e. you can have unnumbered entries in the TOC if they are masked out from numbering by number-depth)."
  },
  {
    "objectID": "docs/books/book-crossrefs.html#chapter-numbering",
    "href": "docs/books/book-crossrefs.html#chapter-numbering",
    "title": "Book Crossrefs",
    "section": "Chapter Numbering",
    "text": "Chapter Numbering\nIn books, figures, tables and other cross-reference targets automatically include a chapter number. For example, the following markdown located in Chapter 3 of your book:\nAs illustrated in @fig:geo-comparison, the western states have a much higher incidence of forest fires.\nMight be rendered as:\n\nAs illustrated in fig. 3.2, the western states have a much higher incidence of forest fires.\n\nNote that while books do support unnumbered chapters, you naturally cannot create cross-references to content in chapters without numbers."
  },
  {
    "objectID": "docs/books/book-crossrefs.html#hyperlinks",
    "href": "docs/books/book-crossrefs.html#hyperlinks",
    "title": "Book Crossrefs",
    "section": "Hyperlinks",
    "text": "Hyperlinks\nIf you are creating an HTML-only book (or a PDF / MS Word book that you don’t expect will be printed) then you can feel free to use normal hyperlinks rather than section cross-references.\nTo create a hyperlink within a book, provide the source file as the link target. You can also add hash identifiers (#) to the source file if you want to link to a particular section in the document. For example:\n[about](about.qmd)\n[about](about.qmd#section)\nUsing the source file as the link target ensures that links will be resolved correctly both for HTML output and for formats that produce a single file (e.g. PDF or MS Word).\nNote that if you are targeting printed output for your book you should use explicit cross references to other chapters and sections rather than simple links as shown above. This is because In printed output links aren’t navigable so you need to provide readers with numbered references (e.g. “sec. 5.3”) rather than hyperlinks."
  },
  {
    "objectID": "docs/computations/execution-options.html",
    "href": "docs/computations/execution-options.html",
    "title": "Execution Options",
    "section": "",
    "text": "There are a wide variety of options available for customizing output from executed code. All of these options can be specified either globally (in the document front-matter) or per code-block. For example, here’s a modification of the Python example to specify that we don’t want to “echo” the code into the output document:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\njupyter: python3\n---\nNote that we can override this option on a per code-block basis. For example:\n```{python}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\nCode block options are included in a special comment at the top of the block (lines at the top prefaced with #| are considered options).\nOptions available for customizing output include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\necho\nInclude the source code in output\n\n\noutput\nInclude the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quarto’s standard enclosing markdown).\n\n\nwarning\nInclude warnings in the output.\n\n\nerror\nInclude errors in the output (note that this implies that errors executing code will not halt processing of the document).\n\n\ninclude\nCatch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n\n\n\nHere’s a Knitr example with some of these additional options included:\n---\ntitle: \"Knitr Document\"\nexecute:\n  echo: false\n---\n\n```{r}\n#| warning: false\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n```{r}\nsummary(airquality)\n```\n\n\n\n\n\n\nTip\n\n\n\nWhen using the Knitr engine, you can also use any of the available native options (e.g. collapse, tidy, comment, etc.). See the Knitr options documentation for additional details. You can include these native options in option comment blocks as shown above, or on the same line as the {r} as shown in the Knitr documentation."
  },
  {
    "objectID": "docs/computations/execution-options.html#figure-options",
    "href": "docs/computations/execution-options.html#figure-options",
    "title": "Execution Options",
    "section": "Figure Options",
    "text": "Figure Options\nThere are a number of ways to control the default width and height of figures generated from code. First, it’s important to know that Quarto sets a default width and height for figures appropriate to the target output format. Here are the defaults (expressed in inches):\n\n\n\nFormat\nDefault\n\n\n\n\nDefault\n7 x 5\n\n\nHTML Slides\n9.5 x 6.5\n\n\nHTML Slides (reveal.js)\n9 x 5\n\n\nPDF\n5.5 x 3.5\n\n\nPDF Slides (Beamer)\n10 x 7\n\n\nPowerPoint\n7.5 x 5.5\n\n\nMS Word, ODT, RTF\n5 x 4\n\n\nEPUB\n5 x 4\n\n\nHugo\n8 x 5\n\n\n\nThese defaults were chosen to provide attractive well proportioned figures, but feel free to experiment to see whether you prefer another default size. You can change the default sizes using the fig-width and fig-height options. For example:\n---\ntitle: \"My Document\"\nformat: \n  html:\n    fig-width: 8\n    fig-height: 6\n  pdf:\n    fig-width: 7\n    fig-height: 5\n---\nHow do these sizes make their way into the engine-level defaults for generating figures? This differs by engine:\n\nFor the Knitr engine, these values become the default values for the fig.width and fig.height chunk options. You can override these default values via chunk level options.\nFor Python, these values are used to set the Matplotlib figure.figsize rcParam (you can of course manually override these defaults for any given plot).\nFor Julia, these values are used to initialize the default figure size for the Plots.jl GR backend.\nIf you are using another graphics library with Jupyter and want to utilize these values, you can read them from QUARTO_FIG_WIDTH and QUARTO_FIG_HEIGHT environment variables.\n\n\nCaption and Alt Text\nYou can specify the caption and alt text for figures generated from code using the fig-cap and fig-alt options. For example, here we add these options to a Python code cell that creates a plot:\n```{python}\n#| fig-cap: \"Polar axis plot\"\n#| fig-alt: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```"
  },
  {
    "objectID": "docs/computations/execution-options.html#inline-code",
    "href": "docs/computations/execution-options.html#inline-code",
    "title": "Execution Options",
    "section": "Inline Code",
    "text": "Inline Code\nBoth Jupyter and Knitr support executing inline code within markdown (e.g. to allow narrative to automatically use the most up to date computations). The syntax for this varies across the engines.\n\nJupyter\nTo include executable expressions within markdown in a Python notebook, you use IPython.display.Markdown to dynamically generate markdown from within an ordinary code cell. For example, if we have a variable radius we can use it within markdown as follows:\n```{python}\n#| echo: false\nradius = 10\nfrom IPython.display import display, Markdown\ndisplay(Markdown(\"\"\"\nThe radius of the circle is {radius}.\n\"\"\".format(radius = radius)))\n```\nYou can do the same in a Julia notebook using the Markdown package:\n```{julia}\n#| echo: false\nradius = 10\nusing Markdown\nMarkdown.parse(\"\"\"\nThe radius of the circle is $radius.\n\"\"\")\n```\nNote that we also include the echo: false option to ensure that the code used to generate markdown isn’t included in the final output.\n\n\nKnitr\nTo include executable expressions within markdown for Knitr, enclose the expression in `r `. For example, if we have a variable radius we can use it within markdown as follows:\n## Circle\n\nThe radius of the circle is `r radius`."
  },
  {
    "objectID": "docs/computations/execution-options.html#raw-output",
    "href": "docs/computations/execution-options.html#raw-output",
    "title": "Execution Options",
    "section": "Raw Output",
    "text": "Raw Output\nThe output: asis option enables you to generate raw markdown output. When output: asis is specified none of Quarto’s standard enclosing divs will be included. For example, here we specify output: asis in order to generate a pair of headings:\n\nJupyterKnitr\n\n\n```{python}\n#| echo: false\n#| output: asis\n\nprint(\"# Heading 1\\n\")\nprint(\"## Heading 2\\n\")\n```\n\n\n```{r}\n#| echo: false\n#| output: asis\n\ncat(\"# Heading 1\\n\")\ncat(\"## Heading 2\\n\")\n```\n\n\n\nWhich generates the following output:\n# Heading 1\n\n## Heading 2\nNote that we also include the echo: false option to ensure that the code used to generate markdown isn’t included in the final output.\nIf we had not specified output: asis then the output would have been this:\n::: {.cell-output-stdout}\n```\n# Heading 1\n\n## Heading 2\n\n```\n:::\nFor the Jupyter engine, you can also create raw markdown output using the functions in IPython.display. For example:\n```{python}\n#| echo: false\nfrom IPython.display import display, Markdown\ndisplay(Markdown(\"# Heading 1\\n\"))\ndisplay(Markdown(\"## Heading 2\\n\"))\n```"
  },
  {
    "objectID": "docs/computations/execution-options.html#knitr-options",
    "href": "docs/computations/execution-options.html#knitr-options",
    "title": "Execution Options",
    "section": "Knitr Options",
    "text": "Knitr Options\nIf you are using the Knitr cell execution engine you can specify default document-level Knitr options in YAML. For example:\n---\ntitle: \"My Document\"\nformat: html\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: \"#>\"\n---\nYou can additionally specify global Knitr options using opts_knit.\nIn the example above we establish default Knitr options for a single document. You can also add shared knitr options to a project-wide _quarto.yml file or a project-directory scoped _metadata.yml file."
  },
  {
    "objectID": "docs/computations/execution-options.html#intermediates",
    "href": "docs/computations/execution-options.html#intermediates",
    "title": "Execution Options",
    "section": "Intermediates",
    "text": "Intermediates\nOn the way from markdown input to final output, there are some intermediate files that are created and automatically deleted at the end of rendering. You can use the following options to keep these intermediate files:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nkeep-md\nKeep the markdown file generated by executing code.\n\n\nkeep-ipynb\nKeep the notebook file generated from executing code (applicable only to markdown input files)\n\n\n\nFor example, here we specify that we want to keep the jupyter intermediate file after rendering:\n---\ntitle: \"My Document\"\nexecute:\n  keep-ipynb: true\njupyter: python3\n---"
  },
  {
    "objectID": "docs/computations/execution-options.html#fenced-echo",
    "href": "docs/computations/execution-options.html#fenced-echo",
    "title": "Execution Options",
    "section": "Fenced Echo",
    "text": "Fenced Echo\nIf you are writing a tutorial or documentation on using Quarto code blocks, you’ll likely want to include the fenced code delimiter (e.g. ```{python}) in your code output to emphasize that executable code requires that delimiter. You can do this using the echo: fenced option. For example, the following code block:\n```{python}\n#| echo: fenced\n1 + 1\n```\nWill be rendered as:\n\n```{python}\n1 + 1\n```\n\n2\n\n\nThis is especially useful when you want to demonstrate the use of cell options. For example, here we demonstrate the use of the output and code-overflow options:\n```{python}\n#| echo: fenced\n#| output: false\n#| code-overflow: wrap\n1 + 1\n```\nThis code block appears in the rendered document as:\n\n```{python}\n#| output: false\n#| code-overflow: wrap\n1 + 1\n```\n\nNote that all YAML options will be included in the fenced code output except for echo: fenced (as that might be confusing to readers).\nThis behavior can also be specified at the document level if you want all of your executable code blocks to include the fenced delimiter and YAML options:\n---\ntitle: \"My Document\"\nformat: html\nexecute:\n  echo: fenced\n---\n\nUnexecuted Blocks\nOften you’ll want to include a fenced code block purely as documentation (not executable). You can do this by using two curly braces around the language (e.g. python, r, etc.) rather than one. For example:\n```{{python}}\n1 + 1\n```\nWill be output into the document as:\n```{python}\n1 + 1\n```\nIf you want to show an example with multiple code blocks and other markdown, just enclose the entire example in 4 backticks (e.g. ````) and use the two curly brace syntax for code blocks within. For example:\n````\n---\ntitle: \"My document\"\n---\n\nSome markdown content.\n\n```{{python}}\n1 + 1\n```\n\nSome additional markdown content.\n\n````"
  },
  {
    "objectID": "docs/computations/execution-options.html#engine-binding",
    "href": "docs/computations/execution-options.html#engine-binding",
    "title": "Execution Options",
    "section": "Engine Binding",
    "text": "Engine Binding\nEarlier we said that the engine used for computations was determined automatically. You may want to customize this—for example you may want to use the Jupyter R kernel rather than Knitr, or you may want to use Knitr with Python code (via reticulate).\nHere are the basic rules for automatic binding:\n\n\n\n\n\n\n\nExtension\nEngine Binding\n\n\n\n\n.qmd\nUse Knitr engine if an {r} code block is discovered within the file\nUse Jupyter engine if an executable code block (e.g. {python}) is discovered within the file. The kernel used is determined based on the language of the first executable code block discovered.\nUse no engine if no executable code blocks are discovered.\n\n\n.ipynb\nJupyter engine\n\n\n.Rmd\nKnitr engine\n\n\n.md\nNo engine\n\n\n\nYou can override the engine used via the engine option. For example:\nengine: jupyter\nengine: knitr\nYou can also specify that no execution engine should be used via engine: markdown.\nThe presence of the knitr or jupyter option will also override the default engine:\nknitr: true\njupyter: python3\nVariations with additional engine-specific options also work to override the default engine:\nknitr:\n  opts_knit:\n    verbose: true\njupyter:\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3"
  },
  {
    "objectID": "docs/computations/jupyter-kernels.html",
    "href": "docs/computations/jupyter-kernels.html",
    "title": "Jupyter Kernels",
    "section": "",
    "text": "The Jupyter kernel used by Quarto is determined using the jupyter metadata option. For example, to use the Xeus Python kernel, do this:\n---\ntitle: \"My Document\"\njupyter: xpython\n---\nNote that you can also provide a full kernelspec, for example:\n---\ntitle: \"My Document\"\njupyter: \n  kernelspec:\n    name: \"xpython\"\n    language: \"python\"\n    display_name: \"Python 3.7 (XPython)\"\n---\nIf no Jupyter kernel is specified, then the kernel is determined by finding an available kernel that supports the language of the first executable code block found within the file (e.g. ```{python}).\n\n\n\n\n\n\nKernels from Conda\n\n\n\nIf you are using a kernel that is contained within an external conda environment you need to take an extra step to make sure it is recognized by Quarto. Please follow the instructions here to make conda managed kernels available:\nhttps://github.com/Anaconda-Platform/nb_conda_kernels#use-with-nbconvert-voila-papermill\nNote that this step is not required if you are merely using conda with Quarto. It applies to using kernels other than the default Python kernel that happen to be installed within a conda environment separate from the one you are using."
  },
  {
    "objectID": "docs/computations/jupyter-kernels.html#kernel-daemon",
    "href": "docs/computations/jupyter-kernels.html#kernel-daemon",
    "title": "Jupyter Kernels",
    "section": "Kernel Daemon",
    "text": "Kernel Daemon\nTo mitigate the start-up time for the Jupyter kernel Quarto keeps a daemon with a running Jupyter kernel alive for each document. This enables subsequent renders to proceed immediately without having to wait for kernel start-up.\nThe purpose of the daemon is to make rendering more responsive during interactive sessions. Accordingly, no daemon is created when documents are rendered without an active tty or when they are part of a batch rendering (e.g. in a Quarto Project).\nNote that Quarto does not use a daemon by default on Windows (as some Windows systems will not allow the socket connection required by the daemon).\nYou can customize this behavior using the daemon execution option. Set it to false to prevent the use of a daemon, or set it to a value (in seconds) to determine the period after which the daemon will timeout (the default is 300 seconds). For example:\nexecute:\n  daemon: false\nexecute:\n  daemon: 60\nNote that if you want to use a daemon on Windows you need to enable it explicitly:\nexecute:\n  daemon: true\n\nCommand Line\nYou can also control use of the Jupyter daemon using the following command line options:\n# use a daemon w/ default timeout (300 sec)\nquarto render document.qmd --execute-daemon\n\n# use a daemon w/ an explicit timeout\nquarto render document.qmd --execute-daemon 60\n\n# prevent use of a daemon\nquarto render document.qmd --no-execute-daemon\nYou can also force an existing daemon to restart using the --execute-daemon-restart command line flag:\nquarto render document.qmd --execute-daemon-restart \nThis might be useful if you suspect that the re-use of notebook sessions is causing an error.\nFinally, you can print extended debugging information about daemon usage (startup, shutdown, connections, etc.) using the --execute-debug flag:\nquarto render document.qmd --execute-debug"
  },
  {
    "objectID": "docs/computations/python.html",
    "href": "docs/computations/python.html",
    "title": "Using Python",
    "section": "",
    "text": "Quarto supports executable Python code blocks within markdown. This allows you to create fully reproducible documents and reports—the Python code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.\nIf you have Python and the jupyter package installed then you have all you need to render documents that contain embedded Python code (if you don’t, we’ll cover this in the installation section below). Next, we’ll cover the basics of creating and rendering documents with Python code blocks.\n\n\nCode blocks that use braces around the language name (e.g. ```{python}) are executable, and will be run by Quarto during render. Here is a simple example:\n---\ntitle: \"matplotlib demo\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\nYou’ll note that there are some special comments at the top of the code block. These are cell level options that make the figure cross-referenceable.\nThis document would result in the following rendered output:\n\nYou can produce a wide variety of output types from executable code blocks, including plots, tabular output from data frames, and plain text output (e.g. printing the results of statistical summaries).\nThere are many options which control the behavior of code execution and output, you can read more about them in the article on Execution Options.\n\n\n\nQuarto will automatically run computations in any markdown document that contains executable code blocks. For example, the example shown above might be rendered to varoius formats with:\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\nQuarto can also render any Jupyter notebook (.ipynb):\nquarto render document.ipynb\nNote that the target file (in this case document.qmd) should always be the very first command line argument.\nNote that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render notebook.ipynb --execute"
  },
  {
    "objectID": "docs/computations/python.html#installation",
    "href": "docs/computations/python.html#installation",
    "title": "Using Python",
    "section": "Installation",
    "text": "Installation\nIf you already have Python 3 and Jupyter installed in your environment, then you should have everything required to render Jupyter notebooks with Python kernels.\nIf you don’t yet have Python 3 on your system, we recommend you install a version using the standard installer from https://www.python.org/downloads/.\nIf you are in a fresh Python 3 environment, installing the jupyter package will provide everything required to execute Jupyter kernels with Quarto:\n\n\n\n\n\n\n\nPkg. Manager\nCommand\n\n\n\n\nPip\n(Windows)\npy -m pip install jupyter\n\n\nPip\n(Mac/Linux)\npython3 -m pip install jupyter\n\n\nConda\nconda install jupyter\n\n\n\nYou can verify that Quarto is configured correctly for Jupyter with:\nquarto check jupyter\nQuarto will select a version of Python using the Python Launcher on Windows or system PATH on MacOS and Linux. You can override the version of Python used by Quarto by setting the QUARTO_PYTHON environment variable."
  },
  {
    "objectID": "docs/computations/python.html#workflow",
    "href": "docs/computations/python.html#workflow",
    "title": "Using Python",
    "section": "Workflow",
    "text": "Workflow\nYou can author Quarto documents that include Python code using any text or notebook editor. No matter what editing tool you use, you’ll always run quarto preview first to setup a live preview of changes in your document. Live preview is available for both HTML and PDF output. For example:\n# preview as html\nquarto preview document.qmd\n\n# preview as pdf\nquarto preview document.qmd --to pdf\n\n# preview a jupyter notebook\nquarto preview document.ipynb\nNote that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render notebook.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Notebook\"\nexecute: \n  enabled: true\n---"
  },
  {
    "objectID": "docs/computations/python.html#vs-code",
    "href": "docs/computations/python.html#vs-code",
    "title": "Using Python",
    "section": "VS Code",
    "text": "VS Code\nThe Quarto Extension for VS Code provides a variety of tools for working with .qmd files in VS Code. The extension integrates directly with the Python Extension to provide the following Python-specific capabilites:\n\nCode completion\nCell execution\nContextual help\n\n\nYou can install the VS Code extension by searching for ‘quarto’ in the extensions panel or from the extension marketplace.\nYou can also use the VS Code notebook editor to create Python notebooks that you will render with Quarto. The next section discusses using notebooks with Quarto in the context of Jupyter Lab, but the same concepts apply to VS Code."
  },
  {
    "objectID": "docs/computations/python.html#jupyter-lab",
    "href": "docs/computations/python.html#jupyter-lab",
    "title": "Using Python",
    "section": "Jupyter Lab",
    "text": "Jupyter Lab\nWe could convert the simple document.qmd we used as an example above to a Jupyter notebook using the quarto convert command. For example:\nquarto convert document.qmd\nIf we open this notebook in Jupyter Lab and execute the cells, here is what we see:\n\nNote that there are three different types of cell here:\n\nThe YAML document options at the top are in a Raw cell.\nThe heading and explanation are in a Markdown cell.\nThe Julia code and its output are in a Code cell.\n\nWhen working in a Jupyter notebook, you can use quarto preview to provide a live preview of your rendered document:\nquarto preview document.ipynb\nThe preview will be updated every time you save the notebook in Jupyter Lab."
  },
  {
    "objectID": "docs/computations/python.html#caching",
    "href": "docs/computations/python.html#caching",
    "title": "Using Python",
    "section": "Caching",
    "text": "Caching\nJupyter Cache enables you to cache all of the cell outputs for a notebook. If any of the cells in the notebook change then all of the cells will be re-executed.\nTo use Jupyter Cache you’ll want to first install the jupyter-cache package:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip install jupyter-cache\n\n\nMac/Linux\npython3 -m pip install jupyter-cache\n\n\n\nTo enable the cache for a document, add the cache option. For example:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  cache: true\n---\nYou can also specify caching at the project level. For example, within a project file:\nproject:\n  type: website\n  \nformat:\n  html:\n    theme: united\n    \nexecute:\n  cache: true\nNote that changes within a document that aren’t within code cells (e.g. markdown narrative) do not invalidate the document cache. This makes caching a very convenient option when you are working exclusively on the prose part of a document.\nJupyter Cache include a jcache command line utility that you can use to analyze and manage the notebook cache. See the Jupyter Cache documentation for additional details.\n\nRendering\nYou can use quarto render command line options to control caching behavior without changing the document’s code. Use options to force the use of caching on all chunks, disable the use of caching on all chunks (even if it’s specified in options), or to force a refresh of the cache even if it has not been invalidated:\n# use a cache (even if not enabled in options)\nquarto render example.qmd --cache \n\n# don't use a cache (even if enabled in options)\nquarto render example.qmd --no-cache \n\n# use a cache and force a refresh \nquarto render example.qmd --cache-refresh \n\n\nAlternatives\nIf you are using caching to mitigate long render-times, there are some alternatives you should consider alongside caching.\n\nDisabling Execution\nIf you are working exclusively with prose / markdown, you may want to disable execution entirely. Do this by specifying the enabled: false execute option For example:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  enabled: false\n---\nNote that if you are authoring using Jupyter .ipynb notebooks (as opposed to plain-text .qmd files) then this is already the default behavior: no execution occurs when you call quarto render (rather, execution occurs as you work within the notebook).\n\n\nFreezing Execution\nIf you are working within a project and your main concern is the cumulative impact of rendering many documents at once, consider using the freeze option.\nYou can use the freeze option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\nexecute:\n  freeze: true  # never re-render during project render\nexecute:\n  freeze: auto  # re-render only when source changes\nNote that freeze controls whether execution occurs during global project renders. If you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\nLearn more about using freeze with projects in the article on managing project execution."
  },
  {
    "objectID": "docs/computations/python.html#kernel-daemon",
    "href": "docs/computations/python.html#kernel-daemon",
    "title": "Using Python",
    "section": "Kernel Daemon",
    "text": "Kernel Daemon\nTo mitigate the start-up time for the Jupyter kernel Quarto keeps a daemon with a running Jupyter kernel alive for each document. This enables subsequent renders to proceed immediately without having to wait for kernel start-up.\nThe purpose of the daemon is to make render more responsive during interactive sessions. Accordingly, no daemon is created when documents are rendered without an active tty or when they are part of a batch rendering (e.g. in a Quarto Project).\nNote that Quarto does not use a daemon by default on Windows (as some Windows systems will not allow the socket connection required by the daemon).\nYou can customize this behavior using the daemon execution option. Set it to false to prevent the use of a daemon, or set it to a value (in seconds) to determine the period after which the daemon will timeout (the default is 300 seconds). For example:\nexecute:\n  daemon: false\nexecute:\n  daemon: 60\nNote that if you want to use a daemon on Windows you need to enable it explicitly:\nexecute:\n  daemon: true\n\nCommand Line\nYou can also control use of the Jupyter daemon using the following command line options:\n# use a daemon w/ default timeout (300 sec)\nquarto render document.qmd --execute-daemon\n\n# use a daemon w/ an explicit timeout\nquarto render document.qmd --execute-daemon 60\n\n# prevent use of a daemon\nquarto render document.qmd --no-execute-daemon\nYou can also force an existing daemon to restart using the --execute-daemon-restart command line flag:\nquarto render document.qmd --execute-daemon-restart \nThis might be useful if you suspect that the re-use of notebook sessions is causing an error.\nFinally, you can print extended debugging information about daemon usage (startup, shutdown, connections, etc.) using the --execute-debug flag:\nquarto render document.qmd --execute-debug"
  },
  {
    "objectID": "docs/computations/parameters.html",
    "href": "docs/computations/parameters.html",
    "title": "Parameters",
    "section": "",
    "text": "You may have a set of parameters that are used to create different variations of a report. For example:\n\nShowing results for a specific geographic location.\nRunning a report that covers a specific time period.\nRunning a single analysis multiple times for different assumptions.\n\nThis article describes how to define and use computational parameters with Quarto."
  },
  {
    "objectID": "docs/computations/parameters.html#definition",
    "href": "docs/computations/parameters.html#definition",
    "title": "Parameters",
    "section": "Definition",
    "text": "Definition\nAdding parameter definitions to a document works differently depending on whether you are using the Jupyter or Knitr engine.\n\nJupyter\nFor Jupyter, Quarto uses the same syntax for defining parameters as Papermill. To parameterize a notebook, designate a cell with the tag parameters and provide appropriate default values:\n```{python}\n#| tags: [parameters]\n\nalpha = 0.1\nratio = 0.1\n```\nWhen the notebook is executed with a set of new parameters a cell is injected which overrides these defaults as appropriate.\n\n\nKnitr\nFor Knitr, the standard Knitr params YAML option is used to define parameters. For example:\n---\ntitle: \"My Document\"\nparams:\n  alpha: 0.1\n  ratio: 0.1\n---"
  },
  {
    "objectID": "docs/computations/parameters.html#rendering",
    "href": "docs/computations/parameters.html#rendering",
    "title": "Parameters",
    "section": "Rendering",
    "text": "Rendering\nTo render using different parameters you can pass them on the command line using the -P flag:\nquarto render notebook.ipynb -P alpha:0.2 -P ratio:0.3\nAlternatively you can create a YAML file that defines the parameter values you want to render with, then call quarto render with the --execute-params flag:\nquarto render notebook.ipynb --execute-params params.yml"
  },
  {
    "objectID": "docs/computations/caching.html",
    "href": "docs/computations/caching.html",
    "title": "Caching",
    "section": "",
    "text": "When rendering documents with embedded computations becomes time-consuming, you may want to consider adding an execution cache, which will store the results of cell executions so they aren’t re-executed with every document render.\nQuarto integrates with the Jupyter Cache and Knitr Cache to to cache time consuming code chunks. These two caching facilities distinct capabilities, and we’ll cover each in detail below."
  },
  {
    "objectID": "docs/computations/caching.html#jupyter-cache",
    "href": "docs/computations/caching.html#jupyter-cache",
    "title": "Caching",
    "section": "Jupyter Cache",
    "text": "Jupyter Cache\nJupyter Cache enables you to cache all of the cell outputs for a notebook. If any of the cells in the notebook change then all of the cells will be re-executed.\nTo use Jupyter Cache you’ll want to first install the jupyter-cache package:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip install jupyter-cache\n\n\nMac/Linux\npython3 -m pip install jupyter-cache\n\n\n\nTo enable the cache for a document, add the cache option. For example:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  cache: true\njupyter: python3\n---\nYou can also specify caching at the project level. For example, within a project file:\nproject:\n  type: website\n  \nformat:\n  html:\n    theme: united\n    \nexecute:\n  cache: true\nNote that changes within a document that aren’t within code cells (e.g. markdown narrative) do not invalidate the document cache. This makes caching a very convenient option when you are working exclusively on the prose part of a document.\nJupyter Cache include a jcache command line utility that you can use to analyze and manage the notebook cache. See the Jupyter Cache documentation for additional details."
  },
  {
    "objectID": "docs/computations/caching.html#knitr-cache",
    "href": "docs/computations/caching.html#knitr-cache",
    "title": "Caching",
    "section": "Knitr Cache",
    "text": "Knitr Cache\nThe Knitr Cache operates at the level of individual cells rather than the entire document. While this can be very convenient, it also introduced some special requirements around managing the dependencies between cells.\nYou can enable the Knitr cache at the document or project level using standard YAML options:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  cache: true\n---\nYou can also enable caching on a per-cell basis (in this you would not set the document level option):\n```{r}\n#| cache: true\n\nsummary(cars)\n```\nThere are a variety of other cell-level options that affect Knitr caching behavior. You can learn about them in the Knitr cell options reference. Another excellent resource is Yihui Xie’s article on cache invalidation."
  },
  {
    "objectID": "docs/computations/caching.html#rendering",
    "href": "docs/computations/caching.html#rendering",
    "title": "Caching",
    "section": "Rendering",
    "text": "Rendering\nYou can use `quarto render` command line options to control caching behavior without changing the document’s code. Use options to force the use of caching on all chunks, disable the use of caching on all chunks (even if it’s specified in options), or to force a refresh of the cache even if it has not been invalidated:\n# use a cache (even if the document options don't enable it)\nquarto render example.qmd --cache \n\n# don't use a cache (even if the documentation options enable it)\nquarto render example.qmd --no-cache \n\n# use a cache and force a refresh (even if the cells haven't changed)\nquarto render example.qmd --cache-refresh"
  },
  {
    "objectID": "docs/computations/caching.html#alternatives",
    "href": "docs/computations/caching.html#alternatives",
    "title": "Caching",
    "section": "Alternatives",
    "text": "Alternatives\nIf you are using caching to mitigate long render-times, there are some alternatives you should consider alongside caching.\n\nDisabling Execution\nIf you are working exclusively with prose / markdown, you may want to disable execution entirely. Do this by specifying the enabled: false execute option For example:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  enabled: false\n---\nNote that if you are authoring using Jupyter .ipynb notebooks (as opposed to plain-text .qmd files) then this is already the default behavior: no execution occurs when you call quarto render (rather, execution occurs as you work within the notebook).\n\n\nFreezing Execution\nIf you are working within a project and your main concern is the cumulative impact of rendering many documents at once, consider using the freeze option.\nYou can use the freeze option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\nexecute:\n  freeze: true  # never re-render during project render\nexecute:\n  freeze: auto  # re-render only when source changes\nNote that freeze controls whether execution occurs during global project renders. If you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\nLearn more about using freeze with projects in the article on managing project execution."
  },
  {
    "objectID": "docs/computations/r.html",
    "href": "docs/computations/r.html",
    "title": "Using R",
    "section": "",
    "text": "Quarto is a multi-language, next generation version of R Markdown from RStudio, with many new new features and capabilities. Like R Markdown, Quarto uses Knitr to execute R code, and is therefore able to render most existing Rmd files without modification.\nWe’ll start by covering the basics of Quarto, then delve into the differences between Quarto and R Markdown in the sections on Chunk Options and Output Formats below.\n\n\nCode blocks that use braces around the language name (e.g. ```{r}) are executable, and will be run by Quarto during render. Here is a simple example:\n---\ntitle: \"ggplot2 demo\"\nauthor: \"Norah Jones\"\ndate: \"5/22/2021\"\nformat: \n  html:\n    code-fold: true\n---\n\n## Air Quality\n\n@fig-airquality further explores the impact of temperature on ozone level.\n\n```{r}\n#| label: fig-airquality\n#| fig-cap: Temperature and ozone level.\n#| warning: false\n\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\"\n)\n```\nYou’ll note that there are some special comments at the top of the code block. These are cell level options that make the figure cross-referenceable.\nThis document results in the following rendered output:\n\nYou can produce a wide variety of output types from executable code blocks, including plots, tabular output from data frames, and plain text output (e.g. printing the results of statistical summaries).\nThere are many options which control the behavior of code execution and output, you can read more about them in the article on Execution Options.\n\n\n\nWhen a Quarto document is rendered, R code blocks are automatically executed. You can render Quarto documents in a variety of ways:\n\nUsing the Render button in RStudio:\n\nFrom the system shell using the quarto render command:\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\nNote that the target file (in this case document.qmd) should always be the very first command line argument.\nFrom the R console using the quarto R package:\nlibrary(quarto)\nquarto_render(\"document.qmd\") # defaults to html\nquarto_render(\"document.qmd\", output_format = \"pdf\")\nNote that the Quarto R package is a convenience for command line rendering from R, and is not required for using Quarto with R."
  },
  {
    "objectID": "docs/computations/r.html#installation",
    "href": "docs/computations/r.html#installation",
    "title": "Using R",
    "section": "Installation",
    "text": "Installation\nTo use Quarto with R, you should install the rmarkdown R package:\ninstall.packages(\"rmarkdown\")\nInstallation of the rmarkdown package will also install the knitr package so you will have everything required to render documents containing R code.\nQuarto will select a version of R by looking on the system PATH. In addition, on Windows when R is not found on the PATH, the registry will be scanned for the current R version. You can override the version of R used by Quarto by setting the QUARTO_R environment variable."
  },
  {
    "objectID": "docs/computations/r.html#rstudio",
    "href": "docs/computations/r.html#rstudio",
    "title": "Using R",
    "section": "RStudio",
    "text": "RStudio\nThe latest release of RStudio (v2022.02) includes support for editing and preview of Quarto documents.\nIf you are using Quarto within RStudio it is strongly recommended that you use this version (the documentation below assumes you are using this build).\nYou can download RStudio v2022.02 from https://rstudio.com/products/rstudio/download/.\n\n\n\n\n\n\nEnabling Quarto Features\n\n\n\n\n\n\n\n\n\nIf you have already installed the Quarto CLI then RStudio will detect this and enable Quarto features automatically. Alternatively, there is a version of Quarto built-in to RStudio that you can activate from R Markdown Preferences.\n\n\n\n\n\n\nCreating Documents\nUse the File : New File : Quarto Document… command to create new Quarto documents:\n\n\n\nRender and Preview\nUse the Render button to preview documents as you edit them:\n\nIf you prefer to automatically render whenever you save you can check the Render on Save option on the editor toolbar.\nThe preview will appear alongside the editor:\n\nThe preview will update whenever you re-render the document. Side-by-side preview works for both HTML and PDF output.\n\n\nProjects\nIf you want to create a new project for a Quarto document or set of documents, use the File : New Project… command, specify New Directory, then choose Quarto Project:\n\nYou can use this UI to create both vanilla projects as well as websites and books. Options are also provided for creating a git repository and initializing an renv environment for the project."
  },
  {
    "objectID": "docs/computations/r.html#vs-code",
    "href": "docs/computations/r.html#vs-code",
    "title": "Using R",
    "section": "VS Code",
    "text": "VS Code\nThe Quarto Extension for VS Code provides a variety of tools for working with .qmd files in VS Code. The extension integrates directly with the R Extension to provide the following R-specific capabilites:\n\nCode completion\nCell execution\nContextual help\n\n\nYou can install the VS Code extension by searching for ‘quarto’ in the extensions panel or from the extension marketplace.\nWhen using VS Code there is not yet an integrated Render button for previewing documents. Rather, you should execute the quarto preview command from the VS Code terminal:\nquarto preview document.qmd\nThe document will be re-rendered and the preview updated whenever you make changes to it in VS Code."
  },
  {
    "objectID": "docs/computations/r.html#emacs",
    "href": "docs/computations/r.html#emacs",
    "title": "Using R",
    "section": "Emacs",
    "text": "Emacs\nThe quarto-mode MELPA package is an Emacs mode for editing Quarto documents. Install quarto-mode as follows:\nM-x refresh-package-contents\nM-x install-package\n  quarto-mode\nIf you have ESS, quarto-mode will make use of it for executing R code.\nUse M-x quarto-preview to start a quarto preview server that watches quarto content for changes and automatically refreshes it. If the current buffer has an associated file that exists in a quarto project, the command will preview the entire project. Otherwise, it will preview the specific file."
  },
  {
    "objectID": "docs/computations/r.html#chunk-options",
    "href": "docs/computations/r.html#chunk-options",
    "title": "Using R",
    "section": "Chunk Options",
    "text": "Chunk Options\nOne important difference between R Markdown documents and Quarto documents is that in Quarto chunk options are typically included in special comments at the top of code chunks rather than within the line that begins the chunk. For example:\n```{r}\n#| echo: false\n#| fig-cap: \"Air Quality\"\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\nQuarto uses this approach to both better accommodate longer options like fig-cap, fig-subcap, and fig-alt as well as to make it straightforward to edit chunk options within more structured editors that don’t have an easy way to edit chunk metadata (e.g. most traditional notebook UIs).\n\n\n\n\n\n\nNote\n\n\n\nNote that if you prefer it is still possible to include chunk options on the first line (e.g. ```{r, echo = FALSE}). That said, we recommend using the comment-based syntax to make documents more portable and consistent across execution engines.\n\n\nChunk options included this way use YAML syntax rather than R syntax for consistency with options provided in YAML front matter. You can still however use R code for option values by prefacing them with !expr. For example:\n#| fig-cap: !expr paste(\"Air\", \"Quality\")"
  },
  {
    "objectID": "docs/computations/r.html#output-formats",
    "href": "docs/computations/r.html#output-formats",
    "title": "Using R",
    "section": "Output Formats",
    "text": "Output Formats\nAnother difference between R Markdown and Quarto is related to output formats. Quarto includes many more built in output formats (and many more options for customizing each format). Quarto also has native features for special project types like Websites, Books, and Blogs (rather than relying on external packages).\nTo use a format in Quarto you use the format key rather than the output key as you did in R Markdown. Here’s a comparison of equivalent format specifications:\n\n\n\nR Markdown\ntitle: \"My Document\"\noutput:\n  html_document:\n    toc: true\n    number_sections: true\n    css: styles.css\n\n\nQuarto\ntitle: \"My Document\"\nformat:\n  html:\n    toc: true\n    number-sections: true\n    css: styles.css\n\n\n\nOne source of the difference in syntax is that Quarto is more closely aligned with Pandoc format names and options (thus the use of - as a word separator rather than _).\nSee the listing of all supported formats along with their user guides and reference pages for more details.\nSee the articles on creating Websites, Books, and Blogs for additional details on more advanced output formats."
  },
  {
    "objectID": "docs/computations/r.html#knitr-options",
    "href": "docs/computations/r.html#knitr-options",
    "title": "Using R",
    "section": "Knitr Options",
    "text": "Knitr Options\nIf you are using the Knitr cell execution engine you can specify default document-level Knitr options in YAML. For example:\n---\ntitle: \"My Document\"\nformat: html\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: \"#>\"\n---\nYou can additionally specify global Knitr options using opts_knit.\nIn the example above we establish default Knitr options for a single document. You can also add shared knitr options to a project-wide _quarto.yml file or a project-directory scoped _metadata.yml file."
  },
  {
    "objectID": "docs/computations/r.html#caching",
    "href": "docs/computations/r.html#caching",
    "title": "Using R",
    "section": "Caching",
    "text": "Caching\nThe Knitr Cache operates at the level of individual cells rather than the entire document. While this can be very convenient, it also introduced some special requirements around managing the dependencies between cells.\nYou can enable the Knitr cache at the document or project level using standard YAML options:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  cache: true\n---\nYou can also enable caching on a per-cell basis (in this you would not set the document level option):\n```{r}\n#| cache: true\n\nsummary(cars)\n```\nThere are a variety of other cell-level options that affect Knitr caching behavior. You can learn about them in the Knitr cell options reference. Another excellent resource is Yihui Xie’s article on cache invalidation.\n\nRendering\nYou can use quarto render command line options to control caching behavior without changing the document’s code. Use options to force the use of caching on all chunks, disable the use of caching on all chunks (even if it’s specified in options), or to force a refresh of the cache even if it has not been invalidated:\n# use a cache (even if not enabled in options)\nquarto render example.qmd --cache \n\n# don't use a cache (even if enabled in options)\nquarto render example.qmd --no-cache \n\n# use a cache and force a refresh \nquarto render example.qmd --cache-refresh \n\n\nAlternatives\nIf you are using caching to mitigate long render-times, there are some alternatives you should consider alongside caching.\n\nDisabling Execution\nIf you are working exclusively with prose / markdown, you may want to disable execution entirely. Do this by specifying the enabled: false execute option For example:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  enabled: false\n---\nNote that if you are authoring using Jupyter .ipynb notebooks (as opposed to plain-text .qmd files) then this is already the default behavior: no execution occurs when you call quarto render (rather, execution occurs as you work within the notebook).\n\n\nFreezing Execution\nIf you are working within a project and your main concern is the cumulative impact of rendering many documents at once, consider using the freeze option.\nYou can use the freeze option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\nexecute:\n  freeze: true  # never re-render during project render\nexecute:\n  freeze: auto  # re-render only when source changes\nNote that freeze controls whether execution occurs during global project renders. If you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\nLearn more about using freeze with projects in the article on managing project execution."
  },
  {
    "objectID": "docs/computations/julia.html",
    "href": "docs/computations/julia.html",
    "title": "Using Julia",
    "section": "",
    "text": "Quarto supports executable Julia code blocks within markdown. This allows you to create fully reproducible documents and reports—the Julia code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.\nQuarto executes Julia code using the IJulia Jupyter kernel. Below we’ll describe how to install IJulia and related requirements but first we’ll cover the basics of creating and rendering documents with Julia code blocks.\n\n\nCode blocks that use braces around the language name (e.g. ```{julia}) are executable, and will be run by Quarto during render. Here is a simple example:\n---\ntitle: \"Plots Demo\"\nauthor: \"Norah Jones\"\ndate: \"5/22/2021\"\nformat:\n  html:\n    code-fold: true\njupyter: julia-1.7\n---\n\n## Parametric Plots\n\nPlot function pair (x(u), y(u)). \nSee @fig-parametric for an example.\n\n```{julia}\n#| label: fig-parametric\n#| fig-cap: \"Parametric Plots\"\n\nusing Plots\n\nplot(sin, \n     x->sin(2x), \n     0, \n     2π, \n     leg=false, \n     fill=(0,:lavender))\n```\nYou’ll note that there are some special comments at the top of the code block. These are cell level options that make the figure cross-referenceable.\nThis document would result in the following rendered output:\n\nYou can produce a wide variety of output types from executable code blocks, including plots, tabular output from data frames, and plain text output (e.g. printing the results of statistical summaries).\nThere are many options which control the behavior of code execution and output, you can read more about them in the article on Execution Options.\n\n\n\nQuarto will automatically run computations in any markdown document that contains executable code blocks. For example, the example shown above might be rendered to varoius formats with:\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\nQuarto can also render any Jupyter notebook (.ipynb):\nquarto render document.ipynb\nNote that the target file (in this case document.qmd) should always be the very first command line argument.\nNote that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render notebook.ipynb --execute"
  },
  {
    "objectID": "docs/computations/julia.html#installation",
    "href": "docs/computations/julia.html#installation",
    "title": "Using Julia",
    "section": "Installation",
    "text": "Installation\nIn order to render documents with embedded Julia code you’ll need to install the following components:\n\nJupyter\nIJulia\nRevise.jl\n\nWe’ll cover each of these in turn below.\n\nJupyter\nIf you already have Python 3 and Jupyter installed in your environment, then proceed to the section below on installing the IJulia Kernel.\nIf you don’t yet have Python 3 on your system, we recommend you install a version using the standard installer from https://www.python.org/downloads/.\nIf you are in a fresh Python 3 environment, installing the jupyter package will provide everything required to execute Jupyter kernels with Quarto:\n\n\n\n\n\n\n\nPkg. Manager\nCommand\n\n\n\n\nPip\n(Windows)\npy -m pip install jupyter\n\n\nPip\n(Mac/Linux)\npython3 -m pip install jupyter\n\n\nConda\nconda install jupyter\n\n\n\nYou can verify that Quarto is configured correctly for Jupyter with:\nquarto check jupyter\nQuarto will select a version of Python using the Python Launcher on Windows or system PATH on MacOS and Linux. You can override the version of Python used by Quarto by setting the QUARTO_PYTHON environment variable.\n\n\nIJulia\nIJulia is a Julia-language execution kernel for Jupyter. You can install IJulia from within the Julia REPL as follows:\nusing Pkg\nPkg.add(\"IJulia\")\nOnce you’ve installed IJulia Quarto has the basic components required to execute Julia cells.\n\n\nRevise.jl\nIn addition to IJulia, you’ll want to install Revise.jl and configure it for use with IJulia. Revise.jl is a library that helps you keep your Julia sessions running longer, reducing the need to restart when you make changes to code.\nQuarto maintains a persistent kernel daemon for each document to mitigate Jupyter start up time during iterative work. Revise.jl will make this persistent process robust in the face of package updates, git branch checkouts, etc. Install Revise.jl with:\nusing Pkg\nPkg.add(\"Revise\")\nTo configure Revise to launch automatically within IJulia, create a .julia/config/startup_ijulia.jl file with the contents:\ntry\n  @eval using Revise\ncatch e\n  @warn \"Revise init\" exception=(e, catch_backtrace())\nend\nYou can learn more about Revise.jl at https://timholy.github.io/Revise.jl."
  },
  {
    "objectID": "docs/computations/julia.html#workflow",
    "href": "docs/computations/julia.html#workflow",
    "title": "Using Julia",
    "section": "Workflow",
    "text": "Workflow\nYou can author Quarto documents that include Julia code using any text or notebook editor. No matter what editing tool you use, you’ll always run quarto preview first to setup a live preview of changes in your document. Live preview is available for both HTML and PDF output. For example:\n# preview as html\nquarto preview document.qmd\n\n# preview as pdf\nquarto preview document.qmd --to pdf\n\n# preview a jupyter notebook\nquarto preview document.ipynb\nNote that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render notebook.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Notebook\"\nexecute: \n  enabled: true\n---"
  },
  {
    "objectID": "docs/computations/julia.html#vs-code",
    "href": "docs/computations/julia.html#vs-code",
    "title": "Using Julia",
    "section": "VS Code",
    "text": "VS Code\nThe Quarto Extension for VS Code provides a variety of tools for working with .qmd files in VS Code. The extension integrates directly with the Julia Extension to provide the following Julia-specific capabilites:\n\nCode completion\nCell execution\nContextual help\n\n\nYou can install the VS Code extension by searching for ‘quarto’ in the extensions panel or from the extension marketplace.\nYou can also use the VS Code notebook editor to create Julia notebooks that you will render with Quarto. The next section discusses using notebooks with Quarto in the context of Jupyter Lab, but the same concepts apply to VS Code."
  },
  {
    "objectID": "docs/computations/julia.html#jupyter-lab",
    "href": "docs/computations/julia.html#jupyter-lab",
    "title": "Using Julia",
    "section": "Jupyter Lab",
    "text": "Jupyter Lab\nWe could convert the simple document.qmd we used as an example above to a Jupyter notebook using the quarto convert command. For example:\nquarto convert document.qmd\nIf we open this notebook in Jupyter Lab and execute the cells, here is what we see:\n\nNote that there are three different types of cell here:\n\nThe YAML document options at the top are in a Raw cell.\nThe heading and explanation are in a Markdown cell.\nThe Julia code and its output are in a Code cell.\n\nWhen working in a Jupyter notebook, you can use quarto preview to provide a live preview of your rendered document:\nquarto preview document.ipynb\nThe preview will be updated every time you save the notebook in Jupyter Lab."
  },
  {
    "objectID": "docs/computations/julia.html#caching",
    "href": "docs/computations/julia.html#caching",
    "title": "Using Julia",
    "section": "Caching",
    "text": "Caching\nJupyter Cache enables you to cache all of the cell outputs for a notebook. If any of the cells in the notebook change then all of the cells will be re-executed.\nTo use Jupyter Cache you’ll want to first install the jupyter-cache package:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip install jupyter-cache\n\n\nMac/Linux\npython3 -m pip install jupyter-cache\n\n\n\nTo enable the cache for a document, add the cache option. For example:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  cache: true\n---\nYou can also specify caching at the project level. For example, within a project file:\nproject:\n  type: website\n  \nformat:\n  html:\n    theme: united\n    \nexecute:\n  cache: true\nNote that changes within a document that aren’t within code cells (e.g. markdown narrative) do not invalidate the document cache. This makes caching a very convenient option when you are working exclusively on the prose part of a document.\nJupyter Cache include a jcache command line utility that you can use to analyze and manage the notebook cache. See the Jupyter Cache documentation for additional details.\n\nRendering\nYou can use quarto render command line options to control caching behavior without changing the document’s code. Use options to force the use of caching on all chunks, disable the use of caching on all chunks (even if it’s specified in options), or to force a refresh of the cache even if it has not been invalidated:\n# use a cache (even if not enabled in options)\nquarto render example.qmd --cache \n\n# don't use a cache (even if enabled in options)\nquarto render example.qmd --no-cache \n\n# use a cache and force a refresh \nquarto render example.qmd --cache-refresh \n\n\nAlternatives\nIf you are using caching to mitigate long render-times, there are some alternatives you should consider alongside caching.\n\nDisabling Execution\nIf you are working exclusively with prose / markdown, you may want to disable execution entirely. Do this by specifying the enabled: false execute option For example:\n---\ntitle: \"My Document\"\nformat: html\nexecute: \n  enabled: false\n---\nNote that if you are authoring using Jupyter .ipynb notebooks (as opposed to plain-text .qmd files) then this is already the default behavior: no execution occurs when you call quarto render (rather, execution occurs as you work within the notebook).\n\n\nFreezing Execution\nIf you are working within a project and your main concern is the cumulative impact of rendering many documents at once, consider using the freeze option.\nYou can use the freeze option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\nexecute:\n  freeze: true  # never re-render during project render\nexecute:\n  freeze: auto  # re-render only when source changes\nNote that freeze controls whether execution occurs during global project renders. If you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\nLearn more about using freeze with projects in the article on managing project execution."
  },
  {
    "objectID": "docs/computations/julia.html#kernel-selection",
    "href": "docs/computations/julia.html#kernel-selection",
    "title": "Using Julia",
    "section": "Kernel Selection",
    "text": "Kernel Selection\nYou’ll note in our first example that we specified the use of the julia-1.7 kernel explicitly in our document options (shortened for brevity):\n---\ntitle: \"StatsPlots Demo\"\njupyter: julia-1.7\n---\nIf no jupyter kernel is explicitly specified, then Quarto will attempt to automatically discover a kernel on the system that supports Julia.\nYou can discover the available Jupyter kernels on your system using the quarto check command:\nquarto check jupyter"
  },
  {
    "objectID": "docs/computations/julia.html#kernel-daemon",
    "href": "docs/computations/julia.html#kernel-daemon",
    "title": "Using Julia",
    "section": "Kernel Daemon",
    "text": "Kernel Daemon\nTo mitigate the start-up time for the Jupyter kernel Quarto keeps a daemon with a running Jupyter kernel alive for each document. This enables subsequent renders to proceed immediately without having to wait for kernel start-up.\nThe purpose of the daemon is to make render more responsive during interactive sessions. Accordingly, no daemon is created when documents are rendered without an active tty or when they are part of a batch rendering (e.g. in a Quarto Project).\nNote that Quarto does not use a daemon by default on Windows (as some Windows systems will not allow the socket connection required by the daemon).\nYou can customize this behavior using the daemon execution option. Set it to false to prevent the use of a daemon, or set it to a value (in seconds) to determine the period after which the daemon will timeout (the default is 300 seconds). For example:\nexecute:\n  daemon: false\nexecute:\n  daemon: 60\nNote that if you want to use a daemon on Windows you need to enable it explicitly:\nexecute:\n  daemon: true\n\nCommand Line\nYou can also control use of the Jupyter daemon using the following command line options:\n# use a daemon w/ default timeout (300 sec)\nquarto render document.qmd --execute-daemon\n\n# use a daemon w/ an explicit timeout\nquarto render document.qmd --execute-daemon 60\n\n# prevent use of a daemon\nquarto render document.qmd --no-execute-daemon\nYou can also force an existing daemon to restart using the --execute-daemon-restart command line flag:\nquarto render document.qmd --execute-daemon-restart \nThis might be useful if you suspect that the re-use of notebook sessions is causing an error.\nFinally, you can print extended debugging information about daemon usage (startup, shutdown, connections, etc.) using the --execute-debug flag:\nquarto render document.qmd --execute-debug"
  },
  {
    "objectID": "docs/presentations/powerpoint.html",
    "href": "docs/presentations/powerpoint.html",
    "title": "PowerPoint",
    "section": "",
    "text": "You can create PowerPoint presentations using the pptx format. PowerPoint presentations support core presentation features like incremental bullets, 2-column layouts, and speaker notes, and can also be rendered using custom PowerPoint templates.\nSee the PowerPoint format reference for a complete list of all options available for PowerPoint output."
  },
  {
    "objectID": "docs/presentations/powerpoint.html#creating-slides",
    "href": "docs/presentations/powerpoint.html#creating-slides",
    "title": "PowerPoint",
    "section": "Creating Slides",
    "text": "Creating Slides\nIn markdown, slides are delineated using headings. For example, here is a simple slide show with two slides (each defined with a level 2 heading (##):\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: pptx\n---\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nYou can also divide slide shows into sections with title slides using a level 1 header (#). For example:\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: pptx\n---\n\n# In the morning\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Breakfast\n\n- Eat eggs\n- Drink coffee\n\n# In the evening\n\n## Dinner\n\n- Eat spaghetti\n- Drink wine\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nFinally, you can also delineate slides using horizontal rules (for example, if you have a slide without a title):\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: pptx\n---\n\n- Turn off alarm\n- Get out of bed\n\n---\n\n- Get in bed\n- Count sheep\nThe examples above all use level 2 headings for slides and level 1 headings for sections/title slides. You can customize this using the slide-level option (See the Pandoc documentation on structuring the slide show for additional details."
  },
  {
    "objectID": "docs/presentations/powerpoint.html#incremental-lists",
    "href": "docs/presentations/powerpoint.html#incremental-lists",
    "title": "PowerPoint",
    "section": "Incremental Lists",
    "text": "Incremental Lists\nBy default number and bullet lists within slides are displayed all at once. You can override this globally using the incremental option. For example:\ntitle: \"My Presentation\"\nformat:\n  pptx:\n    incremental: true   \nYou can also explicitly make any list incremental or non-incremental by surrounding it in a div with an explicit class that determines the mode. To make a list incremental do this:\n::: {.incremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::\nTo make a list non-incremental do this:\n::: {.nonincremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::"
  },
  {
    "objectID": "docs/presentations/powerpoint.html#multiple-columns",
    "href": "docs/presentations/powerpoint.html#multiple-columns",
    "title": "PowerPoint",
    "section": "Multiple Columns",
    "text": "Multiple Columns\nTo put material in side by side columns, you can use a native div container with class .columns, containing two or more div containers with class .column and a width attribute:\n:::: {.columns}\n\n::: {.column width=\"40%\"}\ncontents...\n:::\n\n::: {.column width=\"60%\"}\ncontents...\n:::\n\n::::"
  },
  {
    "objectID": "docs/presentations/powerpoint.html#speaker-notes",
    "href": "docs/presentations/powerpoint.html#speaker-notes",
    "title": "PowerPoint",
    "section": "Speaker Notes",
    "text": "Speaker Notes\nYou can add speaker notes to a slide using a div with class .notes. For example:\n## Slide with speaker notes\n\nSlide content\n\n::: {.notes}\nSpeaker notes go here.\n:::"
  },
  {
    "objectID": "docs/presentations/powerpoint.html#powerpoint-templates",
    "href": "docs/presentations/powerpoint.html#powerpoint-templates",
    "title": "PowerPoint",
    "section": "PowerPoint Templates",
    "text": "PowerPoint Templates\nBy default PowerPoint output uses a fairly plain looking template. You can customize what template is used via the reference-doc option. For example:\n---\ntitle: \"Presentation\"\nformat:\n  pptx:\n    reference-doc: template.pptx\n---\nNearly all templates included with recent versions of PowerPoint (either with .pptx or .potx extension) are known to work, as are most templates derived from these.\nThe specific requirement is that the template should contain layouts with the following names (as seen within PowerPoint, click on Layout under the Home menu to check):\n\nTitle Slide\nTitle and Content\nSection Header\nTwo Content\nComparison\nContent with Caption\nBlank\n\nFor each name, the first layout found with that name will be used. If no layout is found with one of the names, Pandoc will output a warning and use the layout with that name from the default reference-doc instead.\n\nCreating a Template\nTo create a template from scratch, start with the default PowerPoint template as follows:\nquarto pandoc -o template.pptx --print-default-data-file reference.pptx \nThen edit the template.pptx file within PowerPoint as desired, and use it as the value for reference-doc (as shown above) when rendering your slides:"
  },
  {
    "objectID": "docs/presentations/powerpoint.html#slide-layouts",
    "href": "docs/presentations/powerpoint.html#slide-layouts",
    "title": "PowerPoint",
    "section": "Slide Layouts",
    "text": "Slide Layouts\nWhen creating slides, the pptx writer chooses from a number of pre-defined layouts, based on the content of the slide:\n\nTitle Slide\n\nThis layout is used for the initial slide, which is generated and filled from the metadata fields date, author, and title, if they are present.\n\nSection Header\n\nThis layout is used for what pandoc calls “title slides”, i.e. slides which start with a header which is above the slide level in the hierarchy.\n\nTwo Content\n\nThis layout is used for two-column slides, i.e. slides containing a div with class columns which contains at least two divs with class column.\n\nComparison\n\nThis layout is used instead of “Two Content” for any two-column slides in which at least one column contains text followed by non-text (e.g. an image or a table).\n\nContent with Caption\n\nThis layout is used for any non-two-column slides which contain text followed by non-text (e.g. an image or a table).\n\nBlank\n\nThis layout is used for any slides which only contain blank content, e.g. a slide containing only speaker notes, or a slide containing only a non-breaking space.\n\nTitle and Content\n\nThis layout is used for all slides which do not match the criteria for another layout.\n\n\nThese layouts are chosen from the default pptx reference doc included with Pandoc, unless an alternative reference doc is specified using reference-doc."
  },
  {
    "objectID": "docs/presentations/powerpoint.html#background-images",
    "href": "docs/presentations/powerpoint.html#background-images",
    "title": "PowerPoint",
    "section": "Background Images",
    "text": "Background Images\nTo provide a common background image for multiple slides in a PowerPoint presentation, include the background image within the relevant slide layouts of a custom PowerPoint template (see Creating a Template for details on creating templates).\nTo add a background image to an individual slide, add the background-image attribute to the slide’s heading. For example:\n## Slide Title {background-image=\"background.png\"}\nNote that this also works even if you don’t have slide heading text. For example:\n## {background-image=\"background.png\"}\nFor background images, only the “stretch” mode is supported, and the background image is centred around the slide in the image’s larger axis, matching the observed default behaviour of PowerPoint."
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#hello-there",
    "href": "docs/presentations/revealjs/demo/index.html#hello-there",
    "title": "Quarto Presentations",
    "section": "Hello, There",
    "text": "Hello, There\nThis presentation will show you examples of what you can do with Quarto and Reveal.js, including:\n\nPresenting code and LaTeX equations\nIncluding computations in slide output\nImage, video, and iframe backgrounds\nFancy transitions and animations\nPrinting to PDF\n\n…and much more"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#pretty-code",
    "href": "docs/presentations/revealjs/demo/index.html#pretty-code",
    "title": "Quarto Presentations",
    "section": "Pretty Code",
    "text": "Pretty Code\n\nOver 20 syntax highlighting themes available\nDefault theme optimized for accessibility\n\n# Define a server for the Shiny app\nfunction(input, output) {\n  \n  # Fill in the spot we created for a plot\n  output$phonePlot <- renderPlot({\n    # Render a barplot\n  })\n}\n\nLearn more: Syntax Highlighting"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#code-animations",
    "href": "docs/presentations/revealjs/demo/index.html#code-animations",
    "title": "Quarto Presentations",
    "section": "Code Animations",
    "text": "Code Animations\n\nOver 20 syntax highlighting themes available\nDefault theme optimized for accessibility\n\n# Define a server for the Shiny app\nfunction(input, output) {\n  \n  # Fill in the spot we created for a plot\n  output$phonePlot <- renderPlot({\n    # Render a barplot\n    barplot(WorldPhones[,input$region]*1000, \n            main=input$region,\n            ylab=\"Number of Telephones\",\n            xlab=\"Year\")\n  })\n}\n\nLearn more: Code Animations"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#line-highlighting",
    "href": "docs/presentations/revealjs/demo/index.html#line-highlighting",
    "title": "Quarto Presentations",
    "section": "Line Highlighting",
    "text": "Line Highlighting\n\nHighlight specific lines for emphasis\nIncrementally highlight additional lines\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\nLearn more: Line Highlighting"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#executable-code",
    "href": "docs/presentations/revealjs/demo/index.html#executable-code",
    "title": "Quarto Presentations",
    "section": "Executable Code",
    "text": "Executable Code\n\nlibrary(ggplot2)\nggplot(mtcars, aes(hp, mpg, color = am)) +\n  geom_point() +  geom_smooth(formula = y ~ x, method = \"loess\")\n\n\n\nLearn more: Executable Code"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#latex-equations",
    "href": "docs/presentations/revealjs/demo/index.html#latex-equations",
    "title": "Quarto Presentations",
    "section": "LaTeX Equations",
    "text": "LaTeX Equations\nMathJax rendering of equations to HTML\n\n\n\\begin{gather*}\na_1=b_1+c_1\\\\\na_2=b_2+c_2-d_2+e_2\n\\end{gather*}\n\n\\begin{align}\na_{11}& =b_{11}&\n  a_{12}& =b_{12}\\\\\na_{21}& =b_{21}&\n  a_{22}& =b_{22}+c_{22}\n\\end{align}\n\n\\[\\begin{gather*}\na_1=b_1+c_1\\\\\na_2=b_2+c_2-d_2+e_2\n\\end{gather*}\\]\n\\[\\begin{align}\na_{11}& =b_{11}&\n  a_{12}& =b_{12}\\\\\na_{21}& =b_{21}&\n  a_{22}& =b_{22}+c_{22}\n\\end{align}\\]\n\n\n\nLearn more: LaTeX Equations"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#column-layout",
    "href": "docs/presentations/revealjs/demo/index.html#column-layout",
    "title": "Quarto Presentations",
    "section": "Column Layout",
    "text": "Column Layout\nArrange content into columns of varying widths:\n\n\nMotor Trend Car Road Tests\nThe data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles.\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\nwt\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n2.620\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n2.875\n\n\nDatsun 710\n22.8\n4\n108\n93\n2.320\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.215\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.440\n\n\nValiant\n18.1\n6\n225\n105\n3.460\n\n\n\n\n\n\n\n\nLearn more: Multiple Columns"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#incremental-lists",
    "href": "docs/presentations/revealjs/demo/index.html#incremental-lists",
    "title": "Quarto Presentations",
    "section": "Incremental Lists",
    "text": "Incremental Lists\nLists can optionally be displayed incrementally:\n\n\nFirst item\nSecond item\nThird item\n\n\n\n Insert pauses to make other types of content display incrementally.\n\nLearn more: Incremental Lists"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#fragments",
    "href": "docs/presentations/revealjs/demo/index.html#fragments",
    "title": "Quarto Presentations",
    "section": "Fragments",
    "text": "Fragments\nIncremental text display and animation with fragments:\n\n\nFade in\n\n\nSlide up while fading in\n\n\nSlide left while fading in\n\n\nFade in then semi out\n\n\n\nStrike\n\n\nHighlight red\n\n\nLearn more: Fragments"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#slide-backgrounds",
    "href": "docs/presentations/revealjs/demo/index.html#slide-backgrounds",
    "title": "Quarto Presentations",
    "section": "Slide Backgrounds",
    "text": "Slide Backgrounds\nSet the background attribute on a slide to change the background color (all CSS color formats are supported).\nDifferent background transitions are available via the background-transition option.\n\nLearn more: Slide Backgrounds"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#media-backgrounds",
    "href": "docs/presentations/revealjs/demo/index.html#media-backgrounds",
    "title": "Quarto Presentations",
    "section": "Media Backgrounds",
    "text": "Media Backgrounds\nYou can also use the following as a slide background:\n\nAn image: background-image\nA video: background-video\nAn iframe: background-iframe\n\n\nLearn more: Media Backgrounds"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#absolute-position",
    "href": "docs/presentations/revealjs/demo/index.html#absolute-position",
    "title": "Quarto Presentations",
    "section": "Absolute Position",
    "text": "Absolute Position\nPosition images or other elements at precise locations\n\n\n\n\nLearn more: Absolute Position"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#auto-animate",
    "href": "docs/presentations/revealjs/demo/index.html#auto-animate",
    "title": "Quarto Presentations",
    "section": "Auto-Animate",
    "text": "Auto-Animate\nAutomatically animate matching elements across slides with Auto-Animate.\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Auto-Animate"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#auto-animate-1",
    "href": "docs/presentations/revealjs/demo/index.html#auto-animate-1",
    "title": "Quarto Presentations",
    "section": "Auto-Animate",
    "text": "Auto-Animate\nAutomatically animate matching elements across slides with Auto-Animate.\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Auto-Animate"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#slide-transitions",
    "href": "docs/presentations/revealjs/demo/index.html#slide-transitions",
    "title": "Quarto Presentations",
    "section": "Slide Transitions",
    "text": "Slide Transitions\nThe next few slides will transition using the slide transition\n\n\n\n\n\n\n\nTransition\nDescription\n\n\n\n\nnone\nNo transition (default, switch instantly)\n\n\nfade\nCross fade\n\n\nslide\nSlide horizontally\n\n\nconvex\nSlide at a convex angle\n\n\nconcave\nSlide at a concave angle\n\n\nzoom\nScale the incoming slide so it grows in from the center of the screen.\n\n\n\n\nLearn more: Slide Transitions"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#tabsets",
    "href": "docs/presentations/revealjs/demo/index.html#tabsets",
    "title": "Quarto Presentations",
    "section": "Tabsets",
    "text": "Tabsets\n\nPlotData\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\nMerc 280C\n17.8\n6\n167.6\n123\n3.92\n3.440\n18.90\n1\n0\n4\n4\n\n\nMerc 450SE\n16.4\n8\n275.8\n180\n3.07\n4.070\n17.40\n0\n0\n3\n3\n\n\nMerc 450SL\n17.3\n8\n275.8\n180\n3.07\n3.730\n17.60\n0\n0\n3\n3\n\n\nMerc 450SLC\n15.2\n8\n275.8\n180\n3.07\n3.780\n18.00\n0\n0\n3\n3\n\n\nCadillac Fleetwood\n10.4\n8\n472.0\n205\n2.93\n5.250\n17.98\n0\n0\n3\n4\n\n\nLincoln Continental\n10.4\n8\n460.0\n215\n3.00\n5.424\n17.82\n0\n0\n3\n4\n\n\nChrysler Imperial\n14.7\n8\n440.0\n230\n3.23\n5.345\n17.42\n0\n0\n3\n4\n\n\nFiat 128\n32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n1\n1\n4\n1\n\n\nHonda Civic\n30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2\n\n\nToyota Corolla\n33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n1\n1\n4\n1\n\n\nToyota Corona\n21.5\n4\n120.1\n97\n3.70\n2.465\n20.01\n1\n0\n3\n1\n\n\nDodge Challenger\n15.5\n8\n318.0\n150\n2.76\n3.520\n16.87\n0\n0\n3\n2\n\n\nAMC Javelin\n15.2\n8\n304.0\n150\n3.15\n3.435\n17.30\n0\n0\n3\n2\n\n\nCamaro Z28\n13.3\n8\n350.0\n245\n3.73\n3.840\n15.41\n0\n0\n3\n4\n\n\nPontiac Firebird\n19.2\n8\n400.0\n175\n3.08\n3.845\n17.05\n0\n0\n3\n2\n\n\nFiat X1-9\n27.3\n4\n79.0\n66\n4.08\n1.935\n18.90\n1\n1\n4\n1\n\n\nPorsche 914-2\n26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\n\n\nLotus Europa\n30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n\n\nFord Pantera L\n15.8\n8\n351.0\n264\n4.22\n3.170\n14.50\n0\n1\n5\n4\n\n\nFerrari Dino\n19.7\n6\n145.0\n175\n3.62\n2.770\n15.50\n0\n1\n5\n6\n\n\nMaserati Bora\n15.0\n8\n301.0\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\n\n\nVolvo 142E\n21.4\n4\n121.0\n109\n4.11\n2.780\n18.60\n1\n1\n4\n2\n\n\n\n\n\n\n\n\n\nLearn more: Tabsets"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#interactive-slides",
    "href": "docs/presentations/revealjs/demo/index.html#interactive-slides",
    "title": "Quarto Presentations",
    "section": "Interactive Slides",
    "text": "Interactive Slides\nInclude Jupyter widgets and htmlwidgets in your presentations\n\n\n\n\n\n\n\nLearn more: Jupyter widgets, htmlwidgets"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#interactive-slides-1",
    "href": "docs/presentations/revealjs/demo/index.html#interactive-slides-1",
    "title": "Quarto Presentations",
    "section": "Interactive Slides",
    "text": "Interactive Slides\nTurn presentations into applications with Observable and Shiny. Use component layout to position inputs and outputs.\n\n\n\n\n\nviewof talentWeight = Inputs.range([-2, 2], { value: 0.7, step: 0.01, label: \"talent weight\" })\nviewof looksWeight = Inputs.range([-2, 2], { value: 0.7, step: 0.01, label: \"looks weight\" })\nviewof minimum = Inputs.range([-2, 2], { value: 1, step: 0.01, label: \"min fame\" })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { plotActors } from './actors.js';\nplotActors(actors, talentWeight, looksWeight, minimum)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Observable, Shiny, Component Layout"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#preview-links",
    "href": "docs/presentations/revealjs/demo/index.html#preview-links",
    "title": "Quarto Presentations",
    "section": "Preview Links",
    "text": "Preview Links\nNavigate to hyperlinks without disrupting the flow of your presentation.\nUse the preview-links option to open links in an iframe on top of your slides. Try clicking the link below for a demonstration:\n\nMatplotlib: Visualization with Python\n\n\nLearn more: Preview Links"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#themes",
    "href": "docs/presentations/revealjs/demo/index.html#themes",
    "title": "Quarto Presentations",
    "section": "Themes",
    "text": "Themes\n10 Built-in Themes (or create your own)\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Themes"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#easy-navigation",
    "href": "docs/presentations/revealjs/demo/index.html#easy-navigation",
    "title": "Quarto Presentations",
    "section": "Easy Navigation",
    "text": "Easy Navigation\n\nQuickly jump to other parts of your presentation\n\n\n\n\n\n\n\nToggle the slide menu with the menu button (bottom left of slide) to go to other slides and access presentation tools.\n\n\n\nYou can also press m to toggle the menu open and closed.\n\nLearn more: Navigation"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#chalkboard",
    "href": "docs/presentations/revealjs/demo/index.html#chalkboard",
    "title": "Quarto Presentations",
    "section": "Chalkboard",
    "text": "Chalkboard\n\nFree form drawing and slide annotations\n\n\n\n\n\n\n\nUse the chalkboard button at the bottom left of the slide to toggle the chalkboard.\n\n\n\n\n\n\n\n\n\nUse the notes canvas button at the bottom left of the slide to toggle drawing on top of the current slide.\n\n\n\nYou can also press b to toggle the chalkboard or c to toggle the notes canvas.\n\nLearn more: Chalkboard"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#point-of-view",
    "href": "docs/presentations/revealjs/demo/index.html#point-of-view",
    "title": "Quarto Presentations",
    "section": "Point of View",
    "text": "Point of View\nPress o to toggle overview mode:\n\nHold down the Alt key (or Ctrl in Linux) and click on any element to zoom towards it—try it now on this slide.\n\nLearn more: Overview Mode, Slide Zoom"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#speaker-view",
    "href": "docs/presentations/revealjs/demo/index.html#speaker-view",
    "title": "Quarto Presentations",
    "section": "Speaker View",
    "text": "Speaker View\nPress s (or use the presentation menu) to open speaker view\n\n\nLearn more: Speaker View"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#authoring-tools",
    "href": "docs/presentations/revealjs/demo/index.html#authoring-tools",
    "title": "Quarto Presentations",
    "section": "Authoring Tools",
    "text": "Authoring Tools\nLive side-by-side preview for any notebook or text editor including Jupyter and VS Code\n\n\n\n\n\n\n\n\nLearn more: Jupyter, VS Code, Text Editors"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#authoring-tools-1",
    "href": "docs/presentations/revealjs/demo/index.html#authoring-tools-1",
    "title": "Quarto Presentations",
    "section": "Authoring Tools",
    "text": "Authoring Tools\nRStudio includes an integrated presentation preview pane\n\n\nLearn more: RStudio"
  },
  {
    "objectID": "docs/presentations/revealjs/demo/index.html#and-more",
    "href": "docs/presentations/revealjs/demo/index.html#and-more",
    "title": "Quarto Presentations",
    "section": "And More…",
    "text": "And More…\n\nTouch optimized (presentations look great on mobile, swipe to navigate slides)\nFooter & Logo (optionally specify custom footer per-slide)\nAuto-Slide (step through slides automatically, without any user input)\nMultiplex (allows your audience to follow the slides of the presentation you are controlling on their own phone, tablet or laptop).\n\n\nLearn more: Quarto Presentations\n\n\n\nhttps://quarto.org"
  },
  {
    "objectID": "docs/presentations/revealjs/themes.html",
    "href": "docs/presentations/revealjs/themes.html",
    "title": "Reveal Themes",
    "section": "",
    "text": "There are 11 built-in themes provided for Reveal presentations (you can also create your own themes). The default and dark themes use fairly classic typography and color schemes and are a good place to start.\nThe default theme is used automatically — use the theme option to switch to an alternate theme. For example\n---\ntitle: \"Presentation\"\nformat:\n  revealjs: \n    theme: dark\n---\nHere is the full list of available themes:\n\nbeige\nblood\ndark\ndefault\nleague\nmoon\nnight\nserif\nsimple\nsky\nsolarized"
  },
  {
    "objectID": "docs/presentations/revealjs/themes.html#customizing-themes",
    "href": "docs/presentations/revealjs/themes.html#customizing-themes",
    "title": "Reveal Themes",
    "section": "Customizing Themes",
    "text": "Customizing Themes\nYou can customize the built in themes by adding your own Sass theme file to the theme declaration. For example:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n---\nHere’s what the contents of custom.scss might look like:\n/*-- scss:defaults --*/\n\n$body-bg: #191919;\n$body-color: #fff;\n$link-color: #42affa;\n\n/*-- scss:rules --*/\n\n.reveal .slide blockquote {\n  border-left: 3px solid $text-muted;\n  padding-left: 0.5em;\n}\nTheme files use Sass (a variant of CSS that supports variables and other extended features) and are divided into sections.\n\n/*-- scss:defaults --*/ is used to define variables that affect fonts, colors, borders, etc. (note that variables start with a $)\n/*-- scss:rules --*/ is used to create CSS rules. Note that CSS rules that target Reveal content generally need to use the .reveal .slide prefix to successfully override the theme’s default styles.\n\nSee the Sass Variables documentation for a list of what’s available to customize."
  },
  {
    "objectID": "docs/presentations/revealjs/themes.html#creating-themes",
    "href": "docs/presentations/revealjs/themes.html#creating-themes",
    "title": "Reveal Themes",
    "section": "Creating Themes",
    "text": "Creating Themes\nCreating a new theme is just a matter of re-defining one or more of the default Sass variables (you don’t need to re-specify values that you don’t want to override) and adding any additional CSS rules you need to.\nSee the Sass Variables documentation for a list of what can be customized within a theme.\nFor example, here is the source code for the built in serif theme:\n/*-- scss:defaults --*/\n\n// fonts\n$font-family-sans-serif: \"Palatino Linotype\", \"Book Antiqua\", Palatino,\n  FreeSerif, serif !default;\n\n// colors\n$body-bg: #f0f1eb !default;\n$body-color: #000 !default;\n$link-color: #51483d !default;\n$selection-bg: #26351c !default;\n\n// headings\n$presentation-heading-font: \"Palatino Linotype\", \"Book Antiqua\", Palatino,\n  FreeSerif, serif !default;\n$presentation-heading-color: #383d3d !default;\n\n/*-- scss:rules --*/\n\n.reveal a {\n  line-height: 1.3em;\n}\nIn this theme file you’ll notice that the !default suffix is placed after variable definitions. This is to make sure that anyone using this theme can override the variable value (without that the value is defined as not overrideable).\nYou can use a custom theme by just specifying it as the theme option (all theme files implicitly inherit from the default theme). For example:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs: \n    theme: mytheme.scss\n---\nHere is the source code for all of the built-in themes for inspiration and examples:\nhttps://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/revealjs/themes"
  },
  {
    "objectID": "docs/presentations/revealjs/themes.html#sass-variables",
    "href": "docs/presentations/revealjs/themes.html#sass-variables",
    "title": "Reveal Themes",
    "section": "Sass Variables",
    "text": "Sass Variables\nHere’s a list of all Sass variables (and their default values) used by Reveal themes. Note that some variables are defined using other variables, and several of the color variables use the lighten() Sass function to create a lighter variant of another color.\n\n\n\n\n\n\n\nVariable\nDefault\n\n\n\n\n$font-family-sans-serif\n“Source Sans Pro”, Helvetica, sans-serif\n\n\n$font-family-monospace\nmonospace\n\n\n$presentation-font-size-root\n40px\n\n\n$presentation-font-smaller\n0.7\n\n\n$presentation-line-height\n1.3\n\n\n$body-bg\n#fff\n\n\n$body-color\n#222\n\n\n$text-muted\nlighten($body-color, 50%)\n\n\n$link-color\n#2a76dd\n\n\n$link-color-hover\nlighten($link-color, 15%)\n\n\n$selection-bg\nlighten($link-color, 25%)\n\n\n$selection-color\n$body-bg\n\n\n$border-color\nlighten($body-color, 30%)\n\n\n$border-width\n1px\n\n\n$border-radius\n3px\n\n\n$presentation-heading-font\n$font-family-sans-serif\n\n\n$presentation-heading-color\n$body-color\n\n\n$presentation-heading-line-height\n1.2\n\n\n$presentation-heading-letter-spacing\nnormal\n\n\n$presentation-heading-text-transform\nnone\n\n\n$presentation-heading-text-shadow\nnone\n\n\n$presentation-h1-text-shadow\nnone\n\n\n$presentation-heading-font-weight\n600\n\n\n$presentation-h1-font-size\n2.5em\n\n\n$presentation-h2-font-size\n1.6em\n\n\n$presentation-h3-font-size\n1.3em\n\n\n$presentation-h4-font-size\n1em\n\n\n$presentation-block-margin\n12px\n\n\n$presentation-slide-text-align\nleft\n\n\n$presentation-title-slide-text-align\ncenter\n\n\n$code-block-bg\n$body-bg\n\n\n$code-block-border-color\nlighten($body-color, 60%)\n\n\n$code-block-font-size\n0.55em\n\n\n$code-color\nvar(–quarto-hl-fu-color)\n\n\n$code-bg\ntransparent\n\n\n$tabset-border-color\n$code-block-border-color\n\n\n$light-bg-text-color\n#222\n\n\n$light-bg-link-color\n#2a76dd\n\n\n$light-bg-code-color\n#4758ab\n\n\n$dark-bg-text-color\n#fff\n\n\n$dark-bg-link-color\n#42affa\n\n\n$dark-bg-code-color\n#ffa07a\n\n\n\nYou’ll notice that some of the Sass variables use a presentation- prefix and some do not. The presentation- prefixed variables are specific to presentations, whereas the other variables are the same as ones used for standard Quarto HTML Themes.\nSince all Quarto themes use the same Sass format, you can use a single theme file for both HTML / website documents and presentations."
  },
  {
    "objectID": "docs/presentations/revealjs/themes.html#learning-more",
    "href": "docs/presentations/revealjs/themes.html#learning-more",
    "title": "Reveal Themes",
    "section": "Learning More",
    "text": "Learning More\nSee these articles lo learn more about using Reveal:\n\nReveal Basics covers the basic mechanics of creating presentations.\nPresenting Slides describes slide navigation, printing to PDF, drawing on slides using a chalkboard, and creating multiplex presentations.\nAdvanced Reveal delves into transitions, animations, advanced layout and positioning, and other options available for customizing presentations."
  },
  {
    "objectID": "docs/presentations/revealjs/index.html",
    "href": "docs/presentations/revealjs/index.html",
    "title": "Revealjs",
    "section": "",
    "text": "You can create Revealjs presentations using the revealjs format. The best way to get a sense for the capabilities of Revealjs is this demo presentation:\n\n\n\nIf you prefer to view the demo in a standalone browser you can do that here. Check out the source code for the demo to see how the slides were created.\nSee the Revealjs format reference for a comprehensive overview of all options supported for Revealjs output."
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#creating-slides",
    "href": "docs/presentations/revealjs/index.html#creating-slides",
    "title": "Revealjs",
    "section": "Creating Slides",
    "text": "Creating Slides\nIn markdown, slides are delineated using headings. For example, here is a simple slide show with two slides (each defined with a level 2 heading (##):\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: revealjs\n---\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nYou can also divide slide shows into sections with title slides using a level 1 header (#). For example:\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: revealjs\n---\n\n# In the morning\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Breakfast\n\n- Eat eggs\n- Drink coffee\n\n# In the evening\n\n## Dinner\n\n- Eat spaghetti\n- Drink wine\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nFinally, you can also delineate slides using horizontal rules (for example, if you have a slide without a title):\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: revealjs\n---\n\n- Turn off alarm\n- Get out of bed\n\n---\n\n- Get in bed\n- Count sheep\nThe examples above all use level 2 headings for slides and level 1 headings for sections/title slides. You can customize this using the slide-level option (See the Pandoc documentation on structuring the slide show for additional details.\n\nTitle Slide\nYou’ll notice in the above examples that a title slide is automatically created based on the title and author provided in the document YAML options. However, sometimes you don’t want an explicit title slide (e.g. if your first slide consists entirely of a background image). It’s perfectly valid to create a presentation without a title slide, just exclude the title and author options:\n---\nformat: revealjs\n---\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Going to sleep\n\n- Get in bed\n- Count sheep"
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#incremental-lists",
    "href": "docs/presentations/revealjs/index.html#incremental-lists",
    "title": "Revealjs",
    "section": "Incremental Lists",
    "text": "Incremental Lists\nBy default number and bullet lists within slides are displayed all at once. You can override this globally using the incremental option. For example:\ntitle: \"My Presentation\"\nformat:\n  revealjs:\n    incremental: true   \nYou can also explicitly make any list incremental or non-incremental by surrounding it in a div with an explicit class that determines the mode. To make a list incremental do this:\n::: {.incremental}\n- Eat spaghetti\n- Drink wine\n:::\nTo make a list non-incremental do this:\n::: {.nonincremental}\n- Eat spaghetti\n- Drink wine\n:::\nYou can also insert a pause within a slide (keeping the content after the pause hidden) by inserting three dots separated by spaces:\n## Slide with a pause\n\ncontent before the pause\n\n. . .\n\ncontent after the pause"
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#multiple-columns",
    "href": "docs/presentations/revealjs/index.html#multiple-columns",
    "title": "Revealjs",
    "section": "Multiple Columns",
    "text": "Multiple Columns\nTo put material in side by side columns, you can use a native div container with class .columns, containing two or more div containers with class .column and a width attribute:\n:::: {.columns}\n\n::: {.column width=\"40%\"}\nLeft column\n:::\n\n::: {.column width=\"60%\"}\nRight column\n:::\n\n::::"
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#content-overflow",
    "href": "docs/presentations/revealjs/index.html#content-overflow",
    "title": "Revealjs",
    "section": "Content Overflow",
    "text": "Content Overflow\nIf you have a slide that has more content than can be displayed on a single frame there are two slide-level classes you can apply to mitigate this:\n\nUse the .smaller class to use a smaller typeface so that more text fits on the slide. For example:\n## Slide Title {.smaller}\nUse the .scrollable class to make off-slide content available by scrolling. For example:\n## Slide Title {.scrollable}\n\nBoth of these options can also be applied globally to all slides as follows:\n---\nformat:\n  revealjs:\n    smaller: true\n    scrollable: true\n---"
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#speaker-notes",
    "href": "docs/presentations/revealjs/index.html#speaker-notes",
    "title": "Revealjs",
    "section": "Speaker Notes",
    "text": "Speaker Notes\nYou can add speaker notes to a slide using a div with class .notes. For example:\n## Slide with speaker notes\n\nSlide content\n\n::: {.notes}\nSpeaker notes go here.\n:::\nPress the S key (or use the Navigation Menu) to show the presentation speaker view:\n\nYou’ll typically use this view on one screen (e.g. your laptop) while presenting the slides on another screen."
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#themes",
    "href": "docs/presentations/revealjs/index.html#themes",
    "title": "Revealjs",
    "section": "Themes",
    "text": "Themes\nThere are 11 built-in themes provided for Reveal presentations (you can also create your own themes). The default and dark themes use fairly classic typography and color schemes and are a good place to start.\nThe default theme is used automatically — use the theme option to switch to an alternate theme. For example\n---\ntitle: \"Presentation\"\nformat:\n  revealjs: \n    theme: dark\n---\nHere is the full list of available themes:\n\nbeige\nblood\ndark\ndefault\nleague\nmoon\nnight\nserif\nsimple\nsky\nsolarized\n\nSee the article on Reveal Themes for additional details on customizing themes and creating brand new themes of your own."
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#asides-footnotes",
    "href": "docs/presentations/revealjs/index.html#asides-footnotes",
    "title": "Revealjs",
    "section": "Asides & Footnotes",
    "text": "Asides & Footnotes\nAsides contain content of more peripheral interest, and are displayed in a smaller, lighter font at the bottom of the slide. Creates asides using a div with the aside class. For example:\n## Slide Title\n\nSlide content\n\n::: aside\nSome additional commentary of more peripheral interest.\n:::\nFootnotes have a similar visual treatment to asides, but include a footnote number. For example, here we use a footnote and an aside on a single slide:\n## Slide Title\n\n- Green ^[A footnote]\n- Brown\n- Purple\n\n::: aside\nSome additional commentary of more peripheral interest.\n:::\nWhich looks like this when rendered:\n\nIf you prefer that footnotes be included at the end of the document, specify the reference-location: document option:\n---\nformat:\n  revealjs:\n    reference-location: document\n---\nNote that when specifying this option footnotes can still be viewed while on the slide by hovering over the footnote number."
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#footer-logo",
    "href": "docs/presentations/revealjs/index.html#footer-logo",
    "title": "Revealjs",
    "section": "Footer & Logo",
    "text": "Footer & Logo\nYou can include footer text and a logo at the bottom of each slide using the footer and logo options. For example:\n---\nformat:\n  revealjs:\n    logo: logo.png\n    footer: \"Footer text\"\n---\nYou can also include a custom footer per-slide by adding a footer div at the bottom of the the slide:\n## Slide Title\n\nSlide content\n\n::: footer\nCustom footer text\n:::"
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#code-blocks",
    "href": "docs/presentations/revealjs/index.html#code-blocks",
    "title": "Revealjs",
    "section": "Code Blocks",
    "text": "Code Blocks\nMost of the core capabilities of Quarto HTML Code Blocks are available for Reveal slides, including code folding, code copy, and the ability to pick a custom syntax highlighting theme. Note that if you choose a dark Reveal theme then the default Quarto dark syntax highlighting theme will be used.\n\nLine Highlighting\nYou may want to highlight specific lines of code output (or even highlight distinct lines over a progression of steps). You can do this using the code-line-numbers attribute of code blocks. For example:\n```{.python code-line-numbers=\"6-8\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\nNote that you can also highlight disparate ranges of lines by separating them with a comma. For example:\n```{.python code-line-numbers=\"7,9\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\nFinally, you can highlight different line ranges progressively by separating them with |. For example, here we start by showing all lines, then progress to highlighting line 6, and finally to highlighting line 9:\n```{.python code-line-numbers=\"|6|9\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\nYou can use this same option within an executable code cell by using the code-line-numbers cell options:\n```{.python}\n#| echo: fenced\n#| code-line-numbers: \"|6|9\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```"
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#executable-code",
    "href": "docs/presentations/revealjs/index.html#executable-code",
    "title": "Revealjs",
    "section": "Executable Code",
    "text": "Executable Code\nYou can include the output of executable code blocks on slides just the same as with other Quarto documents. This works essentially the same for slides as it does for other formats, however there are a couple of special considerations for slides covered below.\n\nFigure Size\nYou will frequently need to customize the size of figures created for slides so that they either fill the entire slide or whatever region of the slide you need them to. Quarto provides some help here: for Python the figure sizes for Matplotlib and Plotly Express are set to fill the slide area below the title, and for R the Knitr figure width and height are similarly defaulted.\nNevertheless, you will frequently need to change these defaults for a given figure. The details on how to do this vary by graphics library. Here’s an example of explicitly sizing an Altair plot:\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n).properties(\n    width=700,\n    height=300\n).interactive()\n\n\nCode Echo\nUnlike with ordinary documents, within Quarto presentations executable code blocks do not echo their source code by default (this is because often the code produces a figure that wants to occupy as much vertical space as possible). You can override this behavior using the echo option. For example:\n```{python}\n#| echo: true\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"polar\"})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n\nOutput Location\nBy default, output from executable code blocks is displayed immediately after the code. You can use the output-location option to modify this behavior as follows:\n\n\n\nfragment\nDisplay output as a Fragment (delay showing it until its explicitly stepped through by advancing the slides).\n\n\nslide\nDisplay output on an entirely new slide after the current one.\n\n\ncolumn\nDisplay output in a column adjacent to the code.\n\n\ncolumn-fragment\nDisplay output in a column adjacent to the code (delay showing it until its explicitly stepped through by advancing the slides).\n\n\n\nFor example, here we display cell output on its own slide:\n```{r}\n#| output-location: slide\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\nSee the documentation on Execution Options for more details on the various other ways to customize output from code execution."
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#tabsets",
    "href": "docs/presentations/revealjs/index.html#tabsets",
    "title": "Revealjs",
    "section": "Tabsets",
    "text": "Tabsets\nYou can add tabbed content to slides using the standard Quarto syntax for tabsets. For example:\n::: {.panel-tabset}\n\n### Tab A\n\nContent for `Tab A`\n\n### Tab B\n\nContent for `Tab B`\n\n:::\nNote that one significant disadvantage to tabsets is that only the first tab will be visible when printing to PDF."
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#slide-backgrounds",
    "href": "docs/presentations/revealjs/index.html#slide-backgrounds",
    "title": "Revealjs",
    "section": "Slide Backgrounds",
    "text": "Slide Backgrounds\nSlides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a background attribute to your slide headers. Four different types of backgrounds are supported: color, image, video and iframe.\nAll CSS color formats are supported, including hex values, keywords, rgba() or hsl(). For example:\n## Slide Title {background-color=\"aquamarine\"}\nYou can also use various types of media (image, video, or iframe) as your slide background. These options are described below.\n\n\n\n\n\n\nNote that if the background color of your media differs from your presentation’s theme (e.g. a dark image when using a light theme) then you should also explicitly set the background-color so that text on top of the background appears in the correct color (e.g. light text on a dark background).\n\n\n\n\nImage Backgrounds\nBy default, background images are resized to cover the full page. Available options:\n\n\n\nAttribute\nDefault\nDescription\n\n\n\n\nbackground-image\n\nURL of the image to show. GIFs restart when the slide opens.\n\n\nbackground-size\ncover\nSee background-size on MDN.\n\n\nbackground-position\ncenter\nSee background-position on MDN.\n\n\nbackground-repeat\nno-repeat\nSee background-repeat on MDN.\n\n\nbackground-opacity\n1\nOpacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque.\n\n\n\nFor example:\n## Slide Title {background-color=\"black\" background-image=\"https://placekitten.com/100/100\" background-size=\"100px\" background-repeat=\"repeat\"}\n\nThis slide's background image will be sized to 100px and repeated.\nSince this image has a dark background and our slides use the default (light) theme, we explicitly set the background-color to black so that text drawn on top of it is light.\n\n\nVideo Backgrounds\nAutomatically plays a full size video behind the slide.\n\n\n\n\n\n\n\n\nAttribute\nDefault\nDescription\n\n\n\n\nbackground-video\n\nA single video source, or a comma separated list of video sources.\n\n\nbackground-video-loop\nfalse\nFlags if the video should play repeatedly.\n\n\nbackground-video-muted\nfalse\nFlags if the audio should be muted.\n\n\nbackground-size\ncover\nUse cover for full screen and some cropping or contain for letterboxing.\n\n\nbackground-opacity\n1\nOpacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque.\n\n\n\nFor example:\n## Slide Title {background-video=\"video.mp4\" background-video-loop=\"true\" background-video-muted=\"true\"}\n\nThis slides's background video will play in a loop with audio muted.\n\n\nIFrame Backgrounds\nEmbeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it’s not possible to interact with it by default. To make your background interactive, you can add the background-interactive attribute.\n\n\n\n\n\n\n\n\nAttribute\nDefault\nDescription\n\n\n\n\nbackground-iframe\n\nURL of the iframe to load\n\n\nbackground-interactive\nfalse\nInclude this attribute to make it possible to interact with the iframe contents. Enabling this will prevent interaction with the slide content.\n\n\n\nFor example:\n## Slide Title {background-iframe=\"https://example.com\"}\n\n\nSlide Backgrounds Without a Title\nYou can always omit the title text, and specify only the slide background information:\n## {background-color=\"aquamarine\"}\n\n(A slide with no title)\n\n## {background-color=\"black\" background-image=\"https://placekitten.com/100/100\" background-size=\"100px\" background-repeat=\"repeat\"}\n\n(Another slide with no title)"
  },
  {
    "objectID": "docs/presentations/revealjs/index.html#learning-more",
    "href": "docs/presentations/revealjs/index.html#learning-more",
    "title": "Revealjs",
    "section": "Learning More",
    "text": "Learning More\nSee these articles lo learn about more advanced capabilities of Reveal:\n\nPresenting Slides describes slide navigation, printing to PDF, drawing on slides using a chalkboard, and creating multiplex presentations.\nAdvanced Reveal delves into transitions, animations, advanced layout and positioning, and other options available for customizing presentations.\nReveal Themes talks about using and customizing existing themes as well as creating brand new themes."
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html",
    "href": "docs/presentations/revealjs/advanced.html",
    "title": "Advanced Reveal",
    "section": "",
    "text": "Reveal supports a number of animated transition effects for both slide changes and slide background changes. By default no transitions are used, however you can enable them either globally or per-slide using the options described below.\nHere are the available transition types:\n\n\n\n\n\n\n\nTransition\nDescription\n\n\n\n\nnone\nNo transition (switch instantly)\n\n\nfade\nCross fade\n\n\nslide\nSlide horizontally\n\n\nconvex\nSlide at a convex angle\n\n\nconcave\nSlide at a concave angle\n\n\nzoom\nScale the incoming slide so it grows in from the center of the screen.\n\n\n\nHere’s how you would set the global transition style for both slides and backgrounds:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    transition: slide\n    background-transition: fade\n---\nYou can also specify the transition-speed as default, fast, or slow:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    transition: slide\n    transition-speed: fast\n---\nYou can also specify the transition and/or transition-speed for an individual slide:\n## Slide Title {transition=\"fade\" transition-speed=\"fast\"}\nYou can also specify separate in and out transitions, for example:\n## Slide Title {transition=\"fade-in slide-out\"}"
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#slide-visibility",
    "href": "docs/presentations/revealjs/advanced.html#slide-visibility",
    "title": "Advanced Reveal",
    "section": "Slide Visibility",
    "text": "Slide Visibility\nYou can hide a slide by adding the visibility=\"hidden\" attribute to the slide heading. For example:\n## Slide Title {visibility=\"hidden\"}\n\nUncounted Slides\nWhen preparing a presentation it can sometimes be helpful to prepare optional slides that you may or may not have time to show. This is easily done by appending a few slides at the end of the presentation, however this means that the Reveal progress bar and slide numbering will hint that there are additional slides.\nTo “hide” those slides from then numbering system you can use visibility=\"uncounted\". For example:\n## Slide 1\n\n## Slide 2\n\n## Slide 3 {visibility=\"uncounted\"}"
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#presentation-size",
    "href": "docs/presentations/revealjs/advanced.html#presentation-size",
    "title": "Advanced Reveal",
    "section": "Presentation Size",
    "text": "Presentation Size\nAll presentations have a “normal” size, that is, the resolution at which they are authored. This default “normal” size is 1050 x 700, which is used to match as nearly as possible the aspect ratio of most laptops.\nReveal will automatically scale presentations uniformly based on the normal size to ensure that everything fits on any given display or viewport without changing the aspect ratio or layout of your content.\nYou can change the slide size, the margin around content, as well as set limits on content scaling using the following options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nwidth\nNormal width (defaults to 1050)\n\n\nheight\nNormal height (defaults to 700)\n\n\nmargin\nFactor of the display size that should remain empty around the content (defaults to 0.1)\n\n\nmin-scale\nSmallest possible scale to apply to content (defaults to 0.2)\n\n\nmax-scale\nLargest possible scale to apply to content (defaults to 2.0)"
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#absolute-position",
    "href": "docs/presentations/revealjs/advanced.html#absolute-position",
    "title": "Advanced Reveal",
    "section": "Absolute Position",
    "text": "Absolute Position\nThe absolute class lets you position elements at arbitrary positions on a slide. These elements have CSS position: absolute and can be placed relative to the top, left, bottom, and/or right edges of the slide.\nFor example, here we add the .absolute class to three images and give them each a distinct position on the slide (note that we use also width and height to control their dimensions):\n![](image1.png){.absolute top=200 left=0 width=\"350\" height=\"300\"}\n\n![](image2.png){.absolute top=50 right=50 width=\"450\" height=\"250\"}\n\n![](image3.png){.absolute bottom=0 right=50 width=\"300\" height=\"300\"}\nThe following attributes can be used with absolute. All of these values can be specified in CSS units (e.g. px, em, etc.). If a number with no units is specified (as in the above example) then pixels are assumed.\n\n\n\nAttribute\nDescription\n\n\n\n\nwidth\nWidth of element\n\n\nheight\nHeight of element\n\n\ntop\nDistance from top of slide\n\n\nleft\nDistance from left of slide\n\n\nbottom\nDistance from bottom of slide\n\n\nright\nDistance from right of slide\n\n\n\nNote that default size of presentation slides is 1050 x 700. See Presentation Size for details on customizing this."
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#layout-helpers",
    "href": "docs/presentations/revealjs/advanced.html#layout-helpers",
    "title": "Advanced Reveal",
    "section": "Layout Helpers",
    "text": "Layout Helpers\nReveal provides some helper classes for controlling the layout of content.\n\nStack Layout\nThe r-stack layout class lets you center and place multiple elements on top of each other. This is intended to be used together with fragments to incrementally reveal elements.\nFor example, here we create a div with the .r-stack class and then include 3 images (each of which uses .fragment so they display incrementally):\n::: {.r-stack}\n![](image1.png){.fragment width=\"450\" height=\"300\"}\n\n![](image2.png){.fragment width=\"300\" height=\"450\"}\n\n![](image3.png){.fragment width=\"400\" height=\"400\"}\n:::\n\n\nFit Text\nThe r-fit-text class makes text as large as possible without overflowing the slide. This is great when you want BIG text without having to manually find the right font size. For example:\n::: {.r-fit-text}\nBig Text\n:::\n\n\nStretch\nThe r-stretch layout helper lets you resize an element, like an image or video, to cover the remaining vertical space in a slide. For example, here the image will automatically be resized to fit space remaining outside of the slide title and text before and after it:\n## Slide Title\n\nHere is an image:\n\n![](image.png){.r-stretch}\n\nSome text after the image.\nFor slides that contain only a single top-level image, the .r-stretch class is automatically applied to the image. You can disable this behavior by setting the auto-stretch: false option:\nformat:\n  revealjs:\n    auto-stretch: false\nYou can also disable auto-stretch for an individual slide by adding the .nostretch class:\n## Slide Title {.nostretch}\nauto-stretch will only apply on non-nested image, which means an image in a feature blocks (e.g fragments, layout panel, columns, … ) or a custom Divs will be ignored. For custom Divs, you can opt-in auto-stretch behavior by adding the class .r-stretch to the outer divs. In that the image within the blocks will be unwrapped below."
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#auto-animate",
    "href": "docs/presentations/revealjs/advanced.html#auto-animate",
    "title": "Advanced Reveal",
    "section": "Auto Animate",
    "text": "Auto Animate\nRevealjs can automatically animate elements across slides. All you need to do is add the auto-animate attribute to two adjacent slides and Auto-Animate will animate all matching elements between the two.\nHere’s a simple example to give you a better idea of how it can be used. Note that the slides don’t have titles in this example (rather just the auto-animate attribute) however they could also include a title.\n## {auto-animate=true}\n\n::: {style=\"margin-top: 100px;\"}\nAnimating content\n:::\n\n## {auto-animate=true}\n\n::: {style=\"margin-top: 200px; font-size: 3em; color: red;\"}\nAnimating content\n:::\nThis example uses the margin-top property to move the element but internally Reveal will use a CSS transform to ensure smooth movement. This same approach to animation works with most animatable CSS properties meaning you can transition things like position, font-size, line-height, color, background-color, padding and margin.\n\nCode Animations\nYou can also animate between code blocks to show changes in code. For example:\n## {auto-animate=\"true\"}\n\n```r\n# Fill in the spot we created for a plot\noutput$phonePlot <- renderPlot({\n  # Render a barplot\n})\n```\n\n## {auto-animate=true}\n\n```r\n# Fill in the spot we created for a plot\noutput$phonePlot <- renderPlot({\n  # Render a barplot\n  barplot(WorldPhones[,input$region]*1000, \n          main=input$region,\n          ylab=\"Number of Telephones\",\n          xlab=\"Year\")\n})\n```\n\n\nMovement Animations\nAnimations are not limited to changes in style. Auto-Animate can also be used to automatically move elements into their new position as content is added, removed or rearranged on a slide. All without a single line of inline CSS. For example, here the delta between the content on two slides is implicitly animated:\n## {auto-animate=true}\n\nAnimation\n\n## {auto-animate=true}\n\nImplicit\n\nAnimation\n\n\nElement Matching\nWhen you navigate between two auto-animated slides we’ll do our best to automatically find matching elements in the two slides. For text, we consider it a match if both the text contents and node type are identical. For images, videos and iframes we compare the src attribute. We also take into account the order in which the element appears in the DOM.\nIn situations where automatic matching is not feasible you can give the objects that you want to animate between a matching data-id attribute. We prioritize matching data-id values above our automatic matching.\nHere’s an example where we’ve given several blocks a matching ID since automatic matching has no content to go on. This example also makes use of some additional animation attributes (auto-animate-easing and auto-animate-delay), which we’ll describe the use of in the next section.\n## {auto-animate=true auto-animate-easing=\"ease-in-out\"}\n\n::: {.r-hstack}\n::: {data-id=\"box1\" auto-animate-delay=\"0\" style=\"background: #2780e3; width: 200px; height: 150px; margin: 10px;\"}\n:::\n\n::: {data-id=\"box2\" auto-animate-delay=\"0.1\" style=\"background: #3fb618; width: 200px; height: 150px; margin: 10px;\"}\n:::\n\n::: {data-id=\"box3\" auto-animate-delay=\"0.2\" style=\"background: #e83e8c; width: 200px; height: 150px; margin: 10px;\"}\n:::\n:::\n\n## {auto-animate=true auto-animate-easing=\"ease-in-out\"}\n\n::: {.r-stack}\n::: {data-id=\"box1\" style=\"background: #2780e3; width: 350px; height: 350px; border-radius: 200px;\"}\n:::\n\n::: {data-id=\"box2\" style=\"background: #3fb618; width: 250px; height: 250px; border-radius: 200px;\"}\n:::\n\n::: {data-id=\"box3\" style=\"background: #e83e8c; width: 150px; height: 150px; border-radius: 200px;\"}\n:::\n:::\n\n\nAnimation Settings\nYou can override specific animation settings such as easing and duration either for the whole presentation, per-slide or individually for each animated element. The following configuration attributes can be used to change the settings for a specific slide or element:\n\n\n\nAttribute\nDefault\nDescription\n\n\n\n\nauto-animate-easing\nease\nA CSS easing function.\n\n\nauto-animate-unmatched\ntrue\nDetermines whether elements with no matching auto-animate target should fade in. Set to false to make them appear instantly.\n\n\nauto-animate-duration\n1.0\nAnimation duration in seconds.\n\n\nauto-animate-delay\n0\nAnimation delay in seconds (can only be set for specific elements, not at the slide level).\n\n\nauto-animate-id\nabsent\nAn id tying auto-animate slides together.\n\n\nauto-animate-restart\nabsent\nBreaks apart two adjacent auto-animate slides (even with the same id).\n\n\n\nYou can override the global defaults for easing, unmatched, and duration as follows:\n---\ntitle: \"My Slide\"\nformat:\n  revealjs:\n    auto-animate-easing: ease-in-out\n    auto-animate-unmatched: false\n    auto-animate-duration: 0.8\n---"
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#fragments",
    "href": "docs/presentations/revealjs/advanced.html#fragments",
    "title": "Advanced Reveal",
    "section": "Fragments",
    "text": "Fragments\nFragments are used to highlight or incrementally reveal individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide.\nNote that fragments as discussed here are a relatively advanced form of incremental content display—see Incremental Lists for documentation on creating incremental bullet lists and inserting content pauses in slides.\nThe default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment. For example:\n::: {.fragment}\nFade in\n:::\n\n::: {.fragment .fade-out}\nFade out\n:::\n\n::: {.fragment .highlight-red}\nHighlight red\n:::\n\n::: {.fragment .fade-in-then-out}\nFade in, then out\n:::\n\n::: {.fragment .fade-up}\nSlide up while fading in\n:::\n\nFragment Classes\nHere are all of the available fragment classes:\n\n\n\n\n\n\n\nName\nEffect\n\n\n\n\nfade-out\nStart visible, fade out\n\n\nfade-up\nSlide up while fading in\n\n\nfade-down\nSlide down while fading in\n\n\nfade-left\nSlide left while fading in\n\n\nfade-right\nSlide right while fading in\n\n\nfade-in-then-out\nFades in, then out on the next step\n\n\nfade-in-then-semi-out\nFades in, then to 50% on the next step\n\n\ngrow\nScale up\n\n\nsemi-fade-out\nFade out to 50%\n\n\nshrink\nScale down\n\n\nstrike\nStrike through\n\n\nhighlight-red\nTurn text red\n\n\nhighlight-green\nTurn text green\n\n\nhighlight-blue\nTurn text blue\n\n\nhighlight-current-red\nTurn text red, then back to original on next step\n\n\nhighlight-current-green\nTurn text green, then back to original on next step\n\n\nhighlight-current-blue\nTurn text blue, then back to original on next step\n\n\n\n\n\nNested Fragments\nMultiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step, turn it red on the second and partially fade out on the third::\n::: {.fragment .fade-in}\n::: {.fragment .highlight-red}\n::: {.fragment .semi-fade-out}\nFade in > Turn red > Semi fade out\n:::\n:::\n:::\n\n\nFragment Order\nBy default fragments will be stepped through in the order that they appear in the DOM. This display order can be changed using the fragment-index attribute. Note that multiple elements can appear at the same index:\n::: {.fragment fragment-index=3}\nAppears last\n:::\n\n::: {.fragment fragment-index=1}\nAppears first\n:::\n\n::: {.fragment fragment-index=2}\nAppears second\n:::"
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#parallax-background",
    "href": "docs/presentations/revealjs/advanced.html#parallax-background",
    "title": "Advanced Reveal",
    "section": "Parallax Background",
    "text": "Parallax Background\nIf you want to use a parallax scrolling background, add the parallax-background-image and parallax-background-size options. For example:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n     parallax-background-image: background.png\n     parallax-background-size: \"2100px 900px\"\n     parallax-background-horizontal: 200\n     parallax-background-vertical: 50\n---\nNote that the parallax-background-horizontal and parallax-background-vertical options are not required (the defaults shown above will be used if they are not specified)."
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#vertical-slides",
    "href": "docs/presentations/revealjs/advanced.html#vertical-slides",
    "title": "Advanced Reveal",
    "section": "Vertical Slides",
    "text": "Vertical Slides\nReveal uses classic linear slide navigation by default. If you wish you can also configure slide navigation to nest multiple slides within a single top-level slide to create a vertical stack.\nUse the navigation-mode option to fine tune Reveal navigation behavior:\n\n\n\n\n\n\n\nNavigation Mode\nBehavior\n\n\n\n\nlinear\nLeft/right arrows step through all slides (both horizontal and vertical).\n\n\nvertical\nLeft/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical).\n\n\ngrid\nWhen this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index.\n\n\n\nIf you use vertical or grid navigation, you should structure your slides using level 1 headings for the horizontal axis and level 2 headings for the vertical axis. For example:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    navigation-mode: vertical\n---\n\n# Slide 1\n\n## Slide 1.1\n\n## Slide 1.2\n\n# Slide 2\n\n## Slide 2.1\n\n## Slide 2.2\n\nSlide Controls\nWhen you enable vertical or grid navigation, controls will appear to provide a visual cue to where you are in the presentation (e.g. if there are vertical slides below you’ll see a down control).\nBy default these controls appear at the edges of the presentation, you can position them in the bottom right corner using the controls-layout option. You can also provide an extra visual cue to viewers that the controls are available using the controls-tutorial option. For example:\n---\ntitle: \"Presentation\"\nformat: \n  revealjs:\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n---\nNote that using controls-layout: bottom-right isn’t compatible with including a logo (as the logo appears in the bottom right corner as well).\nYou can also disable the controls entirely with controls: false.\n\n\n\n\n\n\nWarning\n\n\n\nWhile vertical slides do provide some additional flexibility over the traditional linear model, they are in practice very confusing for end users (mostly because they are so unexpected). Users will often skip the vertical content because they simply don’t know its there.\nIf your content benefits from vertical orientation (e.g. you have optional drill-down content that you don’t want in the main flow of the presentation) by all means use the vertical mode. Just know that if you distribute your slides to users they will very likely not end up viewing any of the vertical content."
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#touch-navigation",
    "href": "docs/presentations/revealjs/advanced.html#touch-navigation",
    "title": "Advanced Reveal",
    "section": "Touch Navigation",
    "text": "Touch Navigation\nYou can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides.\nIf you wish to disable this you can set the touch option to false:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    touch: false\n    controls: true\n---\nNote that we also enable controls at the same time (as users on phones or tablets don’t have access to a keyboard)."
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#reveal-plugins",
    "href": "docs/presentations/revealjs/advanced.html#reveal-plugins",
    "title": "Advanced Reveal",
    "section": "Reveal Plugins",
    "text": "Reveal Plugins\nTo use Revealjs plugins, you need to package them into a directory with a config file (plugin.yml). The config file lets Quarto know how to inject the plugin into the presentation (e.g. what scripts and/or css files to include, what the default configuration should be, etc.).\nSee the source code of the plugins that are built in to Quarto Reveal for examples:\nhttps://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/revealjs/plugins\nTo use a plugin, just include a reference to its directory in the list of plugins. For example:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    revealjs-plugins:\n      - myplugin\n---\nNote that many of the most popular Reveal plugins are already included with the Quarto version of Reveal, so there is no need to include them separately. Built in plugins include:\n\nMultiplex\nRevealMenu\nRevealChalkboard\nPdfExport\n\n\nExample\nLet’s show an example with the fullscreen. Here are the steps to bundle this plugin to use within your Quarto HTML presentation:\n\nCreate a folder with the name you want for the plugin, here we’ll call it fullscreen.\nDownload the plugin files into the created folder. Here the plugin only have a JS file called plugin.js that you can find on the repo rajgoel/reveal.js-plugins. You can keep the name or rename it, e.g fullscreen.js.\nIn that folder add a plugin.yml file, as in Quarto Reveal examples.\n\nname is a mandatory field which should be the name of the JS function the JS plugin is defining. Open the JS script you downloaded to look for it.\nOther fields are for the resources to be used. In our example, only a JS script so we’ll use script\n\nOur plugin.yml would be:\nname: RevealFullscreen\nscript: [fullscreen.js]\nNow add the plugin reference into your document YAML header, using the path of the folder your created:\nformat: \n revealjs:\n   revealjs-plugins:\n     - fullscreen\nThe custom plugin will be loaded in your presentation and you can use it. The plugin fullscreen documentation shows an example of adding a Map fullscreen in a slide by adding an attribute on the section, and using stretch on the content. This would translate to having this slide in the .qmd file:\n## {fullscreen=true}\n\n<iframe class=\"stretch\" data-src=\"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d61206.89156051744!2d-151.77366863890407!3d-16.50433878928727!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sde!4v1467468929561\"></iframe>"
  },
  {
    "objectID": "docs/presentations/revealjs/advanced.html#learning-more",
    "href": "docs/presentations/revealjs/advanced.html#learning-more",
    "title": "Advanced Reveal",
    "section": "Learning More",
    "text": "Learning More\nSee these articles lo learn more about using Reveal:\n\nReveal Basics covers the basic mechanics of creating presentations.\nPresenting Slides describes slide navigation, printing to PDF, drawing on slides using a chalkboard, and creating multiplex presentations.\nReveal Themes talks about using and customizing existing themes as well as creating brand new themes."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html",
    "href": "docs/presentations/revealjs/presenting.html",
    "title": "Presenting Slides",
    "section": "",
    "text": "This article covers the mechanics of presenting slides with Reveal. Basic navigation is done using the following keyboard shortcuts:\n\n\n\n\n\n\n\nAction\nKeys\n\n\n\n\nNext slide\n→ SPACE N\n\n\nPrevious slide\n← P\n\n\nNavigate without fragments\nAlt → Alt ←\n\n\nJump to first/last slide\nShift → Shift ←\n\n\n\n\n\n\n\n\n\nYou will often want to enter fullscreen mode when presenting. You can do this by pressing the F key.\n\n\n\nIn addition to basic keyboard navigation, Reveal supports several more advanced capabilities, including:\n\nNavigation menu and overview mode\nSpeaker view (w/ speaker notes,timer, and preview of upcoming slides)\nPrinting to PDF and publishing as self-contained HTML\nDrawing on top of slides & chalkboard/whiteboard mode\nMultiplex, which allows your audience to follow the slides of the presentation you are controlling on their own phone, tablet or laptop.\n\nThese capabilities are described below."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#navigation-menu",
    "href": "docs/presentations/revealjs/presenting.html#navigation-menu",
    "title": "Presenting Slides",
    "section": "Navigation Menu",
    "text": "Navigation Menu\nQuarto includes a built in version of the reveal.js-menu plugin. You can access the navigation menu using the button  located in the bottom left corner of the presentation. Clicking the button opens a slide navigation menu that enables you to easily jump to any slide:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also open the navigation menu by pressing the M key.\n\n\n\nThe navigation menu also includes a Tools pane that provides access to the various other navigation tools including Fullscreen, Speaker View, Overview Mode, and Print to PDF.\nUse the following options to customize the appearance and behavior of the menu:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nside\nSide of the presentation where the menu will be shown. left or right (defaults to left).\n\n\nwidth\nWidth of the menu (normal, wide, third, half, full, or any valid css length value). Defaults to normal\n\n\nnumbers\nAdd slide numbers to menu items.\n\n\n\nFor example:\nformat:\n  revealjs:\n    side: right\n    width: wide\nYou can hide the navigation menu by specifying the menu: false option:\nformat:\n  revealjs:\n    menu: false\nNote that you can still open the menu using the M key even if the button is hidden."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#overview-mode",
    "href": "docs/presentations/revealjs/presenting.html#overview-mode",
    "title": "Presenting Slides",
    "section": "Overview Mode",
    "text": "Overview Mode\nOverview mode provides an alternate view that shows you a thumbnail for each slide:\n\n\n\n\n\n\n\nYou can enable Overview Mode by pressing the O key."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#slide-zoom",
    "href": "docs/presentations/revealjs/presenting.html#slide-zoom",
    "title": "Presenting Slides",
    "section": "Slide Zoom",
    "text": "Slide Zoom\nHold down the Alt key (or Ctrl in Linux) and click on any element to zoom towards it. Try zooming in on one of these images:\n\nAlt or Ctrl click again to zoom back out."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#speaker-view",
    "href": "docs/presentations/revealjs/presenting.html#speaker-view",
    "title": "Presenting Slides",
    "section": "Speaker View",
    "text": "Speaker View\nThe speaker view shows the current slide along with the upcoming slide, a timer, and any speaker notes associated with the current slide:\n\n\n\n\n\n\n\nYou can enable Speaker View by pressing the S key.\n\n\n\nYou can add speaker notes to a slide using a div with class .notes. For example:\n## Slide with speaker notes\n\nSlide content\n\n::: {.notes}\nSpeaker notes go here.\n:::"
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#slide-numbers",
    "href": "docs/presentations/revealjs/presenting.html#slide-numbers",
    "title": "Presenting Slides",
    "section": "Slide Numbers",
    "text": "Slide Numbers\nYou can add slide numbers to your presentation using the slide-number option. You can also control in which contexts slide numbers appear using the show-slide-number option. For example, here we configure slides numbers for printed output only:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    slide-number: true\n    show-slide-number: print\n---\nIn addition to a simple true or false value, the slide-number option can also specify a format. Available formats include:\n\n\n\nValue\nDescription\n\n\n\n\nc/t\nSlide number / total slides (default)\n\n\nc\nSlide number only\n\n\nh/v\nHorizontal / Vertical slide number\n\n\nh.v\nHorizontal . Vertical slide number\n\n\n\nSee Vertical Slides for additional information on vertical slides.\nThe show-slide-number option supports the following values:\n\n\n\nValue\nDescription\n\n\n\n\nall\nShow slide numbers in all contexts (default)\n\n\nprint\nOnly show slide numbers when printing to PDF\n\n\nspeaker\nOnly show slide numbers in the speaker view"
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#print-to-pdf",
    "href": "docs/presentations/revealjs/presenting.html#print-to-pdf",
    "title": "Presenting Slides",
    "section": "Print to PDF",
    "text": "Print to PDF\nReveal presentations can be exported to PDF via a special print stylesheet.\n\n\n\n\n\n\nNote\n\n\n\nNote: This feature has only been confirmed to work in Google Chrome and Chromium.\n\n\nTo Print to PDF, do the following:\n\nToggle into Print View using the E key (or using the Navigation Menu)\nOpen the in-browser print dialog (CTRL/CMD+P).\nChange the Destination setting to Save as PDF.\nChange the Layout to Landscape.\nChange the Margins to None.\nEnable the Background graphics option.\nClick Save 🎉\n\nHere’s what the Chrome print dialog would look like with these settings enabled:\n\n\nPrint Options\nThere are a number of options that affected printed output that you may want to configure prior to printing:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nshow-notes\nInclude speaker notes (true, false, or separate-page)\n\n\nslide-number\nInclude slide numbers (true or false)\n\n\npdf-max-pages-per-slide\nSlides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand to using the pdf-max-pages-per-slide option.\n\n\npdf-separate-fragments\nSlides with multiple fragments are printed on a single page by default. To create a page for each fragment set this option to true.\n\n\n\nFor example, the following specifies that we want to print speaker notes on their own page and include slide numbers:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    show-notes: separate-page\n    slide-number: true\n---"
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#preview-links",
    "href": "docs/presentations/revealjs/presenting.html#preview-links",
    "title": "Presenting Slides",
    "section": "Preview Links",
    "text": "Preview Links\nReveal makes it easy to incorporate navigation to external websites into the flow of presentations using the preview-links option.\nWhen you click on a hyperlink with preview-links: true, the link will be navigated to in an iframe that overlays the slide. For example, here we’ve clicked on a Matplotlib link and the website opens on top of the slide (you’d click the close button at top right to hide it):\n\nAvailable values for preview-link include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nauto\nPreview links when presenting in full-screen mode (otherwise navigate to them normally)\n\n\ntrue\nAlways preview links\n\n\nfalse\nNever preview links (the default)\n\n\n\nFor example, here we set preview-links to auto:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    preview-links: auto\n---\nYou can also set this option on a per-link basis. These two links respectively enable and disable preview:\n[Preview](https://example.com){preview-link=\"true\"}\n\n[NoPreview](https://example.com){preview-link=\"false\"}"
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#slide-tone",
    "href": "docs/presentations/revealjs/presenting.html#slide-tone",
    "title": "Presenting Slides",
    "section": "Slide Tone",
    "text": "Slide Tone\nSlide tone plays a subtle sound when you change slides. It was requested by a blind user and enables presenters to hear an auditory signal of their progress through the slides. Enable slide tone with:\nformat:\n  revealjs:\n    slide-tone: true\nThe tones increase in pitch for each slide from a low C to a high C note. The tone pitch stays the same for incremental slides.\nThe implementation of slide tone was adapted from the slide tone plugin in xaringanExtra."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#auto-slide",
    "href": "docs/presentations/revealjs/presenting.html#auto-slide",
    "title": "Presenting Slides",
    "section": "Auto-Slide",
    "text": "Auto-Slide\nPresentations can be configured to step through slides automatically, without any user input. To enable this you will need to specify an interval for slide changes using the auto-slide option (the interval is provided in milliseconds). The loop option can additionally be specified to continue presenting in a loop once all the slides have been shown.\nFor example, here we specify that we want to advance every 5 seconds and continue in a loop:\n---\ntitle: \"Presentation\"\nformat: \n  revealjs: \n    auto-slide: 5000\n    loop: true\n---\nA play/pause control element will automatically appear for auto-sliding decks. Sliding is automatically paused if the user starts interacting with the deck. It’s also possible to pause or resume sliding by pressing A on the keyboard.\nYou can disable the auto-slide controls and prevent sliding from being paused by specifying auto-slide-stoppable: false.\n\nSlide Timing\nIt’s also possible to override the slide duration for individual slides and fragments by using the autoslide attribute (this attribute also works on Fragments). For example, here we set the auto-slide value to 2 seconds:\n## Slide Title {autoslide=2000}"
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#publishing",
    "href": "docs/presentations/revealjs/presenting.html#publishing",
    "title": "Presenting Slides",
    "section": "Publishing",
    "text": "Publishing\nThere are two main ways to publish Reveal presentations:\n\nAs a PDF file—see Print to PDF above for details on how to do this.\nAs an HTML file. For HTML, it’s often most convenient to distribute the presentation as a single self-contained file. To do this, specify the self-contained option:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    self-contained: true\n---\nAll of the dependent images, CSS styles, and other assets will be contained within the HTML file created by Quarto.\n\n\n\n\n\n\nNote that specifying self-contained can slow down rendering by a couple of seconds, so you may want to enable self-contained until the point at which you are ready to publish.\n\n\n\n\nSee the documentation on Publishing HTML for details on additional ways to publish Reveal presentations including GitHub Pages and RStudio Connect."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#navigation-options",
    "href": "docs/presentations/revealjs/presenting.html#navigation-options",
    "title": "Presenting Slides",
    "section": "Navigation Options",
    "text": "Navigation Options\nThere are several navigational cues provided as part of Reveal presentations and corresponding options that control them:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ncontrols\nShow arrow controls for navigating through slides (defaults to auto, which will show controls when vertical slides are present or when the deck is embedded in an iframe).\n\n\nprogress\nShow a progress bar at the bottom (defaults to true).\n\n\nhistory\nPush slide changes to the browser history. Defaults to true, which means that the browser Forward/Back buttons can be used for slide navigation.\n\n\nhash-type\nType of URL hash to use for slides. Defaults to id which uses an id derived from the slide title. You can also specify number.\n\n\n\nFor example, the following configuration hides the progress bar and specifies that we want to use browser history:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    progress: false\n    history: true\n---"
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#chalkboard",
    "href": "docs/presentations/revealjs/presenting.html#chalkboard",
    "title": "Presenting Slides",
    "section": "Chalkboard",
    "text": "Chalkboard\nQuarto includes a built-in version of the reveal.js-chalkboard plugin. Specify the chalkboard: true option to enable the plugin, which enables you to draw on a notes canvas on top of your slides and/or open up an empty chalkboard within your presentation:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    chalkboard: true\n---\nHere are what the notes canvas and chalkboard look like when activated:\n\n\n\n\n\n\n\n\n\n\nTo toggle the notes canvas on and off use the  button or the C key.\nTo toggle the chalkboard on and off use the  button or the B key.\nHere are all of the keyboard shortcuts associated with the notes canvas and chalkboard:\n\n\n\nAction\nKey\n\n\n\n\nToggle notes canvas\nC\n\n\nToggle chalkboard\nB\n\n\nReset all drawings\nBACKSPACE\n\n\nClear drawings on slide\nDEL\n\n\nCycle colors forward\nX\n\n\nCycle colors backward\nY\n\n\nDownload drawings\nD\n\n\n\nThe following mouse and touch gestures can be used for interacting with drawings:\n\nClick on the buttons at the bottom left to toggle the notes canvas or chalkboard\nClick on the color picker at the left to change the color (the color picker is only visible if the notes canvas or chalkboard is active)\nClick on the up/down arrows on the left to the switch among multiple chalkboard (the up/down arrows are only available for the chalkboard)\nClick the left mouse button and drag to write on notes canvas or chalkboard\nClick the right mouse button and drag to wipe away previous drawings\nTouch and move to write on notes canvas or chalkboard\nTouch and hold for half a second, then move to wipe away previous drawings\n\n\nRestoring Drawings\nThe D key downloads any active drawings into a JSON file. You can then restore these drawings when showing your presentation using the src option. For example:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    chalkboard:\n      src: drawings.json\n---\n\n\nChalkboard Options\nThe following options are available to customize the behavior and appearance of the chalkboard:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ntheme\nCan be set to either chalkboard (default) or whiteboard.\n\n\nboardmarker-width\nThe drawing width of the boardmarker; larger values draw thicker line. Defaults to 3.\n\n\nchalk-width\nThe drawing width of the chalk; larger values draw thicker lines. Defaults to 7.\n\n\nchalk-effect\nA float in the range [0.0, 1.0], the intensity of the chalk effect on the chalk board. Full effect (default) 1.0, no effect 0.0.\n\n\nsrc\nOptional file name for pre-recorded drawings (download drawings using the D key).\n\n\nread-only\nConfiguration option to prevent changes to existing drawings. If set to true no changes can be made, if set to false false changes can be made,\n\n\nbuttons\nAdd chalkboard buttons at the bottom of the slide (defaults to true)\n\n\ntransition\nGives the duration (in milliseconds) of the transition for a slide change, so that the notes canvas is drawn after the transition is completed.\n\n\n\nFor example, the following configuration specifies that we want to use the whiteboard theme with a (thicker) boardmarker width, and that we want to hide the chalkboard buttons at the bottom of each slide:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    chalkboard:\n      theme: whiteboard\n      boardmarker-width: 5\n      buttons: false\n---\nIf you disable the chalkboard buttons globally you can selectively re-enable them for indvidual slides with the chalkboard-buttons attribute. For example:\n## Slide Title {chalkboard-buttons=\"true\"}\nYou can also use chalkboard-buttons=\"false\" to turn off the buttons for individual slides."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#multiplex",
    "href": "docs/presentations/revealjs/presenting.html#multiplex",
    "title": "Presenting Slides",
    "section": "Multiplex",
    "text": "Multiplex\nQuarto includes a built-in version of the Reveal Multiplex plugin. The multiplex plugin allows your audience to follow the slides of the presentation you are controlling on their own phone, tablet or laptop. When you change slides in your master presentations everyone will follow and see the same content on their own device.\nCreating a Reveal presentation that supports multiplex is straightforward. Just specify the multiplex: true option as follows:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    multiplex: true\n---\nRendering the presentation will result in two HTML files being created by Quarto:\n\n\n\n\n\n\n\nFile\nDescription\n\n\n\n\npresentation.html\nThis is the file you should publish online and that your audience should view.\n\n\npresentation-speaker.html\nThis is the file that you should present from . This file can remain on your computer and does not need to be published elsewhere.\n\n\n\nThe two versions of the presentation will be synchronized such that when the speaker version switches slides the viewers also all switch to the same slide.\n\nMultiplex Server\nBehind the scenes there is a multiplex server that is synchronizing slide events between the viewer and speaker versions of the presentation. Note that the this server does not actually see any of the slide content, it is only used to synchronize events.\nBy default, a server created and hosted by the Revealjs team is used for this: https://reveal-multiplex.glitch.me/. This server is used by default when you specify multiplex: true.\n\nRunning your own server\nIf you want to run your own version of this server its source code is here: https://github.com/reveal/multiplex/blob/master/index.js.\nYou can then configure multiplex to use an alternate server as follows:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    multiplex: \n      url: 'https://myserver.example.com/\n---\nNote that Quarto calls the multiplex server behind the scenes to provision a id and secret for your presentation. If you want to provision your own id and secret you can do so at https://reveal-multiplex.glitch.me/ (or using your custom hosted server URL) and provide them explicitly in YAML:\n---\ntitle: \"Presentation\"\nformat:\n  revealjs:\n    multiplex: \n      id: '1ea875674b17ca76'\n      secret: '13652805320794272084'\n---\nNote that the secret value will be included in only the speaker version of the presentation."
  },
  {
    "objectID": "docs/presentations/revealjs/presenting.html#learning-more",
    "href": "docs/presentations/revealjs/presenting.html#learning-more",
    "title": "Presenting Slides",
    "section": "Learning More",
    "text": "Learning More\nSee these articles lo learn more about using Reveal:\n\nReveal Basics covers the basic mechanics of creating presentations.\nAdvanced Reveal delves into transitions, animations, advanced layout and positioning, and other options available for customizing presentations.\nReveal Themes talks about using and customizing existing themes as well as creating brand new themes."
  },
  {
    "objectID": "docs/presentations/beamer.html",
    "href": "docs/presentations/beamer.html",
    "title": "Beamer",
    "section": "",
    "text": "You can create Beamer (LaTeX/PDF) presentations using the beamer format. Beamer presentations support core presentation features like incremental content and 2-column layouts, and also provide facilities for customizing column layout, specifying frame attributes, and using Beamer themes.\nSee the Beamer format reference for a complete list of all options available for Beamer output."
  },
  {
    "objectID": "docs/presentations/beamer.html#creating-slides",
    "href": "docs/presentations/beamer.html#creating-slides",
    "title": "Beamer",
    "section": "Creating Slides",
    "text": "Creating Slides\nIn markdown, slides are delineated using headings. For example, here is a simple slide show with two slides (each defined with a level 2 heading (##):\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: beamer\n---\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nYou can also divide slide shows into sections with title slides using a level 1 header (#). For example:\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: beamer\n---\n\n# In the morning\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Breakfast\n\n- Eat eggs\n- Drink coffee\n\n# In the evening\n\n## Dinner\n\n- Eat spaghetti\n- Drink wine\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nFinally, you can also delineate slides using horizontal rules (for example, if you have a slide without a title):\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: beamer\n---\n\n- Turn off alarm\n- Get out of bed\n\n---\n\n- Get in bed\n- Count sheep\nThe examples above all use level 2 headings for slides and level 1 headings for sections/title slides. You can customize this using the slide-level option (See the Pandoc documentation on structuring the slide show for additional details."
  },
  {
    "objectID": "docs/presentations/beamer.html#incremental-lists",
    "href": "docs/presentations/beamer.html#incremental-lists",
    "title": "Beamer",
    "section": "Incremental Lists",
    "text": "Incremental Lists\nBy default number and bullet lists within slides are displayed all at once. You can override this globally using the incremental option. For example:\ntitle: \"My Presentation\"\nformat:\n  beamer:\n    incremental: true   \nYou can also explicitly make any list incremental or non-incremental by surrounding it in a div with an explicit class that determines the mode. To make a list incremental do this:\n::: {.incremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::\nTo make a list non-incremental do this:\n::: {.nonincremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::\nYou can also insert a pause within a slide (keeping the content after the pause hidden) by inserting three dots separated by spaces:\n## Slide with a pause\n\ncontent before the pause\n\n. . .\n\ncontent after the pause"
  },
  {
    "objectID": "docs/presentations/beamer.html#multiple-columns",
    "href": "docs/presentations/beamer.html#multiple-columns",
    "title": "Beamer",
    "section": "Multiple Columns",
    "text": "Multiple Columns\nTo put material in side by side columns, you can use a native div container with class .columns, containing two or more div containers with class .column and a width attribute:\n:::: {.columns}\n\n::: {.column width=\"40%\"}\ncontents...\n:::\n\n::: {.column width=\"60%\"}\ncontents...\n:::\n\n::::\nThe div containers with classes columns and column can optionally have an align attribute. The class columns can optionally have a totalwidth attribute or an onlytextwidth class.\n:::: {.columns align=center totalwidth=8em}\n\n::: {.column width=\"40%\"}\ncontents...\n:::\n\n::: {.column width=\"60%\" align=bottom}\ncontents...\n:::\n\n:::: \nThe align attributes on columns and column can be used with the values top, top-baseline, center and bottom to vertically align the columns. It defaults to top in columns.\nThe totalwidth attribute limits the width of the columns to the given value.\n::::  {.columns align=top .onlytextwidth}\n\n::: {.column width=\"40%\" align=center}\ncontents...\n:::\n\n::: {.column width=\"60%\"}\ncontents...\n:::\n\n:::: \nThe class onlytextwidth sets the totalwidth to \\textwidth.\nSee Section 12.7 of the Beamer User’s Guide for more details."
  },
  {
    "objectID": "docs/presentations/beamer.html#beamer-options",
    "href": "docs/presentations/beamer.html#beamer-options",
    "title": "Beamer",
    "section": "Beamer Options",
    "text": "Beamer Options\nThese variables change the appearance of PDF slides using beamer.\n\naspectratio\n\nslide aspect ratio (43 for 4:3 [default], 169 for 16:9, 1610 for 16:10, 149 for 14:9, 141 for 1.41:1, 54 for 5:4, 32 for 3:2)\n\nbeamerarticle\n\nproduce an article from Beamer slides\n\nbeameroption\n\nadd extra beamer option with \\setbeameroption{}\n\ninstitute\n\nauthor affiliations: can be a list when there are multiple authors\n\nlogo\n\nlogo image for slides\n\nnavigation\n\ncontrols navigation symbols (default is empty for no navigation symbols; other valid values are frame, vertical, and horizontal)\n\nsection-titles\n\nenables “title pages” for new sections (default is true)\n\ntheme, colortheme, fonttheme, innertheme, outertheme\n\nbeamer themes\n\nthemeoptions\n\noptions for LaTeX beamer themes (a list).\n\ntitlegraphic\n\nimage for title slide\n\n\nFor example, here we use several of these options:\n---\ntitle: \"Presentation\"\nformat: \n  beamer: \n    aspectratio: 32\n    navigation: horizontal\n    theme: AnnArbor\n    colortheme: lily\n---"
  },
  {
    "objectID": "docs/presentations/beamer.html#frame-attributes",
    "href": "docs/presentations/beamer.html#frame-attributes",
    "title": "Beamer",
    "section": "Frame Attributes",
    "text": "Frame Attributes\nSometimes it is necessary to add the LaTeX [fragile] option to a frame in beamer (for example, when using the minted environment). This can be forced by adding the fragile class to the heading introducing the slide:\n# Fragile slide {.fragile}\nAll of the other frame attributes described in Section 8.1 of the Beamer User’s Guide may also be used: allowdisplaybreaks, allowframebreaks, b, c, t, environment, label, plain, shrink, standout, noframenumbering."
  },
  {
    "objectID": "docs/presentations/beamer.html#background-images",
    "href": "docs/presentations/beamer.html#background-images",
    "title": "Beamer",
    "section": "Background Images",
    "text": "Background Images\nTo provide a common background image for all slides in a Beamer presentation, use the background-image format option. For example:\n---\nformat:\n  beamer:\n    background-image: background.png"
  },
  {
    "objectID": "docs/presentations/index.html",
    "href": "docs/presentations/index.html",
    "title": "Presentations",
    "section": "",
    "text": "Quarto supports a variety of formats for creating presentations, including:\n\nrevealjs — reveal.js (HTML)\npptx — PowerPoint (MS Office)\nbeamer — Beamer (LaTeX/PDF)\n\nThere are pros and cons to each of these formats. The most capable format by far is revealjs so is highly recommended unless you have specific requirements for Office or LaTeX output. Note that revealjs presentations can be presented as HTML slides or can be printed to PDF for easier distribution.\nBelow we’ll describe the basic syntax for presentations that applies to all formats. See the format specific articles for additional details on their native capabilities."
  },
  {
    "objectID": "docs/presentations/index.html#creating-slides",
    "href": "docs/presentations/index.html#creating-slides",
    "title": "Presentations",
    "section": "Creating Slides",
    "text": "Creating Slides\nIn markdown, slides are delineated using headings. For example, here is a simple slide show with two slides (each defined with a level 2 heading (##):\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: revealjs\n---\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nYou can also divide slide shows into sections with title slides using a level 1 header (#). For example:\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: revealjs\n---\n\n# In the morning\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Breakfast\n\n- Eat eggs\n- Drink coffee\n\n# In the evening\n\n## Dinner\n\n- Eat spaghetti\n- Drink wine\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nFinally, you can also delineate slides using horizontal rules (for example, if you have a slide without a title):\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: revealjs\n---\n\n- Turn off alarm\n- Get out of bed\n\n---\n\n- Get in bed\n- Count sheep\nThe examples above all use level 2 headings for slides and level 1 headings for sections/title slides. You can customize this using the slide-level option (See the Pandoc documentation on structuring the slide show for additional details."
  },
  {
    "objectID": "docs/presentations/index.html#incremental-lists",
    "href": "docs/presentations/index.html#incremental-lists",
    "title": "Presentations",
    "section": "Incremental Lists",
    "text": "Incremental Lists\nBy default number and bullet lists within slides are displayed all at once. You can override this globally using the incremental option. For example:\ntitle: \"My Presentation\"\nformat:\n  revealjs:\n    incremental: true   \nYou can also explicitly make any list incremental or non-incremental by surrounding it in a div with an explicit class that determines the mode. To make a list incremental do this:\n::: {.incremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::\nTo make a list non-incremental do this:\n::: {.nonincremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::"
  },
  {
    "objectID": "docs/presentations/index.html#multiple-columns",
    "href": "docs/presentations/index.html#multiple-columns",
    "title": "Presentations",
    "section": "Multiple Columns",
    "text": "Multiple Columns\nTo put material in side by side columns, you can use a native div container with class .columns, containing two or more div containers with class .column and a width attribute:\n:::: {.columns}\n\n::: {.column width=\"40%\"}\ncontents...\n:::\n\n::: {.column width=\"60%\"}\ncontents...\n:::\n\n::::"
  },
  {
    "objectID": "docs/presentations/index.html#learning-more",
    "href": "docs/presentations/index.html#learning-more",
    "title": "Presentations",
    "section": "Learning More",
    "text": "Learning More\nSee these format specific articles for additional details on the additional capabilities of each format:\n\nrevealjs — reveal.js (HTML)\npptx — PowerPoint (MS Office)\nbeamer — Beamer (LaTeX/PDF)"
  },
  {
    "objectID": "docs/authoring/variables.html",
    "href": "docs/authoring/variables.html",
    "title": "Variables",
    "section": "",
    "text": "There are a number of ways to include dynamic variables within documents rendered by Quarto. This is useful for externalizing content that varies depending on context, or as an alternative to repeating a value in multiple places (e.g. a version number).\nFor example, the following prints the title from document metadata:\n{{< meta title >}}\nThe {{< meta >}} syntax used here is an example of a shortcode. Quarto supports the follwing shortcodes for dynamic variables:\n\n\n\nShortcode\nDescription\n\n\n\n\nvar\nValue from _variables.yml file\n\n\nmeta\nValue from document metadata\n\n\nenv\nValue of System environment variable"
  },
  {
    "objectID": "docs/authoring/variables.html#var",
    "href": "docs/authoring/variables.html#var",
    "title": "Variables",
    "section": "var",
    "text": "var\nThe var shortcode enables you to insert content from a project-level _variables.yml file. Create this file alongside your _quarto.yml project file, and then include references to those variables within any document in your project.\nVariables can be either simple values or can include arbitrary markdown content. To define variables, create a _variables.yml file in the root directory of your project. For example:\nversion: 1.2\n\nemail:\n  info: info@example.com\n  support: support@example.com\n\nengine:\n  jupyter: \"[Jupyter](https://jupyter.org)\"\n  knitr: \"[Knitr](<https://yihui.name/knitr>)\"\nNote that the engine variable values include markdown for hyperlinks.\nTo include the value of a variable, use the {{< var >}} shortcode, for example:\nVersion {{< var version >}} is a minor upgrade.\n\nPlease contact us at {{< var email.info >}}.\n\nQuarto includes {{< var engine.jupyter >}} and \n{{< var engine.knitr >}} computation engines."
  },
  {
    "objectID": "docs/authoring/variables.html#meta",
    "href": "docs/authoring/variables.html#meta",
    "title": "Variables",
    "section": "meta",
    "text": "meta\nThe meta shortcode allows you to insert content from Pandoc metadata (e.g. YAML at the top of the document and/or in _quarto.yml).\nFor example, the following shortcode inserts the value of the title field from YAML metadata:\n{{< meta title >}}\nYou can dereference sub-keys using the dot (.) delimiter. For example:\n{{< meta author.affiliation >}}"
  },
  {
    "objectID": "docs/authoring/variables.html#env",
    "href": "docs/authoring/variables.html#env",
    "title": "Variables",
    "section": "env",
    "text": "env\nThe env shortcode enables you to read values from environment variables. For example:\nVersion {{< env PRODUCT_VERSION >}} is a minor upgrade."
  },
  {
    "objectID": "docs/authoring/variables.html#escaping",
    "href": "docs/authoring/variables.html#escaping",
    "title": "Variables",
    "section": "Escaping",
    "text": "Escaping\nIf you are writing documentation about using variable shortcodes (for example, this article!) you might need to prevent them from being processed. You can do this in two ways:\n\nEscape the shortcode reference with extra braces like this:\n{{{< var version >}}}\nAdd a shortcodes=false attribute to any code block you want to prevent processing of shortcodes within:\n```{shortcodes=false}\n\n\n{{< var version >}}\n\n\n```"
  },
  {
    "objectID": "docs/authoring/filters.html",
    "href": "docs/authoring/filters.html",
    "title": "Filters",
    "section": "",
    "text": "If the base features of Pandoc and Quarto don’t do exactly what you need, you can very likely create a Pandoc Filter that bridges the gap. It’s also possible to create filters that preprocess the contents of Jupyter Notebooks (.ipynb) before they are rendered by Quarto and Pandoc. We’ll describe each of these filters in turn below."
  },
  {
    "objectID": "docs/authoring/filters.html#pandoc-filters",
    "href": "docs/authoring/filters.html#pandoc-filters",
    "title": "Filters",
    "section": "Pandoc Filters",
    "text": "Pandoc Filters\nPandoc consists of a set of readers and writers. When converting a document from one format to another, text is parsed by a reader into pandoc’s intermediate representation of the document—an “abstract syntax tree” or AST—which is then converted by the writer into the target format. The pandoc AST format is defined in the module Text.Pandoc.Definition in the pandoc-types package.\nA “filter” is a program that modifies the AST, between the reader and the writer.\nINPUT --reader--> AST --filter--> AST --writer--> OUTPUT\nPandoc’s built-in citation processing is implemented as a filter, as are many of Quarto’s extensions (e.g. cross-references, figure layout, etc.). Some other examples include:\n\n\n\n\n\n\n\nFilter\nDescription\n\n\n\n\nspellcheck\nChecks the spelling of words in the body of the document (omitting metadata).\n\n\npandoc-quotes\nReplaces non-typographic quotation marks with typographic ones for languages other than American English\n\n\n\n\nUsing Filters\nAdd one or more filters to document rendering using the filters option. For example:\nfilters:\n   - spellcheck.lua\nBy default, user filters are run after Quarto’s built-in filters. For some filters you’ll want to modify this behavior For example, here we arrange to run pandoc-quotes.lua before Quarto’s filters and spellcheck.lua after:\nfilters:\n  - pandoc-quotes.lua\n  - quarto\n  - spellcheck.lua\n\n\nWriting Filters\nYou can write Pandoc filters using Lua (via Pandoc’s built-in Lua interpreter) or using any other language using a JSON representation of the Pandoc AST piped to/from an external process.\nWe strongly recommend using Lua Filters, which have the following advantages:\n\nNo external dependencies\nHigh performance (no serialization or process execution overhead)\nAccess to Pandoc’s library of Lua helper functions.\n\nSee the documentation on Writing Lua Filters for additional details.\nIf you want to write a JSON filter, see the documentation on Writing JSON filters."
  },
  {
    "objectID": "docs/authoring/filters.html#notebook-filters",
    "href": "docs/authoring/filters.html#notebook-filters",
    "title": "Filters",
    "section": "Notebook Filters",
    "text": "Notebook Filters\nWhenever you use Jupyter for embedded computations a notebook (.ipynb) is part of the rendering pipeline. This is naturally the case for rendering .ipynb files directly, however it is also the case for .qmd files that have embedded Julia or Python cells (in which case a temporary .ipynb is constructed). This notebook is ultimately converted into markdown and then rendered by Pandoc to the specified output format(s).\nYou may wish to do some pre-processing on the notebook prior to its conversion to markdown. This can be accomplished by specifying one or or more ipynb-filters. These filters are passed the JSON representation of the notebook on stdin and should write a transformed JSON representation to stdout.\nFor example, this notebook filter uses the nbformat package to read a notebook, prepend a comment to the source of each code cell, and then write it back to stdout:\nimport sys\nimport nbformat\n\n# read notebook from stdin\nnb = nbformat.reads(sys.stdin.read(), as_version = 4)\n\n# prepend a comment to the source of each cell\nfor index, cell in enumerate(nb.cells):\n  if cell.cell_type == 'code':\n     cell.source = \"# comment\\n\" + cell.source\n  \n# write notebook to stdout \nnbformat.write(nb, sys.stdout)\nYou can arrange for this filter to be run using the ipynb-filters option (specified at either the document or project level):\n---\nipynb-filters:\n  - filter.py\n---\nNote that the current working directory for the filter will be set to the location of the input notebook."
  },
  {
    "objectID": "docs/authoring/shortcodes.html",
    "href": "docs/authoring/shortcodes.html",
    "title": "Shortcodes",
    "section": "",
    "text": "Shortcodes are special markdown directives that generate various types of content. Quarto shortcodes are similar in form and function to Hugo shortcodes and WordPress shortcodes.\nFor example, the following shortcode prints the title from document metadata:\n{{< meta title >}}\nQuarto supports several shortcodes natively:\n\n\n\nShortcode\nDescription\n\n\n\n\nvar\nPrint value from _variables.yml file\n\n\nmeta\nPrint value from document metadata\n\n\nenv\nPrint system environment variable\n\n\npagebreak\nInsert a native page-break\n\n\ninclude\nInclude contents of another qmd\n\n\n\nThis article describes how to create your own shortcodes."
  },
  {
    "objectID": "docs/authoring/shortcodes.html#custom-shortcodes",
    "href": "docs/authoring/shortcodes.html#custom-shortcodes",
    "title": "Shortcodes",
    "section": "Shortcode Basics",
    "text": "Shortcode Basics\nYou can create your own shortcodes using Lua (the same language used for filters). To get started with developing shortcodes:\n\nBe sure you have a very recent version of Quarto CLI (custom shortcodes requires v0.9.341 or greater).\nRead the documentation on Pandoc Lua Filters, which describes the Lua extension API for Pandoc.\n\nCustom shortcodes are implemented as Lua functions that take one or more arguments and return a Pandoc AST node (or list of nodes).\nHere’s the implementation of the env shortcode that is built in to Quarto:\nenv.lua\nfunction env(args)\n  local var = pandoc.utils.stringify(args[1])\n  local value = os.getenv(var)\n  if value ~= nil then\n    return pandoc.Str(value)\n  else\n    return pandoc.Null()\n  end\nend\nNote that arguments to shortcodes are provided in args (a 1-based array), and that each argument is a list of Pandoc inlines (i.e. markdown AST parsed from the text).\nWe use the pandoc.utils.stringify() function to convert the inlines to an ordinary string, and then the os.getenv() function to get its value.\nIf this function was included in a source file named env.lua, you could register it for use with:\nshortcodes:\n  - env.lua\nThen use it with:\n{{< env HOME >}}\nBelow we’ll provide a few a few more examples of custom shortcodes and their implementation."
  },
  {
    "objectID": "docs/authoring/shortcodes.html#example-raw-output",
    "href": "docs/authoring/shortcodes.html#example-raw-output",
    "title": "Shortcodes",
    "section": "Example: Raw Output",
    "text": "Example: Raw Output\nShortcodes can tailor their output to the format being rendered to. This is often useful when you want to conditionally generate rich HTML output but still have the same document render properly to PDF or MS Word.\nThe pagebreak shortcode generates “native” pagebreaks in a variety of formats. Here’s the implementation of pagebreak:\npagebreak.lua\nfunction pagebreak()\n \n  local raw = {\n    epub = '<p style=\"page-break-after: always;\"> </p>',\n    html = '<div style=\"page-break-after: always;\"></div>',\n    latex = '\\\\newpage{}',\n    ooxml = '<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>',\n    odt = '<text:p text:style-name=\"Pagebreak\"/>',\n    context = '\\\\page'\n  }\n\n  if FORMAT == 'docx' then\n    return pandoc.RawBlock('openxml', raw.ooxml)\n  elseif FORMAT:match 'latex' then\n    return pandoc.RawBlock('tex', raw.latex)\n  elseif FORMAT:match 'odt' then\n    return pandoc.RawBlock('opendocument', raw.odt)\n  elseif FORMAT:match 'html.*' then\n    return pandoc.RawBlock('html', raw.html)\n  elseif FORMAT:match 'epub' then\n    return pandoc.RawBlock('html', raw.epub)\n  elseif FORMAT:match 'context' then\n    return pandoc.RawBlock('context', raw.context)\n  else\n    -- fall back to insert a form feed character\n    return pandoc.Para{pandoc.Str '\\f'}\n  end\n\nend\nWe use the pandoc.RawBlock() function to output the appropriate raw content for the target FORMAT. Note that raw blocks are passed straight through to the output file and are not processed as markdown.\nIf this function was implemented within pagebreak.lua, you could register it for use with:\nshortcodes:\n  - pagebreak.lua\nThen use it with:\n{{< pagebreak >}}"
  },
  {
    "objectID": "docs/authoring/shortcodes.html#example-named-arguments",
    "href": "docs/authoring/shortcodes.html#example-named-arguments",
    "title": "Shortcodes",
    "section": "Example: Named Arguments",
    "text": "Example: Named Arguments\nThe examples above use either a single argument (env) or no arguments at all (pagebreak). Here we demonstrate named argument handling by implementing a git-rev shortcode that prints the current git revision, providing a short option to determine whether a short or long SHA1 is displayed:\ngit.lua\n-- run git and read its output\nfunction git(command)\n  local p = io.popen(\"git \" .. command)\n  local output = p:read('*all')\n  p:close()\n  return output\nend\n\n-- return a table containing shortcode definitions\n-- defining shortcodes this way allows us to create helper \n-- functions that are not themselves considered shortcodes \nreturn {\n  [\"git-rev\"] = function(args, kwargs)\n    -- command line args\n    local cmdArgs = \"\"\n    local short = pandoc.utils.stringify(kwargs[\"short\"])\n    if short == \"true\" then\n      cmdArgs = cmdArgs .. \"--short \"\n    end\n    \n    -- run the command\n    local cmd = \"rev-parse \" .. cmdArgs .. \"HEAD\"\n    local rev = git(cmd)\n    \n    -- return as string\n    return pandoc.Str(rev)\n  end\n}\nThere are some new things demonstrated here :\n\nRather than defining our shortcode functions globally, we return a table with the shortcode definitions. This allows us to define helper functions that are not themselves registered as shortcodes. It also enables us to define a shortcode with a dash (-) in its name.\nThere is a new argument to our shortcode handler: kwargs. This holds any named arguments to the shortcode. As with args, values in kwargs will always be a list of Pandoc inlines (allowing you to accept markdown as an argument). Since short is a simple boolean value we need to call pandoc.utils.stringify() to treat it as a string and then compare it to \"true\".\n\nWe’d register and use this shortcode as follows:\n---\ntitle: \"My Document\"\nshortcodes:\n  - git.lua\n---\n\n{{< git-rev >}}\n{{< git-rev short=true >}}"
  },
  {
    "objectID": "docs/authoring/shortcodes.html#example-metadata-options",
    "href": "docs/authoring/shortcodes.html#example-metadata-options",
    "title": "Shortcodes",
    "section": "Example: Metadata Options",
    "text": "Example: Metadata Options\nIn some cases you may want to provide options that affect how you shortcode behaves. There is a third argument to shortcode handlers (meta) that provides access to document and/or project level metadata.\nLet’s implement a different version of the git-rev shortcode that emits the revision as a link to GitHub rather than plain text. To do this we make use of github.owner and github.repo metadata values:\ngit.lua\nfunction git(command)\n  local p = io.popen(\"git \" .. command)\n  local output = p:read('*all')\n  p:close()\n  return output\nend\n\nreturn {\n  \n  [\"git-rev\"] = function(args, kwargs, meta)\n    -- run the command\n    local rev = git(\"rev-parse HEAD\")\n    \n    -- target repo\n    local owner = pandoc.utils.stringify(meta[\"github.owner\"])\n    local repo = pandoc.utils.stringify(meta[\"github.repo\"])\n    local url = \"https://github.com/\" \n                .. owner .. \"/\" .. repo .. \"/\" .. rev \n    \n    -- return as link\n    return pandoc.Link(pandoc.Str(rev), url)\n  end\n}\nAs with args and kwargs, meta values are always provided as a list of Pandoc inlines so often need to be converted to string using pandoc.utils.stringify().\nTo use this shortcode in a document we register it, provide the GitHub info as document options, then include the shortcode where we want the link to be:\n---\ntitle: \"My Document\"\nshortcodes:\n  - git.lua\ngithub:\n  owner: quarto-dev\n  repo: quarto-cli\n---\n\n{{< git-rev >}}\nThe shortcode registration and GitHub metadata could just as well been provided in a project-level _quarto.yml file or a directory-level _metadata.yml file."
  },
  {
    "objectID": "docs/authoring/shortcodes.html#escaping",
    "href": "docs/authoring/shortcodes.html#escaping",
    "title": "Shortcodes",
    "section": "Escaping",
    "text": "Escaping\nIf you are writing documentation about using variable shortcodes (for example, this article!) you might need to prevent them from being processed. You can do this in two ways:\n\nEscape the shortcode reference with extra braces like this:\n{{{< var version >}}}\nAdd a shortcodes=false attribute to any code block you want to prevent processing of shortcodes within:\n```{shortcodes=false}\n\n\n{{< var version >}}\n\n\n```"
  },
  {
    "objectID": "docs/authoring/article-layout.html",
    "href": "docs/authoring/article-layout.html",
    "title": "Article Layout",
    "section": "",
    "text": "Quarto supports a variety of page layout options that enable you to author content that:\n\nFills the main content region\nOverflows the content region\nSpans the entire page\nOccupies the document margin\n\nQuarto uses the concept of columns to describe page layout (e.g. the “body” column, the “margin” column, etc.). Below we’ll describe how to arrange content into these columns.\nAll of the layout capabilities described in this document work for HTML output and many work for PDF and LaTeX output. For details about the PDF / LaTeX output, see PDF/LaTeX Layout."
  },
  {
    "objectID": "docs/authoring/article-layout.html#body-column",
    "href": "docs/authoring/article-layout.html#body-column",
    "title": "Article Layout",
    "section": "Body Column",
    "text": "Body Column\nBy default, elements are position in the body of the document and are allowed to span the content of the document, like the below.\n\n.column-body\n\nBut if you’d like, you can extend content slightly outside the bounds of the body by creating a div with the .column-body-outset class. For example:\n:::{.column-body-outset}\nOutset content...\n:::\n\n.column-body-outset"
  },
  {
    "objectID": "docs/authoring/article-layout.html#page-column",
    "href": "docs/authoring/article-layout.html#page-column",
    "title": "Article Layout",
    "section": "Page Column",
    "text": "Page Column\nIf you need even more space for your content, you can use the .column-page class to make the content much wider, though stopping short of extending across the whole document.\n\n.column-page\n\nFor example, to create a wider image, you could use:\n:::{.column-page}\n![](images/elephant.jpg)\n:::\n\n\n\nFor computational output, you can specify the page column in your code cell options. For example:\n\n```{r}\n#| column: page\n\nknitr::kable(\n  mtcars[1:6, 1:10]\n)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n\n\n\n\n\nIn addition, you can use .column-page-inset to inset the element from the page slightly, like so:\n\n.column-page-inset"
  },
  {
    "objectID": "docs/authoring/article-layout.html#screen-column",
    "href": "docs/authoring/article-layout.html#screen-column",
    "title": "Article Layout",
    "section": "Screen Column",
    "text": "Screen Column\nYou can have content span the full width of the page with no margin (full bleed). For this, use the .column-screen class or specify column: screen on a code cell. For example:\n::: {.column-screen}\n![A full screen image](/image.png)\n:::\n\n.column-screen\n\nThe following code displays a Leaflet map across the whole page.\n\n```{r}\n#| column: screen\n\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n\n\n\n\n\nScreen Inset\nIf you’d like a full width appearance, but would like to retain a margin, you can use inset or inset-shaded modifiers on the column. For example:\n::: {.column-screen-inset}\n![A full screen image](/image.png)\n:::\n\n.column-screen-inset\n\nThe inset-shaded modifier results in a block spanning the full width but wrapped with a lightly shaded background. For example:\n\n```{r}\n#| column: screen-inset-shaded\n\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n\n\n\n\nColumn layouts like screen-inset-shaded will work with advanced figure layout. For example, it is straightforward to create a multi column presentation of figures that spans the document:\n\n```{r}\n#| column: screen-inset-shaded\n#| layout-nrow: 1\n\nplot(cars)\nplot(iris)\nplot(pressure)\n```"
  },
  {
    "objectID": "docs/authoring/article-layout.html#margin-content",
    "href": "docs/authoring/article-layout.html#margin-content",
    "title": "Article Layout",
    "section": "Margin Content",
    "text": "Margin Content\nYou can place content within the right margin of Quarto document. For example, here we use the .column-margin class to place an image in the margin:\n::: {.column-margin}\n![A margin image](image.png)\n:::\n\n\n.column-margin\n\nMargin Figures\nFigures that you create using code cells can be placed in the margin by using the column: margin code cell option. If the code produces more than one figure, each of the figures will be placed in the margin.\n\n```{r}\n#| label: fig-mtcars\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| column: margin\n\nlibrary(ggplot2)\nmtcars2 <- mtcars\nmtcars2$am <- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\n\nFigure 1: MPG vs horsepower, colored by transmission.\n\n\n\n\n\nMargin Tables\nYou an also place tables in the margin of your document by specifying column: margin.\n\n```{r}\n#| column: margin\n\nknitr::kable(\n  mtcars[1:6, 1:3]\n)\n```\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\n\nMazda RX4\n21.0\n6\n160\n\n\nMazda RX4 Wag\n21.0\n6\n160\n\n\nDatsun 710\n22.8\n4\n108\n\n\nHornet 4 Drive\n21.4\n6\n258\n\n\nHornet Sportabout\n18.7\n8\n360\n\n\nValiant\n18.1\n6\n225\n\n\n\n\n\n\nMultiple Outputs\nYou can also target specific output types (for example, figures) to be placed in the margin. For example, the following code will render a table summarizing the mtcars dataset and render a lot of the data in the margin next to the table.\n\n```{r}\n#| fig-column: margin\n\nmtcars2 <- mtcars\nmtcars2$am <- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\n\nknitr::kable(\n  mtcars[1:6, 1:6]\n)\n\nlibrary(ggplot2)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n\n\n\n\n\n\n\n\n\n\nOther Content\nYou can also place content in the margin by targeting the margin column using a div with the .column-margin class. For example:\n::: {.column-margin}\nWe know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:\n\n\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n\n\n:::\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]"
  },
  {
    "objectID": "docs/authoring/article-layout.html#page-breaks",
    "href": "docs/authoring/article-layout.html#page-breaks",
    "title": "Article Layout",
    "section": "Page Breaks",
    "text": "Page Breaks\nThe pagebreak shortcode enables you to insert a native pagebreak into a document (.e.g in LaTeX this would be a \\newpage, in MS Word a docx-native pagebreak, in HTML a page-break-after: always CSS directive, etc.):\npage 1\n\n{{< pagebreak >}}\n\npage 2\nNative pagebreaks are supported for HTML, LaTeX, Context, MS Word, Open Document, and ePub (for other formats a form-feed character \\f is inserted)."
  },
  {
    "objectID": "docs/authoring/article-layout.html#margin-references",
    "href": "docs/authoring/article-layout.html#margin-references",
    "title": "Article Layout",
    "section": "Margin References",
    "text": "Margin References\nFootnotes and the bibliography typically appear at the end of the document, but you can choose to have them placed in the margin by setting the following option1 in the document front matter:1 You can also position references in other location (such as the bottom of the block, section, or document).\n---\nreference-location: margin\ncitation-location: margin\n---\nWith these options set, footnotes and citations will (respectively) be automatically be placed in the margin of the document rather than the bottom of the page. As an example, when I cite Xie, Allaire, and Grolemund (2018), the citation bibliography entry itself will now appear in the margin.\n\nXie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. R Markdown: The Definitive Guide. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown.\n\nAsides\nAsides allow you to place content aside from the content it is placed in. Asides look like footnotes, but do not include the footnote mark (the superscript number). This is a span that has the class aside which places it in the margin without a footnote number.\n[This is a span that has the class aside which places it in the margin without a footnote number.]{.aside}"
  },
  {
    "objectID": "docs/authoring/article-layout.html#margin-captions",
    "href": "docs/authoring/article-layout.html#margin-captions",
    "title": "Article Layout",
    "section": "Margin Captions",
    "text": "Margin Captions\nFor figures and tables, you may leave the content in the body of the document while placing the caption in the margin of the document. Using cap-location: margin in a code cell or document front matter to control this. For example:\n\n```{r}\n#| label: fig-cap-margin\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| cap-location: margin\n\nlibrary(ggplot2)\nmtcars2 <- mtcars\nmtcars2$am <- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\nFigure 2: MPG vs horsepower, colored by transmission."
  },
  {
    "objectID": "docs/authoring/article-layout.html#overflowing-content",
    "href": "docs/authoring/article-layout.html#overflowing-content",
    "title": "Article Layout",
    "section": "Overflowing Content",
    "text": "Overflowing Content\nYou can also extend content outside the body region on only the left or right side of the document by using the right and left versions of the body, page, and screen columns to layout your content. The left or right version of these columns are as follows:\n\n.column-body-outset-right\n\n\n.column-page-inset-right\n\n\n.column-page-right\n\n\n.column-screen-inset-right\n\n\n.column-screen-right\n\n\n.column-body-outset-left\n\n\n.column-page-inset-left\n\n\n.column-page-left\n\n\n.column-screen-inset-left\n\n\n.column-screen-left\n\nUse a div with one of the above classes to align content into one of the overflow regions. This also works using the column option of executable code cells:\n\n```{r}\n#| column: screen-inset-right\n\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```"
  },
  {
    "objectID": "docs/authoring/article-layout.html#options-reference",
    "href": "docs/authoring/article-layout.html#options-reference",
    "title": "Article Layout",
    "section": "Options Reference",
    "text": "Options Reference\n\nGlobal Options\nSome layout options can be specified globally in document yaml. For example:\n---\nfig-cap-location: margin\nreference-location: margin\n---\nAll of the below options currently only support setting a value of margin which tells Quarto to place the corresponding element in the margin.\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nreference-location\nWhere to place footnotes. Defaults to document.\n[document | section | block | margin ]\n\n\ncitation-location\nWhere to place citations. Defaults to document.\n[document | margin ]\n\n\ncap-location\nWhere to place figure and table captions. Defaults to `bottom` for figures and top for tables.\n[top | bottom | margin]\n\n\nfig-cap-location\nWhere to place figure captions. Defaults to bottom.\n[top | bottom | margin]\n\n\ntbl-cap-location\nWhere to place table captions. Defaults to top.\n[top | bottom | margin]\n\n\n\n\n\nCode Cell Options\nYou can also set layout column on specific code cells. This controls the layout of content that is produced by the code cell.\n```{r}\n#| column: page\n\nplot(cars)\n```\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ncolumn\nLayout column to use for code cell outputs. See column options below.\n\n\nfig-column\nLayout column to use for code cell figure outputs. See column options below.\n\n\ntbl-column\nLayout column to use for code cell table outputs. See column options below.\n\n\ncap-location\nWhere to place figure and table captions produced by this code cell. Defaults to bottom for figures and top for tables.\n[top | bottom | margin]\n\n\nfig-cap-location\nWhere to place captions for figures produced by this code cell. Defaults to inline.\n[inline | margin]\n\n\ntbl-cap-location\nWhere to place captions for tables produced by this code cell. Defaults to inline.\n[inline | margin]\n\n\n\n\n\n\nUsing Classes\nIn addition to global and code cell specific options, you may use divs with layout classes (prefixed with .column-) to arrange content into columns:\n::: {.column-margin}\nThis content will appear in the margin!\n:::\n\n\nAvailable Columns\nHere are all of the available column specifiers:\n\n\n\n\n\n\n\n\n\nColumn\nCode Cell column\nClass Name\n\n\n\n\nBody\ncolumn: body\ncolumn: body-outset\ncolumn: body-outset-left\ncolumn: body-outset-right\n.column-body\n.column-body-outset\n.column-body-outset-left\n.column-body-outset-right\n\n\nPage\ncolumn: page\ncolumn: page-left\ncolumn: page-right\n.column-page\n.column-page-left\n.column-page-right\n\n\nScreen Inset\ncolumn: screen-inset\ncolumn: screen-inset-shaded\ncolumn: screen-inset-left\ncolumn: screen-inset-right\n.column-screen-inset\n.column-screen-inset-shaded\n.column-screen-inset-left\n.column-screen-inset-right\n\n\nScreen\ncolumn: screen\ncolumn: screen-left\ncolumn: screen-rightcolumn:\n.column-screen\n.column-screen-left\n.column-screen-right\n\n\nMargin\ncolumn: margin\n.column-margin"
  },
  {
    "objectID": "docs/authoring/article-layout.html#pdflatex-layout",
    "href": "docs/authoring/article-layout.html#pdflatex-layout",
    "title": "Article Layout",
    "section": "PDF/LaTeX Layout",
    "text": "PDF/LaTeX Layout\nWhile most of the layout capabilities described are supported for both HTML and PDF output, some are available only for HTML output. You can use the full set of columns for HTML. Then, when you render PDF or LaTeX output, content will automatically be placed in the most appropriate related column (typically this will mean using the main column and right margin). Here is how columns are mapped:\n\nAny column that uses the right margin (e.g. page, screen, screen-right, etc. will be rendered as page-right in LaTeX.\nAny column that uses the left margin will be rendered as normal body content.\n\n\nPage Geometry\nWhen you render a PDF using content in the margin or content that spans the page, Quarto automatically will adjust the page geometry for the default Quarto LaTeX document classes (KOMA scrartcl, scrreport, or scrbook) to create a slightly narrower body content region and a slightly wider margin region. This adjustment will incorporate known paper sizes to create a reasonable page geometry for most content.\nYou can control the page geometry directly yourself by setting geometry options in your document’s front matter. For example:\n---\ngeometry:\n  - left=.75in\n  - textwidth=4.5in\n  - marginparsep=.25in\n  - marginparwidth=2.25in\n---\nYou can use these options to control the page geometry for the built in document classes or to customize the geometry of other document classes that you may be using.\n\n\n\n\n\n\nIf you’d like to view the page geometry in your rendered PDF, you can pass showframe to the geometry option as in the below example.\n---\ngeometry:\n  - showframe\n---\n\n\n\n\n\nCode Blocks\nWhen rendering a PDF that uses the margins for content, Quarto automatically adjusts the appearance of code blocks. Rather than having a solid background color, a left border treatment is used.\nThis enables non-breaking code to overflow into the margin without cosmetic issues created by the code block background (which does not overflow into the margin region).\nYou can disable this treatment by setting the following code-block-border-left: false in your document front matter."
  },
  {
    "objectID": "docs/authoring/diagrams.html",
    "href": "docs/authoring/diagrams.html",
    "title": "Diagrams",
    "section": "",
    "text": "Quarto has native support for embedding Mermaid and Graphviz diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, gnatt charts, and more using a plain text syntax inspired by markdown.\nFor example, here we embed a flowchart created using Mermaid:\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHard edge\n\n\n\nRound edge\n\n\n\nDecision\n\n\n\nResult one\n\n\n\nResult two\n\n\n\n\n\n\n\nAs illustrated above, diagrams are embedded using {mermaid} and {dot} executable cells (dot is underlying language of Graphviz)\nDiagrams are a recent addition to Quarto—you should make sure to update to the very latest version of Quarto (v0.9.397 or higher) before trying out the features described below.\n\n\n\n\n\n\nNote\n\n\n\nDiagram rendering makes use use of the Chrome web browser to create an SVG version for web output and a high-quality PNG for print output. Quarto can automatically use an existing version of Chrome on your system for rendering, or alternatively if you don’t have Chrome can use a lighter-weight library version of it (see Chrome Install below for details)."
  },
  {
    "objectID": "docs/authoring/diagrams.html#mermaid",
    "href": "docs/authoring/diagrams.html#mermaid",
    "title": "Diagrams",
    "section": "Mermaid",
    "text": "Mermaid\nMermaid is a Javascript based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams.\nAbove we demonstrated a flowchart created with Mermaid, here is a sequence diagram (also embedded using a {mermaid} executable cell):\n\n```{mermaid}\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice->>John: Hello John, how are you?\n  loop Healthcheck\n    John->>John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts <br/>prevail!\n  John-->>Alice: Great!\n  John->>Bob: How about you?\n  Bob-->>John: Jolly good!\n```\n\n\n\n\n\nAliceBobJohnHello John, how are you?Fight against hypochondrialoop[Healthcheck]Rational thoughts prevail!Great!How about you?Jolly good!AliceBobJohn\n\n\n\n\n\nTo learn more about using Mermaid, see the Mermaid website or the Mermaid book (which is written by the creator of Mermaid)."
  },
  {
    "objectID": "docs/authoring/diagrams.html#graphviz",
    "href": "docs/authoring/diagrams.html#graphviz",
    "title": "Diagrams",
    "section": "Graphviz",
    "text": "Graphviz\nThe Graphviz layout programs take descriptions of graphs in a simple text language, and make diagrams in useful formats. Graphviz has many useful features for concrete diagrams, such as options for colors, fonts, tabular node layouts, line styles, hyperlinks, and custom shapes.\nFor example, here is a simple undirected graph created using graphviz:\n\n```{dot}\ngraph G {\n  layout=neato\n  run -- intr;\n  intr -- runbl;\n  runbl -- run;\n  run -- kernel;\n  kernel -- zombie;\n  kernel -- sleep;\n  kernel -- runmem;\n  sleep -- swap;\n  swap -- runswap;\n  runswap -- new;\n  runswap -- runmem;\n  new -- runmem;\n  sleep -- runmem;\n}\n```\n\n\n\n\n\n\nG\n\n  \n\nrun\n\n run   \n\nintr\n\n intr   \n\nrun–intr\n\n   \n\nkernel\n\n kernel   \n\nrun–kernel\n\n   \n\nrunbl\n\n runbl   \n\nintr–runbl\n\n   \n\nrunbl–run\n\n   \n\nzombie\n\n zombie   \n\nkernel–zombie\n\n   \n\nsleep\n\n sleep   \n\nkernel–sleep\n\n   \n\nrunmem\n\n runmem   \n\nkernel–runmem\n\n   \n\nsleep–runmem\n\n   \n\nswap\n\n swap   \n\nsleep–swap\n\n   \n\nrunswap\n\n runswap   \n\nswap–runswap\n\n   \n\nrunswap–runmem\n\n   \n\nnew\n\n new   \n\nrunswap–new\n\n   \n\nnew–runmem\n\n  \n\n\n\n\n\nNote that the cell options syntax is slightly different for {mermaid} and {dot} (%%| and //|, respectively) because they have distinct character sequences for single-line comments.\nTo learn more about Graphviz, see the Graphviz website, this list of simple Graphiz Examples, or the Graphviz Gallery."
  },
  {
    "objectID": "docs/authoring/diagrams.html#authoring",
    "href": "docs/authoring/diagrams.html#authoring",
    "title": "Diagrams",
    "section": "Authoring",
    "text": "Authoring\nThere are a variety of tools available to improve your productivity authoring diagrams:\n\nThe Mermaid Live Editor is an online tool for editing and previewing Mermaid diagrams in real time.\nGraphviz Online provides a similar tool for editing Graphviz diagrams.\nRStudio includes support for editing and previewing .mmd and .dot files (with help from the DiagrammeR package).\nThe Quarto VS Code Extension supports live preview of diagrams embedded in .qmd files and in .mmd and .dot files:\n\nNote that you should be sure to have installed the very latest version of the Quarto VS Code extension to try this out."
  },
  {
    "objectID": "docs/authoring/diagrams.html#figures",
    "href": "docs/authoring/diagrams.html#figures",
    "title": "Diagrams",
    "section": "Figures",
    "text": "Figures\nDiagrams can be treated as figures the same way that images and plot output are. For example, if we added the following figure options to the diagram above:\n```{dot}\n//| label: fig-simple\n//| fig-cap: This is a simple graphviz graph.\n\n```\nWe’d get this output:\n\n\n\n\n\n\n\n\nG\n\n  \n\nrun\n\n run   \n\nintr\n\n intr   \n\nrun–intr\n\n   \n\nkernel\n\n kernel   \n\nrun–kernel\n\n   \n\nrunbl\n\n runbl   \n\nintr–runbl\n\n   \n\nrunbl–run\n\n   \n\nzombie\n\n zombie   \n\nkernel–zombie\n\n   \n\nsleep\n\n sleep   \n\nkernel–sleep\n\n   \n\nrunmem\n\n runmem   \n\nkernel–runmem\n\n   \n\nsleep–runmem\n\n   \n\nswap\n\n swap   \n\nsleep–swap\n\n   \n\nrunswap\n\n runswap   \n\nswap–runswap\n\n   \n\nrunswap–runmem\n\n   \n\nnew\n\n new   \n\nrunswap–new\n\n   \n\nnew–runmem\n\n  \n\n\nFigure 1: This is a simple graphviz graph"
  },
  {
    "objectID": "docs/authoring/diagrams.html#file-include",
    "href": "docs/authoring/diagrams.html#file-include",
    "title": "Diagrams",
    "section": "File Include",
    "text": "File Include\nYou might find it more convenient to edit your diagram in a standalone file and then reference it from within your .qmd document. You can do this by adding the file option to a Mermaid or Graphviz cell.\nFor example, here we include a very complex diagram whose definition would be too unwieldy to provide inline:\n```{dot}\n//| label: fig-linux-kernel\n//| fig-cap: \"A diagram of the Linux kernel.\"\n//| file: linux-kernel-diagram.dot\n```\n\n\n\n\n\n\n\n\nLinux_kernel_diagram\n\n   \n\nSCI\n\n  System calls      \n\nsystem\n\n  system     \n\nsystem->system_\n\n    \n\nprocessing\n\n  processing      \n\nsysfs\n\n proc & sysfs file systems   \n\nSCI->sysfs\n\n   \n\nDM\n\n Device Model   \n\nsysfs->DM\n\n   \n\nlog_sys\n\n system run, modules, generic HW access    \n\nDM->log_sys\n\n   \n\nbus_drv\n\n bus drivers   \n\nlog_sys->bus_drv\n\n   \n\nbuses\n\n buses: PCI, USB …   \n\nbus_drv->buses\n\n    \n\nsock\n\n Sockets    \n\nnetworking\n\n  networking     \n\nnetworking->networking_\n\n    \n\nprot_fam\n\n protocol families   \n\nsock->prot_fam\n\n   \n\nlog_prot\n\n protocols: TCP, UDP, IP   \n\nprot_fam->log_prot\n\n   \n\nnetif\n\n network interfaces and drivers   \n\nlog_prot->netif\n\n   \n\nnet_hw\n\n network: Ethernet, WiFi …   \n\nnetif->net_hw\n\n   \n\nNFS\n\n NFS   \n\nNFS->log_prot\n\n    \n\nproc\n\n Processes    \n\nprocessing->processing_\n\n    \n\nmemory\n\n  memory      \n\nTasks\n\n Tasks   \n\nproc->Tasks\n\n   \n\nsync\n\n synchronization   \n\nTasks->sync\n\n   \n\nsched\n\n Scheduler   \n\nsync->sched\n\n   \n\nIRQ\n\n interrupts core, CPU arch   \n\nsched->IRQ\n\n   \n\nCPU\n\n CPU   \n\nIRQ->CPU\n\n   \n\nbottom\n\n © 2007-2022 Costa Shulyupin http://www.MakeLinux.net/kernel/diagram      \n\nMA\n\n memory access   \n\nVM\n\n Virtual memory   \n\nMA->VM\n\n   \n\nmmap\n\n memory mapping   \n\nVM->mmap\n\n   \n\nlog_mem\n\n logical memory   \n\nmmap->log_mem\n\n   \n\nSW\n\n Swap   \n\nmmap->SW\n\n   \n\nPA\n\n Page Allocator   \n\nlog_mem->PA\n\n   \n\nRAM\n\n MMU, RAM   \n\nPA->RAM\n\n   \n\nblock\n\n Block devices and drivers   \n\nSW->block\n\n   \n\nSD\n\n storage devices: SCSI, NVMe …   \n\nblock->SD\n\n   \n\nPC\n\n page cache   \n\nPC->PA\n\n    \n\nmemory->memory_\n\n    \n\nstorage\n\n  storage        \n\nFS\n\n files and directories     \n\nstorage->storage_\n\n    \n\nVFS\n\n Virtual File System   \n\nFS->VFS\n\n   \n\nVFS->NFS\n\n   \n\nVFS->mmap\n\n   \n\nVFS->PC\n\n   \n\nlogFS\n\n logical filesystems: ext3, xfs …   \n\nVFS->logFS\n\n   \n\nlogFS->block\n\n    \n\nchar\n\n char devices    \n\nHI\n\n  human interface      \n\nHI->HI_\n\n    \n\ninput\n\n input subsystem   \n\nchar->input\n\n   \n\nF7\n\n HI class drivers   \n\ninput->F7\n\n   \n\nHID\n\n  HI peripherals drivers     \n\nF7->HID\n\n   \n\ndisplay\n\n keyboard, mouse, display, audio   \n\nHID->display\n\n     \n\nfunctions\n\n  functions     \n\nfunctions->functions_\n\n    \n\nlayers\n\n  layers       \n\nusr\n\n user space interfaces   \n\nusr->usr_\n\n    \n\nvirt\n\n  virtual subsystems     \n\nusr->virt\n\n    \n\nvirt->D0\n\n    \n\nbridges\n\n  bridges     \n\nvirt->bridges\n\n    \n\nbridges->E0\n\n    \n\nlogical\n\n logical   \n\nbridges->logical\n\n    \n\nlogical->F0\n\n    \n\nHWI\n\n hardware interfaces   \n\nlogical->HWI\n\n    \n\nHWI->G0\n\n    \n\nHW\n\n electronics, hardware   \n\nHWI->HW\n\n    \n\nHW->H0\n\n    \n\nlayers->usr\n\n    \n\nLKD\n\nLinux kernel diagram   \n\n\nFigure 2: A diagram of the Linux kernel.\n\n\n\n\nNote that the label and fig-cap attributes still work as expected with file includes."
  },
  {
    "objectID": "docs/authoring/diagrams.html#sizing",
    "href": "docs/authoring/diagrams.html#sizing",
    "title": "Diagrams",
    "section": "Sizing",
    "text": "Sizing\nBy default, diagrams are rendered at their natural size (i.e. they are not stretched to fit the default figure size for the current document). Within HTML output formats, diagrams are also made responsive, so that their width doesn’t overflow the current page column. This is similar to the treatment given to images and dynamic JavaScript widgets.\nYou can disable responsive sizing by specifying the fig-reponsive: false option. You can also specify explicit sizes via fig-width and fig-height. For example, here we want to make a mermaid diagram a bit bigger because it contains only a few elements:\n\n```{mermaid}\n%%| fig-width: 6.5\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHard edge\n\n\n\nRound edge\n\n\n\nDecision"
  },
  {
    "objectID": "docs/authoring/diagrams.html#code-echo",
    "href": "docs/authoring/diagrams.html#code-echo",
    "title": "Diagrams",
    "section": "Code Echo",
    "text": "Code Echo\nNote that unlike other executable cell handlers (e.g. {python}), cells with diagrams don’t display their code in the rendered document by default. You can display code by adding an echo: false option in a comment at the tof the cell.\nTo include code for {mermaid}, add %%| echo: true to the top of the cell. For example:\n```{mermaid}\n%%| echo: true\n\n```\nTo include code for {dot}, add //| echo: true to the top of the cell. For example:\n```{dot}\n//| echo: true\n\n```"
  },
  {
    "objectID": "docs/authoring/diagrams.html#chrome-install",
    "href": "docs/authoring/diagrams.html#chrome-install",
    "title": "Diagrams",
    "section": "Chrome Install",
    "text": "Chrome Install\nDiagram rendering makes use use of the Chrome web browser to create an SVG version for web output and a high-quality PNG for print output.\nQuarto can automatically use an existing version of Chrome on your system for rendering. Alternatively, if you don’t have Chrome, you can install a minimal version of it for use by Quarto with the following command:\nquarto tools install chromium\n\n\n\n\n\n\nNote\n\n\n\nQuarto installs headless Chromium via Puppeteer. The bundled Chromium that Puppeteer installs may not work on Docker containers; please check the Puppeteer documentation."
  },
  {
    "objectID": "docs/authoring/figures.html",
    "href": "docs/authoring/figures.html",
    "title": "Figures",
    "section": "",
    "text": "Quarto includes a number of features aimed at making it easier to work with figures and subfigures, as well as for laying out panels that contain multiple figures, tables, or other content."
  },
  {
    "objectID": "docs/authoring/figures.html#figure-basics",
    "href": "docs/authoring/figures.html#figure-basics",
    "title": "Figures",
    "section": "Figure Basics",
    "text": "Figure Basics\nIn Pandoc markdown, a figure is created whenever a captioned image appears by-itself in a paragraph. For example:\n![Elephant](elephant.png)\nThis results in the following treatment for various output types:\n\n\n\n\n\n\n\n\nHTML\nPDF\nWord\n\n\n\n\n\n\n\n\n\n\nNote that for LaTeX / PDF output figures are automatically numbered (you can arrange for figures to be numbered in other formats using Cross References).\n\nLinked Figures\nWhen rendering with Quarto, you can enclose a figure within a link and it will still be treated within output as a captioned figure. For example:\n[![Elephant](elephant.png)](https://en.wikipedia.org/wiki/Elephant)\n\n\nFigure Alignment\nFigures are center aligned by default. Add the fig-align attribute to the image to use a different alignment. For example:\n![Elephant](elephant.png){fig-align=\"left\"}\nNote that figure captions are left aligned to accommodate longer caption text (which looks odd when center aligned).\n\n\nAlt Text\nYou can add alternative text to a figure by adding the fig-alt attribute to the image. For example, the following Markdown…\n![](elephant.png){fig-alt=\"A drawing of an elephant.\"}\n… will create the following HTML with the corresponding alt tag:\n<img src=\"elephant.png\" alt=\"A drawing of an elephant.\">\nNote that the figure caption, title, and alt text can all be different. For example, the following code…\n![Elephant](elephant.png \"Title: An elephant\"){fig-alt=\"A drawing of an elephant.\"}\n…produces this HTML:\n<img src=\"elephant.png\" title=\"Title: An elephant\" alt=\"A drawing of an elephant.\">\n\n\nMultiformat Figures\nYou can write markdown that provides a distinct image file format depending on the target output format. To do this simply leave-off the extension, for example:\n![](elephant)\nBy default this will look for elephant.png, however if you are rendering to PDF it will look for elephant.pdf. You can customize this behavior using the default-image-extension option. For example:\nformat:\n  html:\n    default-image-extension: svg\n  pdf:\n    default-image-extension: tex"
  },
  {
    "objectID": "docs/authoring/figures.html#subfigures",
    "href": "docs/authoring/figures.html#subfigures",
    "title": "Figures",
    "section": "Subfigures",
    "text": "Subfigures\nIf you have several figures that appear as a group, you can create a figure div to enclose them. For example:\n::: {#fig-elephants layout-ncol=2}\n\n![Surus](surus.png){#fig-surus}\n\n![Hanno](hanno.png){#fig-hanno}\n\nFamous Elephants\n:::\nAgain, the last paragraph provides the main caption, and the individual figures carry the sub-captions. Here is what this looks like when rendered as HTML:\n\nNote that we also used a layout-ncol attribute to specify a two-column layout. The next section delves more into customizing figure layouts."
  },
  {
    "objectID": "docs/authoring/figures.html#figure-panels",
    "href": "docs/authoring/figures.html#figure-panels",
    "title": "Figures",
    "section": "Figure Panels",
    "text": "Figure Panels\nAbove we demonstrate laying out two side-by-side figures with subcaptions and a main caption. You may or may not want the caption / sub-caption treatment, and you might also want to use multiple rows of figures. All of these variations are possible.\nTo layout two figures with their own standalone captions (and no main caption), just eliminate the #fig identifiers and main caption at the bottom:\n::: {layout-ncol=2}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n:::\n\nYou can also eliminate the captions entirely:\n::: {layout-ncol=2}\n![](surus.png)\n\n![](hanno.png)\n:::\n\nMultiple Rows\nIf you have more than 2 images, you might want to lay them out across multiple rows. You can do this using the layout-nrow attribute. For example:\n::: {layout-nrow=2}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Abdul Abbas](abdul-abbas.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nMore complex figure arrangements (e.g. rows with varying column layouts) are possible. See the Custom Layouts section below for more details."
  },
  {
    "objectID": "docs/authoring/figures.html#figure-divs",
    "href": "docs/authoring/figures.html#figure-divs",
    "title": "Figures",
    "section": "Figure Divs",
    "text": "Figure Divs\nYou can treat any markdown content you want as a figure by enclosing it in Pandoc div block with an identifier prefaced with #fig-. For example, here we create a figure that includes an embedded iframe:\n::: {#fig-elephant}\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SNggmeilXDQ\"></iframe>\n\nElephant\n:::\nNote that the last paragraph in the div block is used as the figure caption."
  },
  {
    "objectID": "docs/authoring/figures.html#latex-figures",
    "href": "docs/authoring/figures.html#latex-figures",
    "title": "Figures",
    "section": "LaTeX Figures",
    "text": "LaTeX Figures\nThis section describes some figure handling options that are specific to LaTeX output.\nOne very important thing to note is that using the fig-env and fig-pos options described below will trigger the creation of a LaTeX floating environment (most often \\begin{figure}). Depending upon where this LaTeX is generated it (e.g. is it within another \\begin{figure}) this could generate invalid LaTeX. To be on the safe side these attributes should typically only be used for images at the very top level of your document.\n\nEnvironments\nThere are a number of LaTeX packages that provide custom figure environments. For example, the mdframed package includes an mdframed environment used to enclose figures in a special border style. By default, Quarto uses the standard figure environment, but you can use the fig-env attribute to specify a custom one. For example:\n---\ntitle: \"Sidenotes\"\nformat:\n  pdf:\n    include-in-header: \n      text: |\n        \\usepackage{mdframed}\n---\n\n![Elephant](elephant.png){fig-env=\"mdframed\"}\n\n\nFigure Position\nThe default LaTeX figure is a floating environment, so the specific location it appears in your document will depend on its size and the nature of the other content around it. You can exercise some control over this behavior using the fig-pos option. The fig-pos option provides a placement specifier for the figure environment. For example, the ht in this LaTeX snippet is the fig-pos:\n\\begin{figure}[ht]\n\n\\end{figure}\nYou can specify fig-pos either at the document level, as a executable code block option, or within markdown. Here we do all three:\n---\ntitle: \"My Document\"\nformat:\n  pdf:\n    fig-pos: 'h'\n---\n\n```{python}\n#| fig-pos: 't'\n\n```\n\n![](figure.png){fig.pos='b'}\nSee this article for additional details on LaTeX figure positioning.\n\n\n\n\n\n\nFigures and Code Blocks\n\n\n\nIf your figure was generated by an executable code block and the code was included in the output (echo: true), then fig-pos will be set to H by default (to try to keep it alongside the code that generated it). In all other cases, default LaTeX handing of figure position is used unless you specify an explicit fig-pos.\n\n\n\n\nPGF/TikZ Graphics\nIf you are creating LaTeX output, Quarto will automatically emit the correct LaTeX for markdown images that reference .tex files containg PGF/TikZ vector graphics. For example, the following markdown images:\n![](image1.tex)\n\n![](image2.tex){width=80%}\nWill be written to LaTeX as:\n\\input{image1.tex}\n\n\\resizebox{0.8\\linewidth}{!}{\\input{image2.tex}}\nAs shown above, width and height percentages are automatically converted to \\linewidth scaled. Alternatively you can specify custom LaTeX for the width and height arguments of \\resizebox."
  },
  {
    "objectID": "docs/authoring/figures.html#caption-locations",
    "href": "docs/authoring/figures.html#caption-locations",
    "title": "Figures",
    "section": "Caption Locations",
    "text": "Caption Locations\nBy default, figure captions are positioned below figures. You can modify this behavior using the fig-cap-location option. For example:\n---\nfig-cap-location: top\n---\nNote that this option is specified at the top level so that it can be shared by both PDF and HTML formats. If you are only targeting a single format you can place it alongside other format specific options.\nValid values for the caption location include:\n\n\n\nValue\nDescription\n\n\n\n\ntop\nPosition the caption above the figure.\n\n\nbottom\nPosition the caption below the figure.\n\n\nmargin\nPosition the caption in the margin.\n\n\n\nSee the article on Article Layout for additional details on placing captions in the margin."
  },
  {
    "objectID": "docs/authoring/figures.html#complex-layouts",
    "href": "docs/authoring/figures.html#complex-layouts",
    "title": "Figures",
    "section": "Custom Layouts",
    "text": "Custom Layouts\nThe examples above used the layout-ncol or layout-nrow attributes to create straightforward layouts where all columns are of equal sizes. The layout attribute enables the creation of much more complex layouts.\nFor example, this defines a layout with two equally sized figures in the first row, then another image that spans the entire second row:\n::: {layout=\"[[1,1], [1]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nThe layout attribute is a 2-dimensional array where the first dimension defines rows and the second columns. In this case \"layout=\"[[1,1], [1]]\" translates to: create two rows, the first of which has two columns of equal size and the second of which has a single column.\nNote that the numbers in a row are arbitrary and don’t need to add up to a particular total. You can therefore use whatever scheme is most natural. For example, here we define columns that occupy varying percentage widths of the row:\n::: {layout=\"[[70,30], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\nYou can also use negative values to create space between elements. For example:\n::: {layout=\"[[40,-20,40], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\n\nVertical Alignment\nIf you have a layout with a row of images of differing heights, you can control their vertical alignment using the layout-valign attribute. A simple example:\n::: {layout=\"[25,-2,10]\" layout-valign=\"bottom\"}\n![Surus](surus.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nNote that vertical alignment isn’t limited to images, you can also vertically align any other elements that are included in a panel."
  },
  {
    "objectID": "docs/authoring/figures.html#computations",
    "href": "docs/authoring/figures.html#computations",
    "title": "Figures",
    "section": "Computations",
    "text": "Computations\n\nFigures\nNote that figure layout attributes also work for figures produced by executable code blocks. Here are examples for both Jupyter and Knitr:\n\nJupyterKnitr\n\n\n```{python}\n#| layout-ncol: 2\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\n\n\n```{r}\n#| layout-ncol: 2\n\nplot(cars)\nplot(pressure)\n```\n\n\n\n\n\n\nFigure Captions\nYou can also include figure and subfigure captions on computational output using the fig-cap and fig-subcap options. When applying captions to computational output you can optionally include a label with a fig- prefix—if you do this then the figure will be numbered and cross-referenceable.\n\nJupyterKnitr\n\n\n```{python}\n#| label: fig-charts\n#| fig-cap: Charts\n#| fig-subcap: [\"First\", \"Second\"]\n#| layout-ncol: 2\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\n\n\n```{r}\n#| label: fig-charts\n#| fig-cap: Charts\n#| fig-subcap: [\"Cars\", \"Pressure\"]\n#| layout-ncol: 2\n\nplot(cars)\nplot(pressure)\n```\n\n\n\n\n\n\nCustom Layout\nThe layout works the same way for figures produced by Knitr or Jupyter. For example, here’s an Rmd code chunk that produces 3 plots and defines a custom layout for them:\n```{r}\n#| layout: [[45,-10, 45], [100]]\n\nplot(cars)\nplot(pressure)\nplot(mtcars)\n```"
  },
  {
    "objectID": "docs/authoring/figures.html#block-layout",
    "href": "docs/authoring/figures.html#block-layout",
    "title": "Figures",
    "section": "Block Layout",
    "text": "Block Layout\nWhile the examples above illustrate laying out figures, it’s important to note that layout attributes can be used to layout any sort of block content. For example, here we layout 2 lists side-by-side:\n::: {layout-ncol=2}\n### List One\n\n- Item A\n- Item B\n- Item C\n\n### List Two\n\n- Item X\n- Item Y\n- Item Z\n:::\nNote that headings are automatically combined with the block that follows them, so this markdown has a total of 2 columns to lay out. Here’s an example of a paragraph next to a bullet list (without headings):\n::: {layout-ncol=2}\n- Item X\n- Item Y\n- Item Z\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa. \n:::"
  },
  {
    "objectID": "docs/authoring/cross-references.html",
    "href": "docs/authoring/cross-references.html",
    "title": "Cross References",
    "section": "",
    "text": "Cross-references make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures and tables. Every cross-referenceable entity requires a label (unique identifier) and caption (description). For example, this is a cross-referenceable figure:\n![Elephant](elephant.png){#fig-elephant}\nThe presence of the caption (Elephant) and label (#fig-elephant) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\nSee @fig-elephant for an illustration.\nHere is what this would look like rendered to HTML:\n\nQuarto enables you to create cross-references to figures, tables, equations, sections, code listings, theorems, proofs, and more. Cross references can also be applied to dynamic output from Knitr and Jupyter.\nThere are options available that control the text used for titles and references. For example, you could change “Figure 1” to read “Fig 1” or “fig. 1”. See the options documentation for details on how to customize the text used for crossrefs.\n\n\n\n\n\n\nNote\n\n\n\nQuarto’s syntax for cross-references is based on pandoc-crossref (which is in turn based on this discussion: https://github.com/jgm/pandoc/issues/813). There are however several differences (mostly related to handling computational output) to note:\n\nQuarto uses the prefix #fig- rather than #fig: (which is more compatible with Jupyter notebook cell ids).\nQuarto is able to reference raw HTML and LaTeX figures and tables (which are often produced by executable code blocks).\nQuarto has support for referencing theorems and proofs (and related types)."
  },
  {
    "objectID": "docs/authoring/cross-references.html#figures",
    "href": "docs/authoring/cross-references.html#figures",
    "title": "Cross References",
    "section": "Figures",
    "text": "Figures\nAs described above, this is the markdown used to create a cross-referenceable figure and then refer to it:\n![Elephant](elephant.png){#fig-elephant}\n\nSee @fig-elephant for an illustration.\n\nSubfigures\nYou may want to create a figure composed of multiple subfigures. To do this, enclose the figures in a div (with its own label and caption) and give each subfigure its own label and (optionally) caption. You can then refer to either the entire figure in a reference or a single subfigure:\n::: {#fig-elephants layout-ncol=2}\n\n![Surus](surus.png){#fig-surus}\n\n![Hanno](hanno.png){#fig-hanno}\n\nFamous Elephants\n:::\n\nSee @fig-elephants for examples. In particular, @fig-hanno.\nHere is what this looks like when rendered as HTML:\n\nNote that we also used the layout-ncol attribute to specify a two-column layout. See the article on Figures for more details on laying out panels of figures.\n\n\nComputations\nFigures produced by Jupyter and Knitr can also be cross-referenced. To do this, add a label and fig-cap option at the top of the code block. For example:\n\nJupyterKnitr\n\n\n```{python}\n#| label: fig-plot\n#| fig-cap: \"Plot\"\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```\n\nFor example, see @fig-plot.\n\n\n\n```{r}\n#| label: fig-plot\n#| fig-cap: \"Plot\"\n\nplot(cars)\n```\n\nFor example, see @fig-plot.\n\n\n\n\nYou can also create multiple figures within a code cell and reference them as subfigures. To do this use fig-cap for the main caption, and fig-subcap to provide an array of subcaptions. For example:\n```{python}\n#| label: fig-plots\n#| fig-cap: \"Plots\" \n#| fig-subcap:\n#|   - \"Plot 1\"\n#|   - \"Plot 2\" \n#| layout-ncol: 2\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\nSee @fig-plots for examples. In particular, @fig-plots-2.\n\nNote that subfigure reference labels are created automatically based on the main chunk label (e.g. @fig-plots-1, @fig-plots-2, etc.).\nIf you’d like subfigure captions that include only an identifier, e.g. “(a)”, and not a text caption, then specify fig-subcap: true rather than providing explicit subcaption text:\n```{python}\n#| label: fig-plots\n#| fig-cap: \"Plots\" \n#| fig-subcap: true\n#| layout-ncol: 2\n```"
  },
  {
    "objectID": "docs/authoring/cross-references.html#tables",
    "href": "docs/authoring/cross-references.html#tables",
    "title": "Cross References",
    "section": "Tables",
    "text": "Tables\nTo create a cross-referenceable table, add a caption to the table then include a #tbl- label in braces at the end of the caption. For example:\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: My Caption {#tbl-letters}\n\nSee @tbl-letters.\nWhich looks like this when rendered to HTML:\n\n\nSubtables\nYou may want to create a composition of several sub-tables. To do this, create a div with a main identifier, then apply sub-identifiers (and optional caption text) to the contained tables. For example:\n::: {#tbl-panel layout-ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl-first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl-second}\n\nMain Caption\n:::\n\nSee @tbl-panel for details, especially @tbl-second.\nWhich looks like this when rendered to HTML:\n\nNote that the “Main Caption” for the table is provided as the last block within the containing div.\n\n\nComputations\nYou can also cross-reference tables created from code executed via computations. To do this, add the label and tbl-cap cell options. For example:\n```{r}\n#| label: tbl-iris\n#| tbl-cap: \"Iris Data\"\n\nlibrary(knitr)\nkable(head(iris))\n```\n\n\n\n\n\nYou can also create multiple tables within a code cell and reference them as sutables. To do this, add a tbl-subcap option with an array of subcaptions. For example:\n```{r}\n#| label: tbl-tables\n#| tbl-cap: \"Tables\"\n#| tbl-subcap:\n#|   - \"Cars\"\n#|   - \"Pressure\"\n#| layout-ncol: 2\n\nlibrary(knitr)\nkable(head(cars))\nkable(head(pressure))\n```\n\n\n\n\n\nIf you’d like subtable captions that include only an identifier, e.g. “(a)”, and not a text caption, then specify tbl-subcap: true rather than providing explicit subcaption text:\n```{r}\n#| label: tbl-tables\n#| tbl-cap: \"Tables\"\n#| tbl-subcap: true\n#| layout-ncol: 2\n\nlibrary(knitr)\nkable(head(cars))\nkable(head(pressure))\n```"
  },
  {
    "objectID": "docs/authoring/cross-references.html#equations",
    "href": "docs/authoring/cross-references.html#equations",
    "title": "Cross References",
    "section": "Equations",
    "text": "Equations\nProvide an #eq- label immediately after an equation to make it referenceable. For example:\nBlack-Scholes (@eq-black-scholes) is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:\n\n$$\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C \n$$ {#eq-black-scholes}\n\nBlack-Scholes (Equation 1) is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:\n\\[\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C\n\\qquad(1)\\]\nNote that the equation number is included (via \\qquad) in the right margin of the equation."
  },
  {
    "objectID": "docs/authoring/cross-references.html#sections",
    "href": "docs/authoring/cross-references.html#sections",
    "title": "Cross References",
    "section": "Sections",
    "text": "Sections\nTo reference a section, add a #sec- identifier to any heading. For example:\n## Introduction {#sec-introduction}\n\nSee @sec-introduction for additional context.\nNote that when using section cross-references, you will also need to enable the number-sections option (so that section numbering is visible to readers). For example:\n---\ntitle: \"My Document\"\nnumber-sections: true\n---"
  },
  {
    "objectID": "docs/authoring/cross-references.html#code-listings",
    "href": "docs/authoring/cross-references.html#code-listings",
    "title": "Cross References",
    "section": "Code Listings",
    "text": "Code Listings\nTo create a reference-able code block, add a #lst- identifier along with a lst-cap attribute. For example:\n```{#lst-customers .sql lst-cap=\"Customers Query\"}\nSELECT * FROM Customers\n```\n\nThen we query the customers database (@lst-customers)."
  },
  {
    "objectID": "docs/authoring/cross-references.html#theorems-and-proofs",
    "href": "docs/authoring/cross-references.html#theorems-and-proofs",
    "title": "Cross References",
    "section": "Theorems and Proofs",
    "text": "Theorems and Proofs\nTheorems are commonly used in articles and books in mathematics. To include a reference-able theorem, create a div with a #thm- label (or one of other theorem-type labels described below). You also need to specify a theorem name either via the first heading in the block. You can include any content you like within the div. For example:\n::: {#thm-line}\n\n## Line\n\nThe equation of any straight line, called a linear equation, can be written as:\n\n$$\ny = mx + b\n$$\n\n\n:::\n\nSee @thm-line.\n\nFor LaTeX output, the amsthm package is used for typesetting theorems. For other formats an appropriate treatment is used (the above is an example of HTML output).\nThere are a number of theorem variations supported, each with their own label prefix:\n\n\n\nLabel Prefix\nPrinted Name\nLaTeX Environment\n\n\n\n\n#thm-\nTheorem\ntheorem\n\n\n#lem-\nLemma\nlemma\n\n\n#cor-\nCorollary\ncorollary\n\n\n#prp-\nProposition\nproposition\n\n\n#cnj-\nConjecture\nconjecture\n\n\n#def-\nDefinition\ndefinition\n\n\n#exm-\nExample\nexample\n\n\n#exr-\nExercise\nexercise\n\n\n\nThe proof, remark, and solution environments generally receive similar typesetting as theorems, however they are not numbered (and therefore cannot be cross-referenced). To create these environments just use them as the class name of a div:\n::: {.solution}\nThe solution.\n:::\nAs with theorems you can optionally include a heading as the first element of the div (or a name attribute) to give the environment a caption for typesetting (this typically appears in parentheses after the environment title).\nFor LaTeX output the amsthm package is used to typeset these environments. For other formats a similar treatment is used, but you can further customizing this using CSS."
  },
  {
    "objectID": "docs/authoring/cross-references.html#references",
    "href": "docs/authoring/cross-references.html#references",
    "title": "Cross References",
    "section": "References",
    "text": "References\nThe examples above have all used the default syntax for inline references (e.g. @fig-elephant), which results in the reference text “Figure 1”, “Table 1”, etc.\nYou can customize the appearance of inline references by either changing the syntax of the inline reference or by setting options. Here are the various ways to compose a cross-reference and their resulting output:\n\n\n\nType\nSyntax\nOutput\n\n\n\n\nDefault\n@fig-elephant\nFigure 1\n\n\nCapitalized\n@Fig-elephant\nFigure 1\n\n\nCustom Prefix\n[Fig @fig-elephant]\nFig 1\n\n\nNo Prefix\n[-@fig-elephant]\n1\n\n\n\nNote that the capitalized syntax makes no difference for the default output, but would indeed capitalize the first letter if the default had been change via an option to use lower case (e.g. “fig.”).\nYou can also group cross references using the following syntax:\nAs illustrated in [@fig-elephant; @fig-panther; @fig-rabbit].\nThere are a number of options that can be used to further customize the treatment of cross-references. See the section below on References Options for additional details."
  },
  {
    "objectID": "docs/authoring/cross-references.html#chapter-numbering",
    "href": "docs/authoring/cross-references.html#chapter-numbering",
    "title": "Cross References",
    "section": "Chapter Numbering",
    "text": "Chapter Numbering\nYou can use the crossref: chapters option to indicate that top-level headings (H1) in your document correspond to chapters, and that cross-references should be sub-numbered by chapter. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\nnumber-sections: true\ncrossref:\n  chapters: true\n---\n\n# Introduction\n\n![Elephant](elephant.png){#fig-elephant}\n\nSee @fig-elephant for an illustration."
  },
  {
    "objectID": "docs/authoring/cross-references.html#lists",
    "href": "docs/authoring/cross-references.html#lists",
    "title": "Cross References",
    "section": "Lists",
    "text": "Lists\nFor LaTeX / PDF output, you can use the raw LaTeX commands \\listoffigures, \\listoftables and \\listoflistings to produce listings of all figures, tables, etc. within a document. You can use the lof-title, lot-title, and lol-title crossref options to customize the title of the listing.\nFor example:\n---\ntitle: \"My Document\"\ncrossref:\n  lof-title: \"List of Figures\"\nformat: pdf\n---\n\n\\listoffigures\nNote that the default titles for the lists use the form displayed above (i.e. “List of…<Type>”)."
  },
  {
    "objectID": "docs/authoring/cross-references.html#options",
    "href": "docs/authoring/cross-references.html#options",
    "title": "Cross References",
    "section": "Options",
    "text": "Options\nThere are a wide variety of options available for customizing caption labels and references. These options are all specified within the crossref key of document metadata.\n\n\n\n\n\n\nNote that since LaTeX does its own formatting and layout of figures and tables, not all of these options will apply when rendering to PDF. Specifically, delimiter options like title-delim and numbering options like labels don’t work for PDF output. Additionally, formatting directives are not applied (e.g. italicizing the figure title) for LaTeX titles.\n\n\n\n\nTitles\nYou can specify the title prefix used for captions using *-title options. You can also specify the delimiter used between the prefix and the caption using the title-delim option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-title: Fig     # (default is \"Figure\")\n  tbl-title: Tbl     # (default is \"Table\")\n  title-delim: —     # (default is \":\")\n---\n\n\nReferences\nYou can specify the prefix used for inline reference type using *-prefix options. You can also specify whether references should be hyper-linked using the ref-hyperlink option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-prefix: figure   # (default is \"fig-\")\n  tbl-prefix: table    # (default is \"tbl-\")\n  ref-hyperlink: false # (default is true)\n---\n\n\nNumbering\nThere are a variety of numbering schemes available for cross-references, including:\n\narabic (1, 2, 3)\nroman (I, II, III, IV)\nroman i (i, ii, iii, iv)\nalpha x (start from letter ‘x’)\nalpha X (start from letter ‘X’)\n\nYou can specify the number scheme used for all types (other than sub-references) using the labels option. For sub-references (e.g. subfigures), you can specify the number scheme using the subref-labels option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  labels: alpha a        # (default is arabic)\n  subref-labels: roman i # (default is alpha a)\n---\nIf you would like, you can specify the number scheme for a specific type using the *-labels options. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-labels: alpha a    # (default is arabic)\n  tbl-labels: alpha a    # (default is arabic)\n  subref-labels: roman i # (default is alpha a)\n---\nIf both labels and a type specific label option is provided, the type specific option will override the labels option."
  },
  {
    "objectID": "docs/authoring/footnotes-and-citations.html",
    "href": "docs/authoring/footnotes-and-citations.html",
    "title": "Citations & Footnotes",
    "section": "",
    "text": "Quarto will use Pandoc to automatically generate citations and a bibliography in a number of styles. To use this capability, you will need:\n\nA quarto document formatted with citations (see Citation Markdown).\nA bibliographic data source, for example a BibTeX (.bib) file.\nOptionally, a CSL file which specifies the formatting to use when generating the citations and bibliography.\n\n\n\nQuarto supports bibliography files in a wide variety of formats including BibTeX and CSL. Add a bibliography to your document using the bibliography YAML metadata field. For example:\n---\ntitle: \"My Document\"\nbibliography: references.bib\n---\n\n\n\n\n\n\nTip\n\n\n\nYou can provide more than one bibliography file if you would like by setting the bibliography field’s value to a YAML array.\n\n\nSee the Pandoc Citations documentation for additional information on bibliography formats.\n\n\n\nQuarto uses the standard Pandoc markdown representation for citations (e.g. [@citation]) — citations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of ‘@’ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. The citation key must begin with a letter, digit, or _, and may contain alphanumerics, _, and internal punctuation characters (:.#$%&-+?<>~/). Here are some examples:\n\n\n\n\n\n\n\nMarkdown Format\nOutput\n\n\n\n\nBlah Blah [see @knuth1984, pp. 33-35;\nalso @wickham2015, chap. 1]\nBlah Blah (see Knuth 1984, 33–35; also Wickham 2015, chap. 1)\n\n\nBlah Blah [@knuth1984, pp. 33-35,\n38-39 and passim]\nBlah Blah (Knuth 1984, 33–35, 38–39 and passim)\n\n\nBlah Blah [@wickham2015; @knuth1984].\nBlah Blah (Wickham 2015; Knuth 1984).\n\n\nWickham says blah [-@wickham2015]\nWickham says blah (2015)\n\n\n\nYou can also write in-text citations, as follows:\n\n\n\n\n\n\n\nMarkdown Format\nOutput\n\n\n\n\n@knuth1984 says blah.\nKnuth (1984) says blah.\n\n\n@knuth1984 [p. 33] says blah.\nKnuth (1984, 33) says blah.\n\n\n\nSee the Pandoc Citations documentation for additional information on citation syntax.\n\n\n\nQuarto uses Pandoc to format citations and bibliographies. By default, Pandoc will use the Chicago Manual of Style author-date format, but you can specify a custom formatting using CSL (Citation Style Language). To provide a custom citation stylesheet, provide a path to a CSL file using the csl metadata field in your document, for example:\n---\ntitle: \"My Document\"\nbibliography: references.bib\ncsl: nature.csl\n---\nYou can find CSL files or learn more about using styles at the CSL Project. You can browse the list of more than 8,500 Creative Commons CSL definitions in the CSL Project’s central repository or Zotero’s style repository.\n\n\n\nPandoc will automatically generate a list of works cited and place it in the document if the style calls for it. It will be placed in a div with the id refs if one exists:\n### References\n\n::: {#refs}\n:::\nIf no such div is found, the works cited list will be placed at the end of the document.\n\n\n\n\n\n\nTip\n\n\n\nYou can suppress generation of a bibliography by including suppress-bibliography: true option in your document metadata\n\n\nHere’s an example of a generated bibliography:\n\n\n\n\nIf you want to include items in the bibliography without actually citing them in the body text, you can define a dummy nocite metadata field and put the citations there:\n---\nnocite: |\n  @item1, @item2\n---\n\n@item3\nIn this example, the document will contain a citation for item3 only, but the bibliography will contain entries for item1, item2, and item3.\nIt is possible to create a bibliography with all the citations, whether or not they appear in the document, by using a wildcard:\n---\nnocite: |\n  @*\n---\n\n\n\nWhen creating PDFs, you can choose to use either the default Pandoc citation handling based on citeproc, or alternatively use natbib or BibLaTeX. This can be controlled using the cite-method option. For example:\nformat:\n  pdf: \n    cite-method: biblatex\nThe default is to use citeproc (Pandoc’s built in citation processor).\nSee the main article on using Citations with Quarto for additional details on citation syntax, available bibliography formats, etc.\n\n\n\nWhen using natbib or biblatex you can specify the following additional options to affect how bibliographies are rendered:\n\n\n\nOption\nDescription\n\n\n\n\nbiblatexoptions\nList of options for biblatex\n\n\nnatbiboptions\nList of options for natbib\n\n\nbiblio-title\nTitle for bibliography\n\n\nbiblio-style\nStyle for bibliography"
  },
  {
    "objectID": "docs/authoring/footnotes-and-citations.html#footnotes",
    "href": "docs/authoring/footnotes-and-citations.html#footnotes",
    "title": "Citations & Footnotes",
    "section": "Footnotes",
    "text": "Footnotes\nPandoc supports numbering and formatting footnotes using the following syntax:\nHere is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won't be part of the note, because it\nisn't indented.\n\nOutput\nHere is a footnote reference,1 and another.2\nThis paragraph won’t be part of the note, because it isn’t indented.\nIn addition, you can also write single paragraph footnotes inline using the following syntax:\nHere is an inline note.^[Inlines notes are easier to write,\nsince you don't have to pick an identifier and move down to\ntype the note.]\n\n\nOutput\nHere is an inline note.3\nThe footnotes that are generated from the above examples are included in the following section. See the Pandoc Footnotes for additional information."
  },
  {
    "objectID": "docs/authoring/title-blocks.html",
    "href": "docs/authoring/title-blocks.html",
    "title": "Title Blocks",
    "section": "",
    "text": "HTML pages rendered with Quarto include a formatted title block at the start of the article. The title block contains the title, subtitle, authors, date, doi, and abstract.\nA simple example title block looks like:\n\nThe title block will automatically layout elements from the front matter of the document. If you’d like, you can control the behavior using title-block-style.\nThere are three options available:\n\ndefault\n\nThe default title-block treatment create a smaller font face and gathers the various title elements into stylized groups in the title block of the document.\n\nplain\n\nThe plain treatment will do all the title element processing (gathering and organizing the elements), but will not apply the default title block styling.\n\nnone\n\nnone disables title block processing altogether. Content will not be processed or organized and the title block will be emitted verbatim from Pandoc.\n\n\n\n\nIn addition, if you’d like a more prominent title block, you can use title-block-banner to create a banner style title block. A banner style title block will position the title, subtitle, description, and categories in a banner above the article. For example:\n---\ntitle-block-banner: true\n---\nwill render a title block like:\n\n\n\n\nIn this case, the color of the banner is automatically determined based upon the theme. However, you can control the banner background by providing either a CSS color (e.g. \"#FFDDFF\", or red) or the path to an image which will be used the background. For example, to use a banner image, you might write:\n---\ntitle-block-banner: images/banner.jpeg\n---\nwhich would render a banner title block like:\n\nWhen you provide an explicit background color or image, Quarto assumes that the color of the background will contrast with the body background color and automatically uses the body background color as the text color over the banner.\n\n\n\nYou can specify the color the for the text of the banner as well, using title-block-banner-color and providing a CSS color (e.g. \"#FFDDFF\", or red) .\n\n\n\nQuarto includes the document’s date in the title block. In addition to writing a standard date, you may also use a few special keywords which will generate a date for you. today will provide the current date with the current time, now will provide the current date and time, and last-modified will provide the file modification date and time of the document itself.\n\n\nWhen your title block is output using the default or plain styles, Quarto will automatically format the date based upon the document locale (lang). You can control formatting by specifying a date-format in the document front matter. For example:\n---\ntitle: Summarizing Output for Reproducible Documents\ndate: 2018-05-04\ndate-format: short\n---\nFor more about date formats, see the Quarto date format reference."
  },
  {
    "objectID": "docs/authoring/callouts.html",
    "href": "docs/authoring/callouts.html",
    "title": "Callout Blocks",
    "section": "",
    "text": "Callouts are an excellent way to draw extra attention to certain concepts, or to more clearly indicate that certain content is supplemental or applicable to only some scenarios."
  },
  {
    "objectID": "docs/authoring/callouts.html#callout-types",
    "href": "docs/authoring/callouts.html#callout-types",
    "title": "Callout Blocks",
    "section": "Callout Types",
    "text": "Callout Types\nThere are five different types of callouts available.\n\nnote\ntip\nimportant\ncaution\nwarning\n\nThe color and icon will be different depending upon the type that you select. Here are what the various types look like in HTML output:\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nTip With Caption\n\n\n\nThis is an example of a callout with a caption.\n\n\n\n\n\n\n\n\nThis is Important\n\n\n\nDanger, callouts will really improve your writing.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘collapsed’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default."
  },
  {
    "objectID": "docs/authoring/callouts.html#markdown-syntax",
    "href": "docs/authoring/callouts.html#markdown-syntax",
    "title": "Callout Blocks",
    "section": "Markdown Syntax",
    "text": "Markdown Syntax\nCreate callouts in markdown using the following syntax (note that the first markdown heading used within the callout is used as the callout heading):\n:::{.callout-note}\nNote that there are five types of callouts, including:\n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n:::{.callout-tip}\n## Tip With Caption\n\nThis is an example of a callout with a caption.\n:::\n\n:::{.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::"
  },
  {
    "objectID": "docs/authoring/callouts.html#customizing-appearance",
    "href": "docs/authoring/callouts.html#customizing-appearance",
    "title": "Callout Blocks",
    "section": "Customizing Appearance",
    "text": "Customizing Appearance\n\nCollapse\nYou can create ‘folded’ callouts that can be expanded by the user by settings the collapse attribute on the callout. If you set collapse=true, the callout will be expandable, but will be collapsed by default. If you set collapse=false, the callout will be expanded, but will be expanded by default.\n\n\nAppearance\nCallouts have 3 different looks you can use.\n\n\n\n\n\n\n\ndefault\nThe default appearance with colored header and an icon.\n\n\nsimple\nA lighter weight appearance that doesn’t include a colored header background.\n\n\nminimal\nA minimal treatment that applies borders to the callout, but doesn’t include a header background color or icon.\n\n\n\nYou can set the callout appearance either globally in the document (or project yaml):\ncallout-appearance: simple\nor by setting the type attribute on the callout. For example\n::: {.callout-note appearance=\"simple\"}\n\n## Pay Attention\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention.\n\n:::\nwhich appears as:\n\n\n\n\n\n\nPay Attention\n\n\n\nUsing callouts is an effect way to highlight content that your reader give special consideration or attention.\n\n\n\n\nIcons\nIn addition to controlling the appearance of the callout, you can also choose to directly suppress the icon by setting the global option in your document (or project) yaml:\ncallout-icon: false;\nor by setting an attribute directly on the callout:\n::: {.callout-note icon=false}\n\n## Pay Attention\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention.\n\n:::\nWhich will appear as:\n\n\n\n\n\n\nPay Attention\n\n\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention."
  },
  {
    "objectID": "docs/authoring/callouts.html#format-support",
    "href": "docs/authoring/callouts.html#format-support",
    "title": "Callout Blocks",
    "section": "Format Support",
    "text": "Format Support\nThe following formats render callouts as illustrated above:\n\nHTML\nPDF\nMS Word\nEPUB\n\nNote that callout rendering for HTML is not available when you disable the standard HTML theme (e.g. if you specify the theme: none option).\nWhen the target format doesn’t support callouts, they are rendered as a simple blockquote with the caption in bold."
  },
  {
    "objectID": "docs/authoring/conditional.html",
    "href": "docs/authoring/conditional.html",
    "title": "Conditional Content",
    "section": "",
    "text": "In some cases you may want to create content that only displays for a given output format (or only displays when not rendering to a format). You can accomplish this by creating divs with the .content-visible and .content-hidden classes."
  },
  {
    "objectID": "docs/authoring/conditional.html#content-visible",
    "href": "docs/authoring/conditional.html#content-visible",
    "title": "Conditional Content",
    "section": ".content-visible",
    "text": ".content-visible\nTo make content visible only for a given format, create a div (:::) with the .content-visible class. For example, here we mark content as only visible in HTML:\n::: {.content-visible when-format=\"html\"}\n\nWill only appear in HTML.\n\n:::\nYou can also mark content as visible for all formats except a specified format. For example:\n::: {.content-visible unless-format=\"pdf\"}\n\nWill not appear in PDF.\n\n:::\nThen when-format and unless-format attributes match the current Pandoc output format with some additional intelligence to alias related formats (e.g. html, html4, and html5). Details are provided below in Format Matching"
  },
  {
    "objectID": "docs/authoring/conditional.html#content-hidden",
    "href": "docs/authoring/conditional.html#content-hidden",
    "title": "Conditional Content",
    "section": ".content-hidden",
    "text": ".content-hidden\nTo prevent content from being displayed when rendering to a given format, create a div (:::) with the .content-hidden class. For example, here we mark content as hidden in HTML:\n::: {.content-hidden when-format=\"html\"}\n\nWill not appear in HTML.\n\n:::\nYou can also mark content as hidden for all formats except a specified format. For example:\n::: {.content-visible unless-format=\"pdf\"}\n\nWill only appear in PDF.\n\n:::"
  },
  {
    "objectID": "docs/authoring/conditional.html#format-matching",
    "href": "docs/authoring/conditional.html#format-matching",
    "title": "Conditional Content",
    "section": "Format Matching",
    "text": "Format Matching\nThen when-format and unless-format clauses do some aliasing of related formats to make it more straightforward to target content. The following aliases are implemented:\n\n\n\nAlias\nFormats\n\n\n\n\nlatex\nlatex, pdf\n\n\npdf\nlatex, pdf\n\n\nepub\nepub*\n\n\nhtml\nhtml*, epub*, revealjs\n\n\nmarkdown\nmarkdown*, commonmark*, gfm, markua"
  },
  {
    "objectID": "docs/authoring/appendices.html",
    "href": "docs/authoring/appendices.html",
    "title": "Appendices",
    "section": "",
    "text": "HTML pages rendered with Quarto include a formatted appendix at the end of the article. The appendix includes sections for citations and footnotes in the document, as well the attribution information (if specified) for the document itself.\nA simple example document appendix looks like:\n\nTo learn more about including document attribution information in the appendix, see [Creating Citeable Articles]."
  },
  {
    "objectID": "docs/authoring/appendices.html#custom-appendix-sections",
    "href": "docs/authoring/appendices.html#custom-appendix-sections",
    "title": "Appendices",
    "section": "Custom Appendix Sections",
    "text": "Custom Appendix Sections\nSections of your document can be added to the Appendix that appears at the end of your article by adding the .appendix class to any header. For example:\n## Acknowledgments {.appendix}\n\nI am grateful for the insightful comments offered by the anonymous peer reviewers at Books & Texts. The generosity and expertise of one and all have improved this study in innumerable ways and saved me from many errors; those that inevitably remain are entirely my own responsibility.\nAny sections marked with the .appendix class will be included at the front of the appendix in the order in which they appear in the document. A more complete example appendix including attribution and the above custom appendix section looks like:"
  },
  {
    "objectID": "docs/authoring/appendices.html#license",
    "href": "docs/authoring/appendices.html#license",
    "title": "Appendices",
    "section": "License",
    "text": "License\nIf you include a license in the front matter or citation information for your document, a ‘Reuse’ section will automatically be added to the appendix. You can specify either a Creative Commons license, for example:\nlicense: \"CC BY\"\nor any other license message, for example:\nlicense: \"Copyright Acme, Inc. 2021. All Rights Reserved\"\n\nCreative Commons\nThe Creative Commons copyright licenses and tools forge a balance inside the traditional “all rights reserved” setting that copyright law creates. These tools give everyone from individual creators to large companies and institutions a simple, standardized way to grant copyright permissions to their creative work.\nHere are some of the common forms of Creative Commons content license:\n\n\n\n\n\n\n\n\nLicense\nName\nDescription\n\n\n\n\nCC BY\nAttribution\nThis license lets others distribute, remix, tweak, and build upon your work, even commercially, as long as they credit you for the original creation. This is the most accommodating of licenses offered.\n\n\nCC BY-SA\nAttribution-ShareAlike\nThis license lets others remix, tweak, and build upon your work even for commercial purposes, as long as they credit you and license their new creations under the identical terms. This license is often compared to “copyleft” free and open source software licenses. All new works based on yours will carry the same license, so any derivatives will also allow commercial use.\n\n\nCC BY-ND\nAttribution-NoDerivs\nThis license allows for redistribution, commercial and non-commercial, as long as it is passed along unchanged and in whole, with credit to you.\n\n\nCC BY-NC\nAttribution-NonCommercial\nThis license lets others remix, tweak, and build upon your work non-commercially, and although their new works must also acknowledge you and be non-commercial, they don’t have to license their derivative works on the same terms.\n\n\n\nIf you specify a Creative Commons license for your content, Quarto will automatically include the relevant link to the appropriate license in the re-use section.\n\n\nOther Licenses\nIf you include a non Creative Commons license (or other text) in the license options, that content will be included verbatim in the ‘Reuse’ section of the document appendix.\nHere is an example of a complete appendix including all the fields with an Attribution-ShareAlike Creative Commons license."
  },
  {
    "objectID": "docs/authoring/appendices.html#appendix-style",
    "href": "docs/authoring/appendices.html#appendix-style",
    "title": "Appendices",
    "section": "Appendix Style",
    "text": "Appendix Style\nYou can control how Quarto process the appendix of your document using the appendix-style option. There are three options available:\n\ndefault\n\nThe default appendix treatment create a smaller font face and gathers the various sections into stylized groups at the end of the document.\n\nplain\n\nThe plain treatment will do all the appendix processing (gathering and organizing the sections at the end of the document, creating sections like ‘Reuse’), but will not apply the default appendix styling.\n\nnone\n\nnone disables appendix processing altogether. Content will not be processed or organized and information like ‘Citation’ and ‘Reuse’ will not be included in the document."
  },
  {
    "objectID": "docs/authoring/create-citeable-articles.html",
    "href": "docs/authoring/create-citeable-articles.html",
    "title": "Creating Citeable Articles",
    "section": "",
    "text": "You can make it easier for others to cite your work by providing additional metadata with the YAML front-matter of your article. Citations can be provided for both articles published to the web or for articles published in journals (with or without a DOI)."
  },
  {
    "objectID": "docs/authoring/create-citeable-articles.html#web-articles",
    "href": "docs/authoring/create-citeable-articles.html#web-articles",
    "title": "Creating Citeable Articles",
    "section": "Web Articles",
    "text": "Web Articles\nTo provide a citation for an article published to the web, include author and date metadata as well as a citation url. For example:\n---\ntitle: \"Summarizing Output for Reproducible Documents\"\ndescription: | \n  A summary of the best practices for summarizing output of reproducible scientific documents.\ndate: 5/4/2018\nauthor:\n  - name: Nora Jones \n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation-url: https://example.com/spacelysprokets\ncitation:\n  url: https://example.com/summarizing-output\nbibliography: biblio.bib\n---\nIf you omit the citation url, Quarto will attempt to generate a citation url by using the site-url and the current page’s location. If you’d like to allow Quarto to generate the citation url, you can omit the citation url and simple enable citation output on the page. For example:\n---\ntitle: \"Summarizing Output for Reproducible Documents\"\ndescription: | \n  A summary of the best practices for summarizing output of reproducible scientific documents.\ndate: 5/4/2018\nauthor:\n  - name: Nora Jones \n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation-url: https://example.com/spacelysprokets\ncitation: true\nbibliography: biblio.bib\n---\nWhen this metadata is available, a citation appendix is automatically added to the article. The citation appendix will present both a copy-able bibtex representation of the document and a formatted representation of the citation (based upon the document’s CSL file, if specified). For example:"
  },
  {
    "objectID": "docs/authoring/create-citeable-articles.html#journal-articles",
    "href": "docs/authoring/create-citeable-articles.html#journal-articles",
    "title": "Creating Citeable Articles",
    "section": "Journal Articles",
    "text": "Journal Articles\nIf your article is published within a Journal, you can add the following the additional fields to generate the appropriate citation entry:\n---\ntitle: \"Summarizing Output for Reproducible Documents\"\ndescription: | \n  A summary of the best practices for summarizing output of reproducible scientific documents.\ndate: 5/4/2018\nauthor:\n  - name: Nora Jones \n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation-url: https://example.com/spacelysprokets\ncitation:\n  type: article-journal\n  container-title: \"Journal of Data Science Software\"\n  doi: \"10.23915/reprodocs.00010\"\n  url: https://example.com/summarizing-output\nbibliography: biblio.bib\n---\nThis is how the citation is presented in the appendix:"
  },
  {
    "objectID": "docs/authoring/create-citeable-articles.html#other-types-of-documents",
    "href": "docs/authoring/create-citeable-articles.html#other-types-of-documents",
    "title": "Creating Citeable Articles",
    "section": "Other Types of Documents",
    "text": "Other Types of Documents\nThe BibTeX and formatted attribution displayed in the document will be generated based upon the complete citation information that is present in the citation key, which is based upon the Citation Style Language (CSL) specification for items. You can learn more about the available options in the Citation Metadata Reference."
  },
  {
    "objectID": "docs/authoring/create-citeable-articles.html#google-scholar",
    "href": "docs/authoring/create-citeable-articles.html#google-scholar",
    "title": "Creating Citeable Articles",
    "section": "Google Scholar",
    "text": "Google Scholar\nQuarto documents can include metadata compatible with the format indexed by Google Scholar. This makes it easy for indexing engines (Google Scholar or otherwise) to extract not only a citation for your article but also information on other sources which you cited. To enable this use the google-scholar option:\ntitle: \"Summarizing Output for Reproducible Documents\"\ndescription: | \n  A summary of the best practices for summarizing output of reproducible scientific documents.\ndate: 5/4/2018\nauthor:\n  - name: Nora Jones \n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation-url: https://example.com/spacelysprokets\ncitation:\n  type: article-journal\n  container-title: \"Journal of Data Science Software\"\n  doi: \"10.23915/reprodocs.00010\"\n  url: https://example.com/summarizing-output\nbibliography: biblio.bib \ngoogle-scholar: true\nFor example, here is the Google Scholar metadata automatically included for a document created with the above metadata:\n<meta name=\"citation_title\" content=\"Summarizing Output for Reproducible Documents\">\n<meta name=\"citation_author\" content=\"Nora Jones\">\n<meta name=\"citation_online_date\" content=\"2018-05-04\">\n<meta name=\"citation_fulltext_html_url\" content=\"https://example.com/summarizing-output\">\n<meta name=\"citation_publication_date\" content=\"2018-05-04\">\n<meta name=\"citation_journal_title\" content=\"Journal of Data Science Software\">\n<meta name=\"citation_reference\" content=\"citation_title=Donald knuth;,citation_fulltext_html_url=http://dx.doi.org/10.7551/mitpress/\n5485.003.0041;,citation_publication_date=1989;,citation_journal_title\n=undefined;\">"
  },
  {
    "objectID": "docs/authoring/language.html",
    "href": "docs/authoring/language.html",
    "title": "Document Language",
    "section": "",
    "text": "Document language plays a role in Pandoc’s processing of most formats, and controls hyphenation in PDF output when using LaTeX (through babel and polyglossia) or ConTeXt.\nAdditonally, Quarto, Pandoc, and LaTeX will sometimes generate textual output that requires localization. For example, “Figure” or “List of Figures” for cross references, callout captions like “Note” or “Warning”, or the “Code” caption for folded code chunks."
  },
  {
    "objectID": "docs/authoring/language.html#lang-option",
    "href": "docs/authoring/language.html#lang-option",
    "title": "Document Language",
    "section": "lang Option",
    "text": "lang Option\nThe lang document option is used to identifies the main language of the document using IETF language tags (following the BCP 47 standard), such as en or en-GB. The Language subtag lookup tool can look up or verify these tags.\nFor example, this document specifies the use of French:\n---\ntitle: \"My Document\"\nlang: fr    \n---\nThis will result in the use of French translations as well as the application of other language specific rules to document processing. The following languages currently have full translations available:\n\nEnglish (en, used by default)\nChinese (zh)\nSpanish (es)\nFrench (fr)\nJapanese (ja)\nGerman (de)\nPortuguese (pt)\nRussian (ru)"
  },
  {
    "objectID": "docs/authoring/language.html#alternate-language",
    "href": "docs/authoring/language.html#alternate-language",
    "title": "Document Language",
    "section": "Alternate Language",
    "text": "Alternate Language\nIf you aren’t happy with the default language used for a given part of a document you can provide alternate language via the language key (this can be used at a document or project level). For example, to override the values for the “Author” and “Published” captions used within title blocks you could do this:\n---\ntitle: \"My Document\"\nauthor: \"Norah Jones\"\ndate: 5/22/2022\nlanguage: \n  title-block-author-single: \"Writer\"\n  title-block-published: \"Updated\"\n---\nAs described below, you can also provide these translations in a standalone YAML file and reference it as follows:\n---\ntitle: \"My Document\"\nauthor: \"Norah Jones\"\ndate: 5/22/2022\nlanguage: custom.yml\n---\nYou can discover all of the language values that can be customized by referencing this file: https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/language/_language.yml."
  },
  {
    "objectID": "docs/authoring/language.html#custom-translations",
    "href": "docs/authoring/language.html#custom-translations",
    "title": "Document Language",
    "section": "Custom Translations",
    "text": "Custom Translations\nYou can create and use a custom translation for a new language not supported by Quarto as follows:\n\nMake a copy of the default _language.yml file (https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/language/_language.yml).\nProvide translations from the default English values.\nSpecify the custom translation file using the language option. For example:\n---\nlanguage: custom.yml\n---\n\nThe language option can be specified at a project or document level. Additionally, if you include a _language.yml file in the root of your project alongside your _quarto.yml config file it will be automatically used.\nIf you create a language translation file please consider contributing it so others can benefit from it. See the documentation on contributing language translations for additional details."
  },
  {
    "objectID": "docs/authoring/includes.html",
    "href": "docs/authoring/includes.html",
    "title": "Includes",
    "section": "",
    "text": "Includes are a convenient way to re-use content across documents. Includes work for plain markdown content as well as for .qmd files with executable code cells (note however that the cells must all use the same engine – i.e. knitr or jupyter, but not both).\nTo include a file, add the {{< include >}} shortcode at the location in your document where you want it included:\n{{< include _content.qmd >}}\nA very important thing to understand about includes is that they are equivalent to copying and pasting the text from the included file into the main file. This means that relative references (links, images, etc.) inside the included file resolve based on the directory of the main file not the included file."
  },
  {
    "objectID": "docs/authoring/includes.html#content",
    "href": "docs/authoring/includes.html#content",
    "title": "Includes",
    "section": "Content",
    "text": "Content\nA concrete example would be if you have several articles about a topic that share a common introduction. Here we have an article titled “Revealjs Presentations” that wants to include some basic information on presentations not specific to Revealjs (we do that by including _basics.qmd):\n---\ntitle: \"Revealjs Presentations\"\n---\n\n## Overview\n\nRevealjs Presentations are a great way to\npresent your ideas to others!\n\n{{< include _basics.qmd >}}\n\n## Revealjs Options\n\nMore content here...\nNote that we use an underscore (_) prefix for the included file. You should always use an underscore prefix with included files so that they are automatically ignored (i.e. not treated as standalone files) by a quarto render of a project)."
  },
  {
    "objectID": "docs/authoring/includes.html#computations",
    "href": "docs/authoring/includes.html#computations",
    "title": "Includes",
    "section": "Computations",
    "text": "Computations\nYou can also include files with computational cells. For example, here we include a .qmd that does some data preprocessing that we want shared across multiple documents:\n---\ntitle: \"My Document\"\n---\n\n{{< include _data.qmd >}}\n\n\nUse the data...\nA couple of important things to remember when using computational includes:\n\nAll computations still share a single engine (e.g. knitr or jupyter)\nComputational includes work only in .qmd files (they don’t work in .ipynb notebook files)"
  },
  {
    "objectID": "docs/authoring/tables.html",
    "href": "docs/authoring/tables.html",
    "title": "Tables",
    "section": "",
    "text": "Quarto includes a number of features aimed at making it easy to to author and customize markdown table output, including:\n\nSpecifying column alignment and widths.\nProviding captions, subcaptions, and cross-references.\nGenerating tables dynamically from executable code cells.\n\nThis article covers using these features in-depth."
  },
  {
    "objectID": "docs/authoring/tables.html#markdown-tables",
    "href": "docs/authoring/tables.html#markdown-tables",
    "title": "Tables",
    "section": "Markdown Tables",
    "text": "Markdown Tables\nThe most commonly used markdown table is known as a pipe table. Pipe tables support specifying per column alignment as well as captions. For example:\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table sytnax\nHere is the table rendered to HTML:\n\nDemonstration of pipe table syntax\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\nThe beginning and ending pipe characters are optional, but pipes are required between all columns. The colons indicate column alignment as shown. The header cannot be omitted, however you can simulate a headerless table by including a header with blank cells.\nSince the pipes indicate column boundaries, columns need not be vertically aligned, as they are in the above example. So, this is a perfectly legal (though ugly) pipe table:\nfruit| price\n-----|-----:\napple|2.05\npear|1.37\norange|3.09\nThe cells of pipe tables cannot contain block elements like paragraphs and lists, and cannot span multiple lines. If a pipe table contains a row whose markdown content is wider than the column width (see columns option), then the table will take up the full text width and the cell contents will wrap, with the relative cell widths determined by the number of dashes in the line separating the table header from the table body.\nFor example ---|- would make the first column 3/4 and the second column 1/4 of the full text width. On the other hand, if no lines are wider than column width, then cell contents will not be wrapped, and the cells will be sized to their contents.\n\nAuthoring\nFor simple tables with only a few cells it’s straightforward to create them directly in markdown. As tables get larger, it makes sense to use an authoring tool. Some table authoring tools to consider include:\n\n\n\n\n\n\n\nTablesGenerator\nOnline tool for generating markdown tables\n\n\nEmacs TableMode\nText based table creation and editing capabilities for Emacs.\n\n\nQuarto Visual Editor\nVisual editor for .qmd files with table editing support."
  },
  {
    "objectID": "docs/authoring/tables.html#column-widths",
    "href": "docs/authoring/tables.html#column-widths",
    "title": "Tables",
    "section": "Column Widths",
    "text": "Column Widths\nAbove we describe a means of specifying column widths using the relative number of dashes in each column header (e.g. ---|- to get a 75% / 25% split for a two-column table).\nYou can also explicitly specify columns widths using the tbl-colwidths attribute or document-level option. For an individual markdown table, add the attribute after the caption. For example:\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {tbl-colwidths=\"[75,25]\"}\nIf your table doesn’t have a caption, then you can still specify only tbl-colwidths:\n: {tbl-colwidths=\"[75,25]\"}\nColumn widths can also be specified at the document level (e.g. to have uniform widths across a set of tables):\n---\ntitle: \"My Document\"\nformat: html\ntbl-colwidths: [75,25]\n---"
  },
  {
    "objectID": "docs/authoring/tables.html#cross-references",
    "href": "docs/authoring/tables.html#cross-references",
    "title": "Tables",
    "section": "Cross References",
    "text": "Cross References\nTo create a cross-referenceable table, add a caption to the table then include a #tbl- label in braces at the end of the caption. For example:\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: My Caption {#tbl-letters}\n\nSee @tbl-letters.\nWhich looks like this when rendered to HTML:\n\n\nSubtables\nYou may want to create a composition of several sub-tables. To do this, create a div with a main identifier, then apply sub-identifiers (and optional caption text) to the contained tables. For example:\n::: {#tbl-panel layout-ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl-first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl-second}\n\nMain Caption\n:::\n\nSee @tbl-panel for details, especially @tbl-second.\nWhich looks like this when rendered to HTML:\n\nNote that the “Main Caption” for the table is provided as the last block within the containing div."
  },
  {
    "objectID": "docs/authoring/tables.html#caption-location",
    "href": "docs/authoring/tables.html#caption-location",
    "title": "Tables",
    "section": "Caption Location",
    "text": "Caption Location\nBy default, table captions are positioned above tables. You can modify this behavior using the tbl-cap-location option. For example:\n---\ntbl-cap-location: top\n---\nNote that this option is specified at the top level so that it can be shared by both PDF and HTML formats. If you are only targeting a single format you can place it alongside other format specific options.\nValid values for the caption location include:\n\n\n\nValue\nDescription\n\n\n\n\ntop\nPosition the caption above the table.\n\n\nbottom\nPosition the caption below the table.\n\n\nmargin\nPosition the caption in the margin.\n\n\n\nSee the article on Article Layout for additional details on placing captions in the margin."
  },
  {
    "objectID": "docs/authoring/tables.html#computations",
    "href": "docs/authoring/tables.html#computations",
    "title": "Tables",
    "section": "Computations",
    "text": "Computations\nAll of the options described above work for tables produced by executable code cells. For example, here we use the Python tabulate package along with the Markdown() function from the IPython display module to print a markdown table:\n\n```{python}\n#| tbl-cap: \"Planets\"\n\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\ntable = [[\"Sun\",696000,1989100000],\n         [\"Earth\",6371,5973.6],\n         [\"Moon\",1737,73.5],\n         [\"Mars\",3390,641.85]]\nMarkdown(tabulate(\n  table, \n  headers=[\"Planet\",\"R (km)\", \"mass (x 10^29 kg)\"]\n))\n```\n\n\nPlanets \n\n\nPlanet\nR (km)\nmass (x 10^29 kg)\n\n\n\n\nSun\n696000\n1.9891e+09\n\n\nEarth\n6371\n5973.6\n\n\nMoon\n1737\n73.5\n\n\nMars\n3390\n641.85\n\n\n\n\n\nHere we apply the tbl-cap and tbl-colwidths options to a code cell that uses the knitr kable() function to write a markdown table:\n```{r}\n#| tbl-cap: \"Cars\"\n#| tbl-colwidths: [60,40]\n\nlibrary(knitr)\nkable(head(cars))\n```\nIf your code cell produces multiple tables, you can also specify subcaptions and layout using cell options:\n```{r}\n#| label: tbl-example\n#| tbl-cap: \"Example\"\n#| tbl-subcap: \n#|   - \"Cars\"\n#|   - \"Pressure\"\n#| layout-ncol: 2\n#| echo: fenced\n\nlibrary(knitr)\nkable(head(cars))\nkable(head(pressure))\n```"
  },
  {
    "objectID": "docs/authoring/tables.html#grid-tables",
    "href": "docs/authoring/tables.html#grid-tables",
    "title": "Tables",
    "section": "Grid Tables",
    "text": "Grid Tables\nGrid tables are a more advanced type of markdown tables that allow arbitrary block elements (multiple paragraphs, code blocks, lists, etc.). For example:\n+---------------+---------------+--------------------+\n| Fruit         | Price         | Advantages         |\n+===============+===============+====================+\n| Bananas       | $1.34         | - built-in wrapper |\n|               |               | - bright color     |\n+---------------+---------------+--------------------+\n| Oranges       | $2.10         | - cures scurvy     |\n|               |               | - tasty            |\n+---------------+---------------+--------------------+\n\n: Sample grid table.\nThe row of =s separates the header from the table body, and can be omitted for a headerless table. Cells that span multiple columns or rows are not supported.\nThis is what the table looks like when rendered to markdown:\n\nSample grid table.\n\n\n\n\n\n\n\nFruit\nPrice\nAdvantages\n\n\n\n\nBananas\n$1.34\n\nbuilt-in wrapper\nbright color\n\n\n\nOranges\n$2.10\n\ncures scurvy\ntasty\n\n\n\n\nAlignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:\n+---------------+---------------+--------------------+\n| Right         | Left          | Centered           |\n+==============:+:==============+:==================:+\n| Bananas       | $1.34         | built-in wrapper   |\n+---------------+---------------+--------------------+\nFor headerless tables, the colons go on the top line instead:\n+--------------:+:--------------+:------------------:+\n| Right         | Left          | Centered           |\n+---------------+---------------+--------------------+\nNote that grid tables are quite awkward to write with a plain text editor (because unlike pipe tables, the column indicators must align). Here are some tools that can assist with creating grid tables:\n\nEmacs’ table-mode (M-x table-insert)\nQuarto Visual Editor"
  },
  {
    "objectID": "docs/authoring/markdown-basics.html",
    "href": "docs/authoring/markdown-basics.html",
    "title": "Markdown Basics",
    "section": "",
    "text": "Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of Pandoc’s Markdown for more in-depth documentation."
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#text-formatting",
    "href": "docs/authoring/markdown-basics.html#text-formatting",
    "title": "Markdown Basics",
    "section": "Text Formatting",
    "text": "Text Formatting\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n*italics* and **bold**\nitalics and bold\n\n\nsuperscript^2^ / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code"
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#headings",
    "href": "docs/authoring/markdown-basics.html#headings",
    "title": "Markdown Basics",
    "section": "Headings",
    "text": "Headings\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n#### Header 4\nHeader 4\n\n\n##### Header 5\nHeader 5\n\n\n###### Header 6\nHeader 6"
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#links-images",
    "href": "docs/authoring/markdown-basics.html#links-images",
    "title": "Markdown Basics",
    "section": "Links & Images",
    "text": "Links & Images\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n<https://quarto.org>\nhttps://quarto.org\n\n\n[Quarto](https://quarto.org)\nQuarto\n\n\n![Caption](elephant.png)\n\n\n\n[![Caption](elephant.png)](https://quarto.org)\n\n\n\n[![Caption](elephant.png)](https://quarto.org \"An elephant\")\n\n\n\n[![](elephant.png){fig-alt=\"Alt text\"}](https://quarto.org)"
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#lists",
    "href": "docs/authoring/markdown-basics.html#lists",
    "title": "Markdown Basics",
    "section": "Lists",
    "text": "Lists\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n* unordered list\n    + sub-item 1\n    + sub-item 2\n        - sub-sub-item 1\n\nunordered list\n\nsub-item 1\nsub-item 2\n\nsub-sub-item 1\n\n\n\n\n\n*   item 2\n\n    Continued (indent 4 spaces)\n\nitem 2\nContinued (indent 4 spaces)\n\n\n\n1. ordered list\n2. item 2\n    i) sub-item 1\n         A.  sub-sub-item 1\n\nordered list\nitem 2\n\nsub-item 1\n\nsub-sub-item 1\n\n\n\n\n\n(@)  A list whose numbering\n\ncontinues after\n\n(@)  an interruption\n\nA list whose numbering\n\ncontinues after\n\nan interruption\n\n\n\nterm\n: definition\n\nterm\n\ndefinition"
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#tables",
    "href": "docs/authoring/markdown-basics.html#tables",
    "title": "Markdown Basics",
    "section": "Tables",
    "text": "Tables\n\nMarkdown Syntax\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n\n\nOutput\n\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\nLearn more in the article on Tables."
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#equations",
    "href": "docs/authoring/markdown-basics.html#equations",
    "title": "Markdown Basics",
    "section": "Equations",
    "text": "Equations\nUse $ delimiters for inline math and $$ delimiters for display math. For example:\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\ninline math: $E = mc^{2}$\ninline math: \\(E=mc^{2}\\)\n\n\ndisplay math:\n\n$$E = mc^{2}$$\ndisplay math:\n\\[E = mc^{2}\\]\n\n\n\nIf you want to define custom TeX macros, include them within $$ delimiters enclosed in a .hidden block. For example:\n::: {.hidden}\n$$\n \\def\\RR{{\\bf R}}\n \\def\\bold#1{{\\bf #1}}\n$$\n\n\n:::\nFor HTML math processed using MathJax (the default) you can use the \\def, \\newcommand, \\renewcommand, \\newenvironment, \\renewenvironment, and \\let commands to create your own macros and environments."
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#diagrams",
    "href": "docs/authoring/markdown-basics.html#diagrams",
    "title": "Markdown Basics",
    "section": "Diagrams",
    "text": "Diagrams\nQuarto has native support for embedding Mermaid and Graphviz diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, gnatt charts, and more using a plain text syntax inspired by markdown.\nFor example, here we embed a flowchart created using Mermaid:\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHard edge\n\n\n\nRound edge\n\n\n\nDecision\n\n\n\nResult one\n\n\n\nResult two\n\n\n\n\n\n\n\nLearn more in the article on Diagrams."
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#page-breaks",
    "href": "docs/authoring/markdown-basics.html#page-breaks",
    "title": "Markdown Basics",
    "section": "Page Breaks",
    "text": "Page Breaks\nThe pagebreak shortcode enables you to insert a native pagebreak into a document (.e.g in LaTeX this would be a \\newpage, in MS Word a docx-native pagebreak, in HTML a page-break-after: always CSS directive, etc.):\npage 1\n\n{{< pagebreak >}}\n\npage 2\nNative pagebreaks are supported for HTML, LaTeX, Context, MS Word, Open Document, and ePub (for other formats a form-feed character \\f is inserted)."
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#divs-and-spans",
    "href": "docs/authoring/markdown-basics.html#divs-and-spans",
    "title": "Markdown Basics",
    "section": "Divs and Spans",
    "text": "Divs and Spans\nYou can add classes, attributes, and other identifiers to regions of content using divs and spans (you’ll see an example of this below in Callout Blocks).\nFor example, here we add the “border” class to a region of content using a div (:::):\n::: {.border}\nThis content can be styled with a border\n:::\nHere we add a class to some inlne text using a span:\nThis is text with [special]{.keyword} formatting.\nTypically, you’ll use CSS and/or a Filter along with divs and spans to provide styling or other behavior within rendered documents.\nSee the Pandoc documentation on Divs and Spans for additional details."
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#callout-blocks",
    "href": "docs/authoring/markdown-basics.html#callout-blocks",
    "title": "Markdown Basics",
    "section": "Callout Blocks",
    "text": "Callout Blocks\n\nMarkdown Syntax\n:::{.callout-note}\nNote that there are five types of callouts, including: \n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n\nOutput\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including note, tip, warning, caution, and important.\n\n\nLearn more in the article on Callout Blocks."
  },
  {
    "objectID": "docs/authoring/markdown-basics.html#other-blocks",
    "href": "docs/authoring/markdown-basics.html#other-blocks",
    "title": "Markdown Basics",
    "section": "Other Blocks",
    "text": "Other Blocks\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n> Blockquote\n\nBlockquote\n\n\n\n::: {.classname}\nDiv\n:::\n\nDiv\n\n\n\n| Line Block\n|   Spaces and newlines\n|   are preserved\nLine Block\n   Spaces and newlines\n   are preserved\n\n\n\n\nSpecial Characters\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\nendash: --\nendash: –\n\n\nemdash: ---\nemdash: —"
  },
  {
    "objectID": "docs/visual-editor/content.html",
    "href": "docs/visual-editor/content.html",
    "title": "Content Editing",
    "section": "",
    "text": "Visual mode supports editing all of Pandoc markdown. Standard formatting commands (headings, bold, italic, etc.) work just the way they do in a conventional word processor.\nSee the Using the Editor section for more details on how to access core editing commands. Note also that you can access all editing commands via keyboard shortcuts.\nEditing of links, images, blockquotes, lists, tables, etc. is also available, as is the ability to specify Pandoc attributes and insert special characters and emojis."
  },
  {
    "objectID": "docs/visual-editor/content.html#editing-tables",
    "href": "docs/visual-editor/content.html#editing-tables",
    "title": "Content Editing",
    "section": "Editing Tables",
    "text": "Editing Tables\nYou can insert a table using the Table menu. You can then use either the main menu or a context menu to insert and delete table rows and columns:\n\nNote that if you select multiple rows or columns the insert or delete command will behave accordingly. For example, to insert 2 rows, first select 2 rows then use the insert command.\nWhen you make a selection of multiple rows and/or columns as illustrated above, you can also copy and paste groups of cells within the table."
  },
  {
    "objectID": "docs/visual-editor/content.html#editing-lists",
    "href": "docs/visual-editor/content.html#editing-lists",
    "title": "Content Editing",
    "section": "Editing Lists",
    "text": "Editing Lists\nAs described above, you can create a new list by just typing - or 1. at the beginning of an empty paragraph. To add items to the list, just press Enter within a list item. To exit the list, press Enter within an empty list item.\nWhile this covers many simple list editing tasks, there is a variety of other actions you may want to take within lists, including creating nested lists and adding paragraphs or code blocks to an exiting list item. From an empty list item (pictured at left), the following keyboard gestures can be used to do this:\n\n\n\n\n\n\n\n\nEmpty Item (enter to exit list)\nTab (add sublist)\nBackspace  (add block)\n\n\n\n\n\n\n\n\n\n\nYou can also use Shift+Tab to lift a list item into the previous level.\n\nTight Lists\nMarkdown distinguishes between normal and tight lists, where tight lists have less vertical spacing between items. In markdown source code, you designate a tight list by having no empty lines between your list items.\nVisual mode creates normal lists by default (you can change this behavior via Editor Options). You can toggle between normal and tight lists using the ⌥⌘ 9 keyboard shortcut. You can also change the list type using the Format -> Edit Attributes dialog (also accessible via the F4 shortcut). If you have existing tight lists in your markdown source files, they will remain so within the visual editor."
  },
  {
    "objectID": "docs/visual-editor/content.html#pandoc-attributes",
    "href": "docs/visual-editor/content.html#pandoc-attributes",
    "title": "Content Editing",
    "section": "Pandoc Attributes",
    "text": "Pandoc Attributes\nSeveral of Pandoc’s block types (e.g. headings, code blocks, and divs) enable you to specify a set of custom attributes. Attributes include IDs and class names, as well as arbitrary key-value pairs that are passed through to output formats (e.g. as attributes for HTML tags). For these block types, an edit button will appear at the the top right when your cursor is within the block:\n\nNote that any ID as well as the first class specified within the attributes are also displayed. Click the edit button or use the F4 keyboard shortcut to edit the attributes."
  },
  {
    "objectID": "docs/visual-editor/content.html#special-characters",
    "href": "docs/visual-editor/content.html#special-characters",
    "title": "Content Editing",
    "section": "Special Characters",
    "text": "Special Characters\n\nHard Line Breaks\nYou can insert a hard line break using the Insert -> Special Characters -> Hard Line Break command or via the ⇧ Enter keyboard shortcut.\n\n\nNon-Breaking Spaces\nYou can insert a non-breaking space using the Insert -> Special Characters -> Non-Breaking Space command or via the ⌃ Space keyboard shortcut. Non-breaking spaces are displayed with an alternate background color to distinguish them from normal spaces.\nA markdown non-breaking space will result in the &nbsp; character within HTML output and a ~ character within LaTeX output.\n\n\nEmojis\nTo insert an emoji, you can use either the Insert menu or the requisite markdown shortcut plus auto-complete:\n\n\n\n\n\n\n\nInsert -> Special Characters -> Emoji…\nMarkdown Shortcut\n\n\n\n\n\n\n\n\n\nFor markdown formats that support text representations of emojis (e.g. :grinning:), the text version will be written. For other formats the literal emoji character will be written. Currently, the gfm and hugo (with enableEmoji = true in the site config) formats both support text representation of emojis.\nIf you want to add support for markdown emoji output to another Quarto format, you can add the emoji extension to the from option in document metadata. For example:\n---\ntitle: \"My Document\"\nfrom: markdown+emoji\n---\n\n\nUnicode Symbols\nTo insert an arbitrary Unicode character, use Insert -> Special Characters -> Unicode…:\n\nYou can search for characters either by name or by entering an explicit Unicode code point (e.g. “U+0420”).\n\n\nSmart Punctuation\nWhen the Pandoc smart extension is enabled (which it is by default), straight quotes are interpreted as curly quotes, --- as em-dashes, -- as en-dashes, and ... as ellipses. In addition, non-breaking spaces are inserted after certain abbreviations, such as “Mr.”\nVisual mode supports these same transformations (so when you type --- it becomes an em-dash). If you didn’t intend for this transformation to occur just hit backspace and it will be reverted."
  },
  {
    "objectID": "docs/visual-editor/content.html#spell-checking",
    "href": "docs/visual-editor/content.html#spell-checking",
    "title": "Content Editing",
    "section": "Spell-Checking",
    "text": "Spell-Checking\nWhen RStudio real time spell-checking is enabled (you can do this using Spelling preferences), misspelled words will be underlined as you type:\n\nTo resolve a spelling error, right-click on the misspelled word, then either choose an alternate spelling, ignore the word (which applies to the current document only), or add the word to your user dictionary (which applies to all documents).\nIf you ignore a word by mistake, right-click it again to unignore it. If you want to edit your personal dictionary, use the Edit User Dictionary… button located within Spelling preferences."
  },
  {
    "objectID": "docs/visual-editor/content.html#commenting",
    "href": "docs/visual-editor/content.html#commenting",
    "title": "Content Editing",
    "section": "Commenting",
    "text": "Commenting\nWhen reviewing a document you often want to provide inline comments with suggested revisions. This is possible in Quarto using HTML comments (which are ignored by all output formats). Visual mode includes a command for inserting HTML comments as well as special highlighting treatment to easily parse out editing comments from surrounding text.\n\nNote that the # prefix used in the comment is what triggers the special background highlighting. If you remove the # it will still be a valid HTML comment, but just won’t be highlighted as shown above.\nYou can insert an HTML comment using the Comment button on the toolbar or via the ⇧⌘ C keyboard shortcut. Remember, HTML comments won’t show up in rendered output so they are ideal both for review but also for leaving yourself to-do notes within a document."
  },
  {
    "objectID": "docs/visual-editor/content.html#css-styles",
    "href": "docs/visual-editor/content.html#css-styles",
    "title": "Content Editing",
    "section": "CSS Styles",
    "text": "CSS Styles\nOne of the benefits of authoring with markdown is that your content can be easily published to a wide variety of formats. This is possible in significant measure because of the limitations that markdown imposes: you author in terms of the structure and semantics of your content, rather than worrying about specifically how things will appear.\nSometimes however you know that you’ll be publishing to HTML, and you want to exert more control over how things look. In this case, you can use CSS (Cascading Style Sheets) along with markdown to do custom formatting. This section covers how to:\n\nDefine CSS styles for your document; and\nApply those styles to entities within your document.\n\nIf you are new to CSS, you may want to brush up on the basics before proceeding.\n\n\n\n\n\n\nCSS styles apply only to HTML output, and will not have any impact on the formatting of other output types like PDF or MS Word.\n\n\n\n\nDefining Styles\nThe best way to include CSS styles is to create an external stylesheet (e.g. styles.css), then include it within the output options of your document. For example:\n---\ntitle: \"CSS Demo\"\nformat:\n  html:\n    css: styles.css\n---\nThe styles.css file might look something like this:\n.important {\n  color: maroon;\n}\n\n.illustration {\n  border: 1px solid rgb(230, 230, 230); \n}\nNote that it’s also possible to define styles inline with a CSS code chunk, but we recommend using an external file for easier manageability.\nWithin a markdown document you can apply one or more CSS classes to various document entities including headings, images, divs, and spans. CSS classes are applied using pandoc attributes. Once you’ve applied a class to an entity, it will derive its formatting from the CSS properties of the specified class.\n\n\nHeadings\nTo add a CSS class to a heading, use the edit button at the top right of the heading that appears when your cursor is within it (or use the F4 keyboard shortcut):\n\nNote the presence of the .important class within the Edit Attributes dialog.\nCSS classes applied to headings affect all content beneath the heading (an HTML <section> tag is wrapped around the content by Pandoc), so heading classes are a great way to provide custom styles for entire sections of your document.\n\n\n\n\n\n\nNote that the visual editor doesn’t currently render content using styles applied through CSS classes so you won’t see the custom formatting while editing. You will however see it when rendering and previewing the HTML version of the document.\n\n\n\n\n\nImages\nYou can apply CSS classes to images (for example, to give them a special border) using the standard Image dialog. To do this, double-click the image (or use the F4 shortcut with the image selected) and apply the desired classes:\n\nNote again that the visual editor won’t display your image with the applied CSS classes while editing, however when actually rendering the document to HTML you’ll see the styles reflected.\n\n\nDivs\nDivs are special entities that allow you to apply identifiers and/or styles to a region of a document. Divs are block elements (like paragraphs).\nYou can create divs using the Insert -> Div command, and you can apply attributes (including CSS classes) to divs the same way as you apply attributes to headings (clicking the edit button or using the F4 keyboard shortcut when you are within a div):\n\nNote the presence of the .important class within the Div Attributes dialog.\n\n\nSpans\nSpan are special entities that allow you to apply identifiers and/or styles to a region of text. Spans are inline formatting marks (like bold or italic).\nSpans can be created by selecting text and using the Format -> Span command:\n\nHere we’ve applied a span to the text “customize PDF reports” and we’ve used the span to apply the .important CSS class. Note that as with headings and images the formatting is not displayed in the visual editor, but will be visible when the document is rendered."
  },
  {
    "objectID": "docs/visual-editor/markdown.html",
    "href": "docs/visual-editor/markdown.html",
    "title": "Markdown Output",
    "section": "",
    "text": "The Quarto visual editor generates markdown using Pandoc. This means that in some cases your markdown will be rewritten to conform to standard Pandoc idioms. For example, Pandoc inserts 3 spaces after list bullets and automatically escapes characters that might be used for markdown syntax.\nHere is a list of conventions for Pandoc generated markdown that might differ from your own markdown writing style:\n\n*text* is used in preference to _text_\nBacktick code blocks are written as ``` {.md} rather than ```md\nBacktick code blocks with no attributes are rendered as 4-space indented code blocks\nHorizontal rules are written as dashes spanning the full width of the document\nPlain links are written as <https://yihui.org> rather than https://yihui.org\nBullet and numbered lists use additional leading spaces before list item content\nThe blockquote character (>) is included on each new line of a blockquote\nTable captions are written below rather than above tables\nMultiline HTML and TeX blocks use the explicit raw attribute (e.g. ```{=tex})\nInline footnotes are replaced with footnotes immediately below the paragraph\nNested divs use ::: at all levels so long as their attributes are distinct\nUnnumbered sections are designated with {.unnumbered} rather than {-}\nCharacters used for markdown syntax (e.g. *, _, or #) are always escaped\n\nWhile some of this behavior might be bothersome at first, if you decide that visual editing mode is useful for your workflow it’s probably best to just adapt to writing your own markdown the same way that Pandoc does. Note that you can also configure source mode to write markdown using these conventions, ensuring that the same markdown is written no matter which mode edits originate from."
  },
  {
    "objectID": "docs/visual-editor/markdown.html#writer-options",
    "href": "docs/visual-editor/markdown.html#writer-options",
    "title": "Markdown Output",
    "section": "Writer Options",
    "text": "Writer Options\nSome aspects of markdown output can be customized via global, project, or file-level options, including:\n\nHow to wrap / break lines (fixed column, sentence-per-line, etc.).\nWhere to write footnotes (below the current paragraph or section, or at the end of the document).\nWhether to use the visual mode markdown writer when saving markdown from source mode (to ensure consistency between documents saved from either mode).\n\nYou can set these options within the R Markdown Global Options or Project Options, or can alternatively set them on a per-file basis using YAML (as described below).\n\nLine Wrapping\nBy default, the visual editor writes Markdown with no line wrapping (paragraphs all occupy a single line). This matches the behavior of markdown source editing mode within RStudio.\nHowever, if you prefer to insert line breaks at a particular column (e.g. 72 or 80), or to insert a line break after each sentence, you can set a global or per-project editor option to this effect.\nYou can also set this behavior on a per-document basis via the wrap option. For example, to wrap lines after 72 characters you would use this:\n---\neditor_options:\n  markdown:\n    wrap: 72\n---\nTo insert a line break after each sentence, use wrap: sentence. For example:\n---\neditor_options:\n  markdown:\n    wrap: sentence\n---\n\n\n\n\n\n\nThe algorithm used for sentence wrapping will handle English and Japanese text well, but may not detect the end of sentences accurately for other languages.\n\n\n\nIf you have enabled a global line wrapping option and want to turn off wrapping for a given document, use wrap: none.\n\n\nReferences\nBy default, references are written at the end of the block where their corresponding footnote appears. You can override this behavior using the references option.\nFor example, to write references at the end of sections rather than blocks you would use:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    references: \n      location: block\n---\nValid values for the references option are block, section, and document.\nNote that you can also set a global or per-project editor option to control reference writing behavior.\nIf you are aggregating a set of markdown documents into a larger work, you may want to make sure that reference identifiers are unique across all of your documents (e.g. you don’t want to have [^1] appear multiple times). You can ensure uniqueness via the prefix option. For example:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    references: \n      location: block\n      prefix: \"mydoc\"\n---\nThis will result in footnotes in this document using the specified prefix (e.g. [^mydoc-1]), ensuring they are globally unique across the manuscript.\n\n\n\n\n\n\nNote that if you are within a Quarto book project then a references prefix is applied automatically so no changes to editor_options are required.\n\n\n\n\n\nCanonical Mode\nIf you have a workflow that involves editing in both visual and source mode, you may want to ensure that the same markdown is written no matter which mode edits originate from. You can accomplish this using the canonical option. For example:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    wrap: 72\n    references: \n      location: block\n    canonical: true\n---\nWith canonical: true, edits in visual mode and source mode will result in identical markdown output. This is especially useful if you have multiple authors collaborating using version control, with a mixture of source and visual mode editing among the authors."
  },
  {
    "objectID": "docs/visual-editor/markdown.html#known-limitations",
    "href": "docs/visual-editor/markdown.html#known-limitations",
    "title": "Markdown Output",
    "section": "Known Limitations",
    "text": "Known Limitations\nThere are a handful of Pandoc markdown extensions not currently supported by visual editing. These are infrequently used extensions, so in all likelihood they won’t affect documents you edit, but are still worth noting.\n\n\n\n\n\n\n\n\nExtension(s)\nExample\nBehavior\n\n\n\n\nInline footnotes\n^[inline]\nConverted to numeric footnote.\n\n\nFootnote identifiers\n[^longnote]\nConverted to numeric footnote.\n\n\nExample lists\n(@) First example\nRead/written as ordinary numbered lists.\n\n\nAuto-list numbers\n#. First item\nRead/written as ordinary numbered lists.\n\n\nReference links\nThis is a [link]\nConverted to ordinary links.\n\n\nMultiMarkdown attributes\n# Heading [id]\nConverted to Pandoc attributes.\n\n\n\nThe visual editor is unable to parse non-YAML title blocks (e.g. old-style % titles or MultiMarkdown titles) and also unable to parse non top-level YAML metadata blocks. If these forms of metadata are encountered, visual mode will fail to load with a warning."
  },
  {
    "objectID": "docs/visual-editor/technical.html",
    "href": "docs/visual-editor/technical.html",
    "title": "Technical Writing",
    "section": "",
    "text": "Visual mode includes extensive support for Quarto features frequently used in technical writing including equations, citations, cross-references, footnotes, embedded code, and LaTeX. This article describes using these features in more depth."
  },
  {
    "objectID": "docs/visual-editor/technical.html#equations",
    "href": "docs/visual-editor/technical.html#equations",
    "title": "Technical Writing",
    "section": "Equations",
    "text": "Equations\nLaTeX equations are authored using standard Pandoc markdown syntax (the editor will automatically recognize the syntax and treat the equation as math). When you aren’t directly editing an equation it will appear as rendered math:\n\nAs shown above, when you select an equation with the keyboard or mouse you can edit the equation’s LaTeX. A preview of the equation will be shown below it as you type."
  },
  {
    "objectID": "docs/visual-editor/technical.html#cross-references",
    "href": "docs/visual-editor/technical.html#cross-references",
    "title": "Technical Writing",
    "section": "Cross References",
    "text": "Cross References\nCross References make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures, tables, and equestions.\nEvery cross-referenceable entity requires a label (unique identifier) and caption (description). For example, this is a cross-referenceable figure:\n![Elephant](elephant.png){#fig-elephant}\nThe presence of the caption (“Elephant”) and label (#fig-elephant) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\nSee @fig-elephant for an illustration.\nHere is what this would look like rendered to HTML:\n\nSee the article on Cross References for full documentation on creating cross references and customizing their display.\nUse the Insert -> Cross Reference… command to insert a cross reference:\n\nYou can also just type prefix of a cross reference label (e.g. @fig-env) and select it via auto-complete:\n\nSimilar to hyperlinks, you can also navigate to the location of a cross-reference by clicking the popup link that appears when it’s selected:\n\nYou can also navigate directly to any cross-reference using IDE global search:"
  },
  {
    "objectID": "docs/visual-editor/technical.html#footnotes",
    "href": "docs/visual-editor/technical.html#footnotes",
    "title": "Technical Writing",
    "section": "Footnotes",
    "text": "Footnotes\nYou can include footnotes using the Insert -> Footnote command (or the ⇧⌘ F7 keyboard shortcut). Footnote editing occurs in a pane immediately below the main document:\n\n\n\n\n\n\n\nBy default footnotes will be written in markdown immediately below the block in which they appear. You can customize this behavior via editor options."
  },
  {
    "objectID": "docs/visual-editor/technical.html#embedded-code",
    "href": "docs/visual-editor/technical.html#embedded-code",
    "title": "Technical Writing",
    "section": "Embedded Code",
    "text": "Embedded Code\nSource code which you include in a Quarto document can either be for display only or can be executed by Jupyter or Knitr as part of rendering. Code can furthermore be either inline or block.\n\nDisplaying Code\nTo display but not execute code, either use the Insert -> Code Block menu item, or start a new line and type either:\n\n``` (for a plain code block); or\n```<lang> (where <lang> is a language) for a code block with syntax highlighting.\n\nThen press the Enter key. To display code inline, simply surround text with backticks (`code`), or use the Format -> Code menu item.\n\n\nCode Chunks\nTo insert an executable code chunk, use the Insert -> Code Chunk menu item, or start a new line and type:\n```{r}\nThen press the Enter key. Note that r could be another language supported by knitr (e.g. python or sql) and you can also include a chunk label and other chunk options.\nTo include inline R code, you just create normal inline code (e.g. by using backticks or the ⌘ D shortcut) but preface it with r. For example, this inline code will be executed by knitr: `r Sys.Date()`. Note that when the code displays in visual mode it won’t have the backticks (but they will still appear in source mode).\n\n\nRunning Chunks\nYou can execute the currently selected R or Python code chunk using either the run button at the top right of the code chunk or using the ⇧⌘ Enter keyboard shortcut:\n\nYou can execute code chunks up to the current one using the toolbar button or using the ⌥⌘ P keyboard shortcut."
  },
  {
    "objectID": "docs/visual-editor/technical.html#latex-and-html",
    "href": "docs/visual-editor/technical.html#latex-and-html",
    "title": "Technical Writing",
    "section": "LaTeX and HTML",
    "text": "LaTeX and HTML\nYou can also include raw LaTeX commands or HTML tags when authoring in visual mode. The raw markup will be automatically recognized and syntax highlighted. For example:\n\nThe above examples utilize inline LaTex and HTML. You can also include blocks of raw content using the commands on the Format -> Raw menu. For example, here is a document with a raw LaTeX block:\n\n\n\n\n\n\n\nNote that Pandoc ignores LaTeX commands when not producing LaTeX based output, and ignores HTML tags when not producing HTML based output."
  },
  {
    "objectID": "docs/visual-editor/technical.html#citations",
    "href": "docs/visual-editor/technical.html#citations",
    "title": "Technical Writing",
    "section": "Citations",
    "text": "Citations\nVisual mode uses the standard Pandoc markdown representation for citations (e.g. [@citation]). Citations can be inserted from a variety of sources:\n\nYour document bibliography.\nZotero personal or group libraries.\nDOI (Document Object Identifier) references.\nSearches of Crossref, DataCite, or PubMed.\n\nIf you insert citations from Zotero, DOI look-up, or a search then they are automatically added to your document bibliography.\n\nBibliographies\nPandoc supports bibliographies in a wide variety of formats including BibTeX and CSL. Add a bibliography to your document using the bibliography YAML metadata field. For example:\n---\ntitle: \"My Document\"\nbibliography: references.bib\nlink-citations: true\n---\nNote that we’ve also specified the link-citations option, which will make your citations hyperlinks to the corresponding bibliography entries.\nSee the Pandoc Citations documentation for additional information on bibliography formats.\n\n\nInserting Citations\nYou insert citations by either using the Insert -> Citation command or by using markdown syntax directly (e.g. [@cite] or @cite) .\nCitations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of ‘@’ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. The citation key must begin with a letter, digit, or _, and may contain alphanumerics, _, and internal punctuation characters (:.#$%&-+?<>~/). Here are some examples:\n\n  \n    Blah Blah [see @doe99, pp. 33-35; also @smith04, chap. 1].\n  \n\n\n  Blah Blah [@doe99, pp. 33-35, 38-39 and passim].\n  \n\n\n  Blah Blah [@smith04;\n  @doe99].\n\n  Smith says blah [-@smith04].\n  \n\nYou can also write in-text citations, as follows:\n\n  \n    @smith04 says blah.\n  \n  \n    @smith04 [p. 33] says blah.\n  \n\nSee the Pandoc Citations documentation for additional information on citation syntax.\nUse the  toolbar button or the ⇧⌘ F8 keyboard shortcut to show the Insert Citation dialog:\n\nNote that you can insert multiple citations by using the add button on the right side of the item display.\n\nMarkdown Syntax\nYou can also insert citations directly using markdown syntax (e.g. [@cite]). When you do this a completion interface is provided for searching available citations:\n\n\n\nCitation IDs\nBefore inserting a citation from an external source you will may wish to customize its ID. Within the Insert Citation dialog, click the edit button on the right side of citations to change their ID:\n\nIf you insert a new citation via code completion, you will also be provided with the opportunity to change its default citation ID.\nFor citations inserted from Zotero, you can also use the Better BibTeX plugin to generate citation IDs (this can be enabled via Citation Options if you have Better BibTeX installed).\n\n\nCitation Preview\nOnce you’ve inserted a citation, place the cursor over it to see a preview of it along with a link to the source if one is available:\n\n\n\n\nCitations from DOIs\nUse the From DOI pane of the Insert Citation dialog to insert a citation based on a DOI (e.g that you have retrieved from a PubMed or other search):\n\nIf you are using markdown syntax, you can also paste a DOI after the [@ and it will be looked up:\n\nOnce you’ve confirmed that it’s the correct work (and possibly modified the suggested ID), the citation will be inserted into the document and an entry for the work added to your bibliography.\n\n\nCitations from Search\nUse the Crossref, DataCite, and PubMed panes of the Insert Citation dialog to search one of those services for a citation:\n\nItems inserted from a search will automatically be added to your bibliography.\nNote that for PubMed queries you can use the full supported query syntax. For example, this query searches on the author and title fields: Peterson[Author] AND Embolism[Title]. You can learn more about building PubMed queries here: https://pubmed.ncbi.nlm.nih.gov/advanced/.\n\n\nCitations from Zotero\nZotero is a popular free and open source reference manager. If you use Zotero, you can also insert citations directly from your Zotero libraries. If you have Zotero installed locally its location will be detected automatically and citations from your main library (My Library) will be available:\n\nZotero references will also show up automatically in completions:\n\nItems from Zotero will appear alongside items from your bibliography with a small “Z” logo juxtaposed over them. If you insert a citation from Zotero that isn’t already in your bibliography then it will be automatically added to the bibliography.\nIf you are running both RStudio and Zotero on your desktop, then no additional configuration is required for connecting to your Zotero library. If however you using RStudio Server and/or want to access your Zotero library over the web, then a few more steps are required (see the Zotero Web API section for details).\n\nGroup Libraries\nZotero Groups provide a powerful way to share collections with a class or work closely with colleagues on a project. By default, Zotero Group Libraries are not included in the Insert Citation dialog or citation completions. However, there are options available to use group libraries at a global, per-project, or per-document level.\nFor example, here we specify a project-level option to use the Reproducible Research Series (Year 1) group library:\n\nYou can also specify one or more libraries within YAML. For example:\n---\ntitle: \"Reproducible Research\"\nzotero: \"Reproducible Research Series (Year 1)\"\n---\nNote that you can also turn off Zotero entirely for a document using zotero: false:\n---\ntitle: \"Reproducible Research\"\nzotero: false\n---\n\n\nZotero Web API\nIf you are using RStudio Server and/or don’t have Zotero installed locally, you can still access your Zotero library using the Zotero Web API (assuming you have a Zotero web account and have synced your libraries to your account).\n\n\n\n\n\n\nIf you are running RStudio Desktop, it’s generally easier to also run Zotero on your desktop and access your library locally. That said, it is possible to access Zotero web libraries from RStudio Desktop if you prefer that configuration.\n\n\n\n\nAPI Access Key\nRStudio accesses Zotero web libraries using the Zotero Web API, so the first step is to create a Zotero account and then configure Zotero to sync its data to your account. You can do this using the Sync tab of the Zotero preferences:\n\nOnce you’ve configured your library to sync, you need to create a Zotero API Key to use with RStudio:\n\nFollow the instructions to create a new access key. Note that if you want to use Group Libraries with RStudio that you should change the default to provide read-only access to groups (as illustrated above).\nBe sure to record your key after generating it (i.e. copy it to the clipboard and/or save it somewhere more permanent) as you won’t be able to view it again after you navigate away.\nFinally, go to the R Markdown -> Citations preferences to connect Zotero to RStudio using your key:\n\nSet the Zotero Library option to “Web”, then paste in your Zotero Web API Key. You can use Verify Key… button to confirm that your Zotero API key is working correctly.\nOnce you’ve confirmed your connection you are ready to start inserting citations from Zotero."
  },
  {
    "objectID": "docs/visual-editor/index.html",
    "href": "docs/visual-editor/index.html",
    "title": "Visual Editor",
    "section": "",
    "text": "The Quarto visual editor provides a WYSIWYM editing interface for all of Pandoc markdown, including tables, citations, cross-references, footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more. The visual editor also includes support for executing code cells and viewing their output inline:\n\nThe visual editor doesn’t attempt to abstract away or obscure the underlying markdown document. Rather, it aims to provide a highly productive writing interface for people that love markdown. You can also still use most markdown constructs (e.g., ## or bold) directly for formatting.\n\n\nMarkdown documents can be edited in either source or visual mode. To switch into visual mode for a given document, use the  button at the top-right of the document toolbar (or alternatively the ⌘⇧ F4 keyboard shortcut):\n\nNote that you can switch between source and visual mode at any time (editing location and undo/redo state will be preserved when you switch)."
  },
  {
    "objectID": "docs/visual-editor/index.html#getting-started",
    "href": "docs/visual-editor/index.html#getting-started",
    "title": "Visual Editor",
    "section": "Getting Started",
    "text": "Getting Started\nThe Quarto visual editor is currently available as a feature of the RStudio IDE. The visual editor will eventually also be made available in standalone form.\n\n\n\n\n\n\nNote that the visual editor being a feature of RStudio should not dissuade you from using it if you are working with Python/Jupyter: RStudio includes robust support for Python, including inline cell execution, auto-complete, a variable explorer, and more.\n\n\n\nTo get started with the visual editor, download the latest release of RStudio (v2022.02) for your platform from:\nhttps://rstudio.com/products/rstudio/download/\nNote that Quarto visual editing is only available in the preview release (the current stable release of RStudio has an earlier version of the visual editor not tailored for use with Quarto)."
  },
  {
    "objectID": "docs/visual-editor/index.html#using-the-editor",
    "href": "docs/visual-editor/index.html#using-the-editor",
    "title": "Visual Editor",
    "section": "Using the Editor",
    "text": "Using the Editor\n\nKeyboard Shortcuts\nThere are keyboard shortcuts for all basic editing tasks. Visual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading. Here are some of the most commonly used shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nLink\n⌘ K\n<href>\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\n\nSee the editing shortcuts article for a complete list of all shortcuts.\n\n\nInsert Anything\nYou can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above), you can also enter plain / to invoke the shortcut.\n\n\nEditor Toolbar\nThe editor toolbar includes buttons for the most commonly used formatting commands:\n\nAdditional commands are available on the Format, Insert, and Table menus:\n\n\n\n\n\n\n\n\nFormat\nInsert\nTable"
  },
  {
    "objectID": "docs/visual-editor/index.html#learning-more",
    "href": "docs/visual-editor/index.html#learning-more",
    "title": "Visual Editor",
    "section": "Learning More",
    "text": "Learning More\nCheck out the following articles to learn more about visual markdown editing:\n\nTechnical Writing covers features commonly used in scientific and technical writing, including citations, cross-references, footnotes, equations, embedded code, and LaTeX.\nContent Editing provides more depth on visual editor support for tables, lists, pandoc attributes, CSS styles, comments, symbols/emojis, etc.\nShortcuts & Options documents the two types of shortcuts you can use with the editor: standard keyboard shortcuts and markdown shortcuts and describes various options for configuring the editor.\nMarkdown Output describes how the visual editor parses and writes markdown and describes various ways you can customize this."
  },
  {
    "objectID": "docs/visual-editor/options.html",
    "href": "docs/visual-editor/options.html",
    "title": "Shortcuts & Options",
    "section": "",
    "text": "Visual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading.\nHere are the available keyboard and markdown shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nStrikeout\n\n~~strike~~\n\n\nSubscript\n\n~sub~\n\n\nSuperscript\n\n^super^\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nHeading Attributes\n\n{#id .class}\n\n\nBlockquote\n\n>\n\n\nCode Block\n⇧⌘ \\\n```\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\nRaw Block\n\n```{=html}\n\n\nDiv\n\n:::\n\n\nBullet List\n\n-\n\n\nOrdered List\n\n1.\n\n\nTight List\n⌥⌘ 9\n\n\n\nList Check\n\n[x]\n\n\nLink\n⌘ K\n<href>\n\n\nEmoji\n\n:smile:\n\n\nDefinition\n\n:\n\n\nNon-Breaking Space\n⌃ Space\n\n\n\nHard Line Break\n⇧ Enter\n\n\n\nParagraph\n⌥⌘ 0\n\n\n\nImage\n⇧⌘ I\n\n\n\nFootnote\n⇧⌘ F7\n\n\n\nCitation\n⇧⌘ F8\n[@\n\n\nTable\n⌥⌘ T\n\n\n\nEditing Comment\n⇧⌘ C\n\n\n\nSelect All\n⌘ A\n\n\n\nClear Formatting\n⌘ \\\n\n\n\nEdit Attributes\nF4\n\n\n\nRun Code Chunk\n⇧⌘ Enter\n\n\n\nRun Previous Chunks\n⇧⌥⌘ P\n\n\n\n\n\n\n\n\n\n\nFor markdown shortcuts, if you didn’t intend to use a shortcut and want to reverse its effect, just press the backspace key."
  },
  {
    "objectID": "docs/visual-editor/options.html#insert-anything",
    "href": "docs/visual-editor/options.html#insert-anything",
    "title": "Shortcuts & Options",
    "section": "Insert Anything",
    "text": "Insert Anything\nYou can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above) you can also enter plain / to invoke the shortcut."
  },
  {
    "objectID": "docs/visual-editor/options.html#global-options",
    "href": "docs/visual-editor/options.html#global-options",
    "title": "Shortcuts & Options",
    "section": "Global Options",
    "text": "Global Options\nYou can customize visual editing options within R Markdown -> Visual (note that the visual editor was originally created for use with R Markdown so its options are located there — these options are also applicable to usage with Quarto):\n\n\n\n\nOption\nDescription\n\n\n\n\nUse visual editing by default\nSwitch to visual mode immediately when creating new documents.\n\n\nShow document outline by default\nShow the navigational outline when opening documents in visual mode.\n\n\nEditor content width\nMaximum width for editing content. This is intended to keep editing similar to the width that users will see.\n\n\nEditor font size\nBase font size for editor content (default: inherit from IDE settings).\n\n\nShow margin column indicator in code blocks\nShow vertical line that indicates location of editing margin column (e.g. 80).\n\n\nDefault spacing between list items\nWhether to use tight or normal spacing between list items by default. See Tight Lists for details.\n\n\nAutomatic text wrapping (line breaks)\nWhen writing markdown, automatically insert line breaks after sentences or at a specified column (default: flow text; no auto-wrapping). See Line Wrapping for details.\n\n\nWrite references at end of current\nWrite references (footnotes) at the end of the block or section where they appear, or at the end of the document. See References for details.\n\n\nWrite canonical visual mode markdown in source mode\nUse the visual mode markdown writer when saving markdown from source mode (ensure consistency between documents saved from either mode)."
  },
  {
    "objectID": "docs/visual-editor/options.html#citation-options",
    "href": "docs/visual-editor/options.html#citation-options",
    "title": "Shortcuts & Options",
    "section": "Citation Options",
    "text": "Citation Options\nYou can customize visual editor citation options within R Markdown -> Citations:\n\n\n\n\nOption\nDescription\n\n\n\n\nZotero Library\nLocation of Zotero citation library (Local or Web).\n\n\nZotero Data Directory\nLocation of Zotero local data directory.\n\n\nUse libraries\nZotero libraries to use as reference sources.\n\n\nUse Better BibTeX for citation keys and BibTeX export.\nOptionally use Better BibTeX to generate citation keys and export BibTeX from Zotero (this option appears only if Better BibTeX is installed)."
  },
  {
    "objectID": "docs/visual-editor/options.html#project-options",
    "href": "docs/visual-editor/options.html#project-options",
    "title": "Shortcuts & Options",
    "section": "Project Options",
    "text": "Project Options\nGlobal options that affect the way markdown is written can also be customized on a per-project basis. You can do this using the R Markdown pane of the Project Options dialog:\n\nBy default projects inherit the current global settings for markdown writing and Zotero libraries."
  },
  {
    "objectID": "docs/visual-editor/options.html#file-options",
    "href": "docs/visual-editor/options.html#file-options",
    "title": "Shortcuts & Options",
    "section": "File Options",
    "text": "File Options\nGlobal and project options that affect the way markdown is written can also be customized on a per-file basis . You can do this by including an editor_options: markdown key in the YAML front matter of your document. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\neditor_options:\n  markdown:\n    wrap: 72\n---\nYou might want to do this to ensure that multiple authors on different workstations use the same markdown writing options.\nYou can also instruct RStudio to use these same options when saving files from source mode. To do this add the canonical option. For example:\n---\neditor_options:\n  markdown:\n    wrap: 72\n    canonical: true\n---\nWith canonical: true, edits in visual mode and source mode will result in identical markdown output. This is especially useful if you have multiple authors collaborating using version control, with a mixture of source and visual mode editing among the authors.\nSee the documentation on Writer Options for additional details on markdown writing options."
  },
  {
    "objectID": "docs/interactive/shiny/execution.html",
    "href": "docs/interactive/shiny/execution.html",
    "title": "Execution Contexts",
    "section": "",
    "text": "Shiny interactive documents can contain both code that executes at render time as well as code that executes on the server in response to user actions and changes in input values. A solid understanding of these execution contexts is important both to have the right mental model during development as well as to optimize the performance of your document."
  },
  {
    "objectID": "docs/interactive/shiny/execution.html#render-server-contexts",
    "href": "docs/interactive/shiny/execution.html#render-server-contexts",
    "title": "Execution Contexts",
    "section": "Render & Server Contexts",
    "text": "Render & Server Contexts\nTo break this down more clearly, let’s revisit the “Hello, Shiny” document we started with in the introduction to interactive documents:\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\n\n```{r}\nsliderInput(\"bins\", \"Number of bins:\", \n            min = 1, max = 50, value = 30)\nplotOutput(\"distPlot\")\n```\n\n```{r}\n#| context: server\noutput$distPlot <- renderPlot({\n  x <- faithful[, 2]  # Old Faithful Geyser data\n  bins <- seq(min(x), max(x), length.out = input$bins + 1)\n  hist(x, breaks = bins, col = 'darkgray', border = 'white')\n})\n```\nHere is how execution breaks down for this document:\n\nThe first code chunk that contains the calls to sliderInput() and plotOutput() will execute when you render the document (e.g. quarto render old-faithful.qmd).\nThe second code chunk with the context: server option will not execute at render time, but rather will execute only when the document is served.\n\nIt’s critical to understand that the two chunks are run in completely separate R sessions. That means that you cannot access variables created in the first chunk within the second, and vice-versa. The is analogous to the ui.R and server.R scripts that compose most normal Shiny applications.\nOf course, it’s quite useful to be able to re-use code between contexts, and we’ll cover some ways to do this in the Sharing Code section below.\n\n\n\n\n\n\nIn order to make the code of interactive documents straightforward to understand and work with, we strongly recommend that your server contexts (there can be more than one) be located at the bottom of the document. This makes the separate execution environments more clear in the flow of the document source code.\n\n\n\n\nserver.R\nThere is one other option if you prefer to have a stronger separation. You can restrict your .qmd file to only code that will execute at render time, and then split out the server code into a separate server.R file.\nRe-writing our example in this fashion would look like this:\n\nold-faithful.qmd\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\n\n```{r}\nsliderInput(\"bins\", \"Number of bins:\", \n            min = 1, max = 50, value = 30)\nplotOutput(\"distPlot\")\n```\n\n\nserver.R\nfunction(input, output, session) {\n  output$distPlot <- renderPlot({\n    x <- faithful[, 2]  # Old Faithful Geyser data\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x, breaks = bins, col = 'darkgray', border = 'white')\n  })\n}\nThis is perhaps a bit less convenient but does align better with the traditional ui.R / server.R separation that exists in traditional Shiny applications."
  },
  {
    "objectID": "docs/interactive/shiny/execution.html#sharing-code",
    "href": "docs/interactive/shiny/execution.html#sharing-code",
    "title": "Execution Contexts",
    "section": "Sharing Code",
    "text": "Sharing Code\nSharing code between rendering contexts works a bit differently depending on if your code is in a single .qmd file or if it uses server.R. We’ll cover both scenarios below.\n\nSingle File\n\ncontext: setup\nTo have code execute in both rendering and serving contexts, create a code chunk with context: setup. For example:\n```{r}\n#| context: setup\n#| include: false\n\n# load libraries\nlibrary(dplyr)\n\n# load data\ndataset <- import_data(\"data.csv\")\ndataset <- sample_n(dataset, 1000)\n```\nThis code will execute at both render time as well as when the server is created for each new user session. Note that we also specify include: false to make sure that code, warnings, and output from the chunk are not included in the rendered document.\n\n\ncontext: data\nThe loading and manipulation of data often dominates the startup time of Shiny applications. Since interactive documents are executed in two phases (the initial render and then the serving of the document to users) we can perform the expensive data manipulations during rendering and then simply load the data when starting up the application.\nYou can define prerendered data by adding the context: data option to an R code chunk. The chunk will be executed during render and any R objects it creates will be saved to an .RData file, which will then be loaded during Shiny server startup. For example, we could take the the setup chunk illustrated above and factor out the data loading into its own chunk:\n```{r}\n#| context: data\n#| include: false\n\ndataset <- import_data(\"data.csv\")\ndataset <- sample_n(dataset, 1000)\n```\nNote that R objects created within a context: data chunk are available to both the UI rendering and server contexts.\n\n\nKnitr cache\nYou can further improve the performance of data rendering by adding the cache: true option to the data chunk. This will cause the code chunk to be re-executed only when required. For example:\n```{r}\n#| context: data\n#| include: false\n#| cache: true\n#| cache.extra: !expr file.info(\"data.csv\")$mtime\n\ndataset <- import_data(\"data.csv\")\ndataset <- sample_n(dataset, 1000)\n```\nIn this example the cache will be invalidated if either the R code in the chunk changes or the modification time of the “data.csv” file changes (this is accomplished using the cache.extra option).\nYou can also invalidate an existing cache by removing the _cache directory alongside with your interactive document.\n\n\ncontext: server-start\nThere is one additional execution context that enables you to share code and data across multiple user sessions. Chunks with context: server-start executee once when the Shiny document is first run and are not re-executed for each new user of the document. Using context: server-start is appropriate for several scenarios including:\n\nEstablishing shared connections to remote servers (e.g. databases, Spark contexts, etc.).\nCreating reactive values intended to be shared across sessions (e.g. with reactivePoll or reactiveFileReader).\n\nFor example:\n```{r}\n#| context: server-start\n\nlibrary(DBI)\ndb <- dbConnect(...)\n```\n\n\n\nMultiple Files\nIf your interactive document uses a .qmd file to define the user-interface and a server.R file for the server, you can put shared code in a file named global.R. Functions and variables defined within global.R will be available both during render as well as during execution of the server.\nIn this scenario your interactive document consists of 3 source files:\n\n\n\n\n\n\n\nFile\nDescription\n\n\n\n\ndoc.qmd\nMarkdown content as well as Shiny inputs and outputs (e.g. sliderInput(), plotOutput(), etc.)\n\n\nserver.R\nMain server function with reactive expressions, assignments to outputs, etc.\n\n\nglobal.R\nCode shared between doc.qmd and server.R."
  },
  {
    "objectID": "docs/interactive/shiny/index.html",
    "href": "docs/interactive/shiny/index.html",
    "title": "Shiny",
    "section": "",
    "text": "If you are an R user, you may already be familiar with Shiny, a package that makes it easy to build interactive web apps with R.\nWhen using the Knitr computation engine, Quarto documents can include embedded Shiny components (e.g. a plot with sliders that control its inputs) or even simple Shiny applications that include several components.\nThis section covers integrating Shiny with Quarto and assumes that you already have basic familiarity with Shiny. To learn more about Shiny please visit https://shiny.rstudio.com.\n\n\n\n\n\n\nIn order to run the examples below you will need the very latest version of the rmarkdown package (v2.10), which you can install with:\n install.packages(\"rmarkdown\")"
  },
  {
    "objectID": "docs/interactive/shiny/index.html#hello-shiny",
    "href": "docs/interactive/shiny/index.html#hello-shiny",
    "title": "Shiny",
    "section": "Hello, Shiny",
    "text": "Hello, Shiny\nFor example, here’s a document that contains a plot of the “Old Faithful” dataset along with a slider to control the number of bins:\n\nHere’s the source code for this example:\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\n\n```{r}\nsliderInput(\"bins\", \"Number of bins:\", \n            min = 1, max = 50, value = 30)\nplotOutput(\"distPlot\")\n```\n\n```{r}\n#| context: server\noutput$distPlot <- renderPlot({\n  x <- faithful[, 2]  # Old Faithful Geyser data\n  bins <- seq(min(x), max(x), length.out = input$bins + 1)\n  hist(x, breaks = bins, col = 'darkgray', border = 'white')\n})\n```\nThere are two important differences between this document and a normal static document:\n\nThe inclusion server: shiny within the document’s options, which instructs Quarto to run a Shiny Server behind the document:\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\nThe inclusion of context: server as an option in the second code chunk, which delineates this R code as running within the Shiny Server (this is the code you would typically put in server.R):\n```{r}\n#| context: server\n```\n\nWe’ll cover running and deploying Quarto documents with Shiny components in the article on Running Documents. Before that though, let’s cover a more in-depth example."
  },
  {
    "objectID": "docs/interactive/shiny/index.html#custom-layout",
    "href": "docs/interactive/shiny/index.html#custom-layout",
    "title": "Shiny",
    "section": "Custom Layout",
    "text": "Custom Layout\nHere’s an example that includes multiple inputs as well as a more application like page layout with a sidebar:\n\nHere’s the source code for this example:\n---\ntitle: \"Iris K-Means Clustering\"\nformat: \n  html:\n    page-layout: custom\nserver: shiny\n---\n\n```{r}\n#| panel: sidebar\nvars <- setdiff(names(iris), \"Species\")\nselectInput('xcol', 'X Variable', vars)\nselectInput('ycol', 'Y Variable', vars, selected = vars[[2]])\nnumericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n```\n\n```{r}\n#| panel: fill\nplotOutput('plot1')\n```\n\n```{r}\n#| context: server\nselectedData <- reactive({\n    iris[, c(input$xcol, input$ycol)]\n  })\n\nclusters <- reactive({\n  kmeans(selectedData(), input$clusters)\n})\n\noutput$plot1 <- renderPlot({\n  palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n    \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n\n  par(mar = c(5.1, 4.1, 0, 1))\n  plot(selectedData(),\n       col = clusters()$cluster,\n       pch = 20, cex = 3)\n  points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n})\n```\nThere are a few things worth noting in this example:\n\nThe YAML front-matter includes the page-layout: custom option (to indicate we want our content to occupy the entire page rather than being centered with padding).\nWe add panel: sidebar and panel: fill to the two code chunks that define the user-interface to specify that we want them laid out in special panel containers.\nWe again use context: server on the last R code chunk to indicate that it contains the Shiny Server code.\n\n\nPage Layout\nSome interactive documents you create will use narrative interspersed with Shiny components and some (like this example) will be full page applications. Some may even by hybrids—for example imagine a sidebar on the left containing inputs that control outputs interspersed with narrative in the main document body.\nSee the article on Component Layout to learn more about the available tools for managing the layout of interactive documents."
  },
  {
    "objectID": "docs/interactive/shiny/index.html#examples",
    "href": "docs/interactive/shiny/index.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Examples\nHere are some deployed examples of Quarto documents that use Shiny:\n\n\n\nExample\nSource\nDescription\n\n\n\n\nOld Faithful\nCode\nDemonstrates incorporating an interactive plot into the main flow of a document.\n\n\nK-Means\nCode\nDemonstrates using a more “application-like” page layout (sidebar and main panel)\n\n\nDiamonds\nCode\nDemonstrates an alternate way to layout inputs (at the bottom of the page in three columns)."
  },
  {
    "objectID": "docs/interactive/shiny/index.html#learning-more",
    "href": "docs/interactive/shiny/index.html#learning-more",
    "title": "Shiny",
    "section": "Learning More",
    "text": "Learning More\nTo learn more about Shiny interactive documents see the following articles:\n\nRunning Documents covers how to run interactive documents both within RStudio and at the command line, as well as how to deploy them to end users.\nExecution Contexts goes in depth on when different code blocks (e.g. rendering vs. serving) run as well as how to cache expensive computations for more responsive documents.\nExternal Resources describes how to make sure that Shiny can locate resources (e.g. CSS, JS, images, etc.) that you include in your document.\nComponent Layout enumerates the various techniques you can use to layout interactive components within your documents.\n\nIf you are using both JavaScript and Shiny to create interactive documents, you might also be interested in the article on using Shiny Reactives with OJS."
  },
  {
    "objectID": "docs/interactive/shiny/running.html",
    "href": "docs/interactive/shiny/running.html",
    "title": "Running Documents",
    "section": "",
    "text": "There are a number of ways to run Shiny interactive documents:\n\nUse Run Document within the RStudio IDE.\nUse the quarto serve command line interface.\nDeploy them to a server for use by a wider audience.\n\nWe’ll cover all of these scenario in depth here. Note that in order to run interactive Shiny documents you will to install the very latest version of the rmarkdown package (v2.10) which you can install as follows:\ninstall.packages(\"rmarkdown\")"
  },
  {
    "objectID": "docs/interactive/shiny/running.html#rstudio-ide",
    "href": "docs/interactive/shiny/running.html#rstudio-ide",
    "title": "Running Documents",
    "section": "RStudio IDE",
    "text": "RStudio IDE\nWhile you are developing an interactive document it will likely be most convenient to run within RStudio.\nNote that you need the latest release of RStudio (v2022.02) in order to run Quarto interactive documents, which you can download here https://rstudio.com/products/rstudio/download/.\nClick the Run Document button while editing a Shiny interactive document to render and view the document within the IDE:\n\nWhen you make changes, just click Run Document again to see them reflected in the document preview.\nTwo options you may want to consider enabling are Run on Save and Preview in Viewer Pane (by default previews occur in an external window). You can access these options on the editor toolbar:"
  },
  {
    "objectID": "docs/interactive/shiny/running.html#command-line",
    "href": "docs/interactive/shiny/running.html#command-line",
    "title": "Running Documents",
    "section": "Command Line",
    "text": "Command Line\nYou can also run Shiny interactive documents from the command line via quarto serve. For example:\nquarto serve document.qmd\nThere are a number of options to the serve command to control the port and host of the document server as well as whether a browser is automatically opened for the running document. You can learn more about these options with quarto serve help.\nIf you are within an R session you can also use the quarto R package to run a document:\nlibrary(quarto)\nquarto_serve(\"document.qmd\")"
  },
  {
    "objectID": "docs/interactive/shiny/running.html#deployment",
    "href": "docs/interactive/shiny/running.html#deployment",
    "title": "Running Documents",
    "section": "Deployment",
    "text": "Deployment\n\nShinyApps\nYou can publish Shiny interactive documents to the ShinyApps hosted service. To do this you should ensure that you have:\n\nAn account on ShinyApps (use the signup form to create an account).\nThe very latest versions of the rsconnect and quarto R packages. You can install them as follows:\ninstall.packages(\"rsconnect\")\ninstall.packages(\"quarto\")\n\nYou can then deploy your interactive document using the quarto_publish_app() function of the quarto package. You can do this as follows (working from the directory that contains your document):\nlibrary(quarto)\nquarto_publish_app(server = \"shinyapps.io\")\nIf you are using RStudio you can also use the Publish button  available when working with an interactive document:\n\nNote that you should always Run Document locally prior to publishing your document (as this will create the .html file that is served on ShinyApps.\n\n\nRStudio Connect\nRStudio Connect is a server product from RStudio for secure sharing of applications, reports, and plots. You can publish Shiny interactive documents to RStudio Connect in much the same way as described above for ShinyApps.\nFirst, make sure you very latest development versions of the rsconnect and quarto R packages. You can install them as follows:\ninstall.packages(\"rsconnect\")\ninstall.packages(\"quarto\")\nNext, deploy your interactive document using the quarto_publish_app() function of the quarto package, providing the domain name or IP address of your RStudio Connect installation via the server parameter. You can do this as follows (working from the directory that contains your document):\nlibrary(quarto)\nquarto_publish_app(server = \"rsc.example.com\")\nIf you are using RStudio you can also use the Publish button  as described above in the ShinyApps documentation:\n\nAs with ShinyApps, you should always Run Document locally prior to publishing your document (as this will create the .html file that is served by RStudio Connect)."
  },
  {
    "objectID": "docs/interactive/shiny/resources.html",
    "href": "docs/interactive/shiny/resources.html",
    "title": "External Resources",
    "section": "",
    "text": "There are two types of external resource file that might be referenced from within a Shiny interactive document:\n\nFiles referenced from R code (e.g. R scripts, datasets, configuration files, etc.); and\nStatic assets referenced from the web document (e.g. CSS style-sheets, images, etc.)\n\nBelow we’ll describe how each of these resource types are handled within interactive documents."
  },
  {
    "objectID": "docs/interactive/shiny/resources.html#code-resources",
    "href": "docs/interactive/shiny/resources.html#code-resources",
    "title": "External Resources",
    "section": "Code Resources",
    "text": "Code Resources\nFor files referenced from R code, you can reference anything located within the directory of (or sub-directories of) the main .qmd file. This is no different than with any other .qmd file or even R script.\nSimilarly, files created by executing R code (e.g. figures generated from code chunks) are automatically located in the document _files directory alongside the HTML output file. No special handling is required for these files."
  },
  {
    "objectID": "docs/interactive/shiny/resources.html#asset-resources",
    "href": "docs/interactive/shiny/resources.html#asset-resources",
    "title": "External Resources",
    "section": "Asset Resources",
    "text": "Asset Resources\nMany interactive documents will consist of only the generated HTML and figures located in the _files directory. However, in some cases you may want to add static images, CSS files, or other assets to your document.\nIn these cases, you need to be sure to locate the files within one of the following specially named sub-directories to ensure they can be located by the Shiny server:\n\n\n\nDirectory\nDescription\n\n\n\n\nimages/\nImage files (e.g. PNG, JPEG, etc.)\n\n\ncss/\nCSS stylesheets\n\n\njs/\nJavaScript scripts\n\n\nwww/\nAny other files (e.g. downloadable datasets)\n\n\n\nThe reason that all files within the directory of the main .qmd can’t be referenced from within the web document is that many of these files are application source code and data, which may not be something you want to be downloadable by end users. By restricting the files which can be referenced to the above directories you can control which files are downloadable and which are not."
  },
  {
    "objectID": "docs/interactive/ojs/ojs-cells.html",
    "href": "docs/interactive/ojs/ojs-cells.html",
    "title": "OJS Cells",
    "section": "",
    "text": "OJS code cells {ojs} behave a bit differently than cells in traditional notebooks, and have many options available to control their display and layout."
  },
  {
    "objectID": "docs/interactive/ojs/ojs-cells.html#cell-execution",
    "href": "docs/interactive/ojs/ojs-cells.html#cell-execution",
    "title": "OJS Cells",
    "section": "Cell Execution",
    "text": "Cell Execution\nA critical difference between OJS cell execution and traditional notebooks is that in OJS cells do not need to be defined in any particular order.\nBecause execution is fully reactive, the runtime will automatically execute cells in the correct order based on how they reference each other. This is more akin to a spreadsheet than a traditional notebook with linear cell execution.\nFor example, in this cell we reference a variable that is not yet defined (it’s defined immediately below):\n\n```{ojs}\nx + 5\n```\n\n\n\n\n\n\n\n```{ojs}\nx = 10\n```\n\n\n\n\n\n\nThis code works because the Observable runtime automatically determines the correct order of execution for the cells."
  },
  {
    "objectID": "docs/interactive/ojs/ojs-cells.html#cell-output",
    "href": "docs/interactive/ojs/ojs-cells.html#cell-output",
    "title": "OJS Cells",
    "section": "Cell Output",
    "text": "Cell Output\nBy default, OJS cells show their full source code and output within rendered documents. Depending on the type of document you are creating you might want to change this behavior either globally or for individual cells.\n\nCode Visibility\nThe echo option controls whether cells display their source code. To prevent display of code for an entire document, set the echo: false option in YAML metadata:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\n---\nYou can also specify this option on a per-cell basis. For example:\n```{ojs}\n//| echo: false\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\n\n\nOutput Visibility\nOJS cell output is also displayed by default. You can change this at a global or (more likely) per-cell level using the output option. For example, here we disable output for a cell:\n```{ojs}\n//| output: false\ndata\n```\nNote that cells which only carry assignments do not print their output by default. For example, this assignment won’t print anything:\n\n```{ojs}\n//| echo: fenced\ndummy1 = \"aHiddenAssignment\"\n```\n\n\n\n\n\n\nIf you want to print even the results of assignments, you can specify the output: all option. For example:\n\n```{ojs}\n//| echo: fenced\n//| output: all\ndummy2 = [{key: 1, value: [1, 2, [3, 4], dummy1]}]\n```\n\n\n\n\n\n\nIf you click the inspector you’ll see it expand to reveal the data as JSON.\n\n\nCode Display\nWe talked about showing and hiding source code above, but what about controlling exactly how it’s displayed?\nThere are options available for customizing the appearance of code blocks (highlighting, background, border, etc.) as well as how horizontal overflow is handled. See the article on HTML Code Blocks for all of the details.\nOne option we wanted to specifically highlight here is code folding, which enables you to collapse code but still provide an option for users to view it. This is especially handy for custom JavaScript visualizations as they often span dozens of lines of code.\nAdd the code-fold: true option to a code cell to enable code folding (you can also enable this globally). For example, click the “Code” button to show the code block (note the code-fold: true option is specified)\n\n\nCode\n```{ojs}\n//| code-fold: true\npdata = FileAttachment(\"palmer-penguins.csv\").csv({typed: true})\n\nPlot.plot({\n  facet: {\n    data: pdata,\n    x: \"sex\",\n    y: \"species\",\n    marginRight: 80\n  },\n  marks: [\n    Plot.frame(),\n    Plot.rectY(pdata, \n      Plot.binX(\n        {y: \"count\"}, \n        {x: \"body_mass\", thresholds: 20, fill: \"species\"}\n      )\n    ),\n    Plot.tickX(pdata, \n      Plot.groupZ(\n        {x: \"median\"}, \n        {x: \"body_mass\",\n         z: d => d.sex + d.species,\n         stroke: \"#333\",\n         strokeWidth: 2\n        }\n      )\n    )\n  ]\n})\n```"
  },
  {
    "objectID": "docs/interactive/ojs/ojs-cells.html#cell-layout",
    "href": "docs/interactive/ojs/ojs-cells.html#cell-layout",
    "title": "OJS Cells",
    "section": "Cell Layout",
    "text": "Cell Layout\nThere are additional panel and layout options which you can add to OJS cells to customize how their output is presented. Here’s a version of some of the previous examples we’ve used presented with a sidebar and tabset:\n\nfiltered = pdata.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\nWe created this layout by first adding the panel: sidebar option to the cell with our inputs:\n```{ojs}\n//| panel: sidebar\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\nWe then added a tabset (div of class .panel-tabset) with Plot and Data tabs (headings within the div define the tabs):\n::: {.panel-tabset}\n\n## Plot\n\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n## Data\n\n```{ojs}\nInputs.table(filtered)\n```\n\n:::\nSee the Layout example for the full source code.\nLearn more in the article on Layout for interactive documents."
  },
  {
    "objectID": "docs/interactive/ojs/ojs-cells.html#cell-figures",
    "href": "docs/interactive/ojs/ojs-cells.html#cell-figures",
    "title": "OJS Cells",
    "section": "Cell Figures",
    "text": "Cell Figures\nOJS cells can also be rendered as numbered, cross-referenceable figures. To do this, add the label and fig-cap options to the cell. For example:\n\n```{ojs}\n//| echo: fenced\n//| label: fig-penguin-body-mass\n//| fig-cap: \"Penguin body mass by sex and species\"\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n\n\n\n\nFigure 1: Penguin body mass by sex and species\n\n\n\nSee Figure 1 for further illustration.\nTo reference the figure use its label in a markdown cross reference:\nSee @fig-penguin-body-mass for further illustration."
  },
  {
    "objectID": "docs/interactive/ojs/data-sources.html",
    "href": "docs/interactive/ojs/data-sources.html",
    "title": "Data Sources",
    "section": "",
    "text": "There are a wide variety of way to make data available to OJS:\n\nRead CSV, JSON, SQLite, and more using the FileAttachments API.\nUse the ojs_define() function to make data processed in Python or R available to {ojs} cells.\nMake calls to Web APIs for online services and data stores.\n\nWe’ll explore all of these techniques below."
  },
  {
    "objectID": "docs/interactive/ojs/data-sources.html#file-attachments",
    "href": "docs/interactive/ojs/data-sources.html#file-attachments",
    "title": "Data Sources",
    "section": "File Attachments",
    "text": "File Attachments\nUse the FileAttachment function from the standard library to read data from a file. For example, here we read and plot a CSV of NOAA’s Monthly CO2 concentration data from Mauna Loa:\n\n```{ojs}\ndata = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true } );\n  return co2data.map(d => { \n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average); \n    return d; \n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data, \n      { x: \"decimal date\", y: \"average\"}, \n      { stroke: \"black\" }\n    )\n  ]\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that we specified the typed: true option to the csv() function. When this option is specified d3.autoType is used to automatically detect numbers, dates, etc. and convert them to the correct JavaScript types. This is highly recommend when you know that your data is compatible with automatic type detection.\nHere are the methods available for structured data formats:\n\n\n\nMethod\nDescription\n\n\n\n\ncsv\nComma separated values\n\n\ntsv\nTab separated values\n\n\njson\nJSON (JavaScript objects)\n\n\nsqlite\nSQLite database client\n\n\n\nThere are also methods to get the raw data as a blob, text, image, or stream."
  },
  {
    "objectID": "docs/interactive/ojs/data-sources.html#python-and-r",
    "href": "docs/interactive/ojs/data-sources.html#python-and-r",
    "title": "Data Sources",
    "section": "Python and R",
    "text": "Python and R\nThe data you want to use with OJS might not always be available in raw form. Often you’ll need to read and preprocess the raw data using Python or R. You can perform this preprocessing during document render (in an {r} or {python} code cell) and then make it available to {ojs} cells via the ojs_define() function.\nHere’s an example. We’ll read the same data into R, do some grouping and summarization, then make it available to OJS using ojs_define:\n\n```{r}\n#| output: false\n\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %>% \n  group_by(year) %>% \n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n```\n\nNote that we could have done the same thing using Python (the ojs_define function is available in any document that uses R or Python).\nNow we plot the data using Observable Plot:\n\n```{ojs}\nyearlyChart = Plot.plot({\n  marks: [\n    Plot.line(transpose(co2data), \n      {x: \"year\", y: \"max\"}, \n      { stroke: \"black\" }\n    )\n  ]}\n)\n```\n\n\n\n\n\n\nSee the NOAA C02 example for the full source code.\n\nTranspose\nYou’ll note one additional twist in the OJS code above: we call the transpose function on our co2data before plotting it. The transpose function is built in to Quarto’s OJS engine, and will convert column-oriented datasets (like the ones used in Python and R) into the row-oriented datasets used by many JavaScript plotting libraries (including Plot).\nFor example, the following JSON data emitted from R or Python:\n{\n  \"year\": [1958, 1959, 1960],\n  \"max\":  [317.51, 318.29, 320.04]\n}\nIs converted to the following via the call to transpose:\n[\n  { \"year\": 1959, \"max\": 317.51 },\n  { \"year\": 1960, \"max\": 318.29 },\n  { \"year\": 1960, \"max\": 320.04 }\n]\nCheck the documentation for whatever plotting library you are using from OJS to see whether a call to transpose is required."
  },
  {
    "objectID": "docs/interactive/ojs/data-sources.html#web-apis",
    "href": "docs/interactive/ojs/data-sources.html#web-apis",
    "title": "Data Sources",
    "section": "Web APIs",
    "text": "Web APIs\nYou can use the d3.json() function to read JSON data from web services and data sources. Here we query the GitHub API for data on contributions to the Python pandas package:\n\n```{ojs}\nd3 = require('d3')\n\ncontributors = await d3.json(\n  \"https://api.github.com/repos/pandas-dev/pandas/stats/contributors\"\n)\n\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nView the data sorted by number of commits:\n\n```{ojs}\nInputs.table(commits, { sort: \"value\", reverse: true })\n```\n\n\n\n\n\n\nSee the GitHub API example for the full source code."
  },
  {
    "objectID": "docs/interactive/ojs/libraries.html",
    "href": "docs/interactive/ojs/libraries.html",
    "title": "Libraries",
    "section": "",
    "text": "There are three types of library you’ll generally use with OJS:\n\nObservable core libraries automatically available in every document.\nThird-party JavaScript libraries from npm and ObservableHQ.\nCustom libraries you and/or your colleagues have created\n\nIn this document we’ll provide a high-level overview of the core libraries and some examples of using third-party libraries (D3 and Arquero). Creating your own libraries is covered in the article on Code Reuse."
  },
  {
    "objectID": "docs/interactive/ojs/libraries.html#stdlib",
    "href": "docs/interactive/ojs/libraries.html#stdlib",
    "title": "Libraries",
    "section": "Stdlib",
    "text": "Stdlib\nThe Observable standard library provides the core capabilities that underlie rendering content and loading code and data. Some particularly important components of the standard library include:\n\n\n\nComponent\nDescription\n\n\n\n\nDOM\nDynamically creating DOM elements\n\n\nFileAttachments\nReading files in a variety of formats\n\n\nrequire\nImporting third-party modules from NPM and GitHub\n\n\n\nYou can find complete documentation for the standard library at https://github.com/observablehq/stdlib."
  },
  {
    "objectID": "docs/interactive/ojs/libraries.html#inputs",
    "href": "docs/interactive/ojs/libraries.html#inputs",
    "title": "Libraries",
    "section": "Inputs",
    "text": "Inputs\nThe Observable inputs library provides widgets that can be bound to reactive expressions via the viewof keyword. Some particularly useful input include:\n\n\n\nComponent\nDescription\n\n\n\n\nRadio\nChoose from mutually exclusive set of options\n\n\nCheckbox\nChoose one or more options from a list\n\n\nRange\nSlider for continuous numeric values\n\n\nSelect\nDrop down select box\n\n\nTable\nSelect one or more rows from a table\n\n\n\nYou can find complete documentation for all of the inputs at https://github.com/observablehq/inputs."
  },
  {
    "objectID": "docs/interactive/ojs/libraries.html#plot",
    "href": "docs/interactive/ojs/libraries.html#plot",
    "title": "Libraries",
    "section": "Plot",
    "text": "Plot\nObservable Plot is a JavaScript library for exploratory data visualization. Plot is built upon a set of core concepts (Marks, Scales, Transforms, and Facets) that can be composed together to create custom visualizations.\nHere’s an example of a scatterplot of the height and weight of Olympic athletes created with Plot:\n\n```{ojs}\nathletes = FileAttachment(\"athletes.csv\").csv({typed: true})\n\nPlot.plot({\n  grid: true,\n  facet: {\n    data: athletes,\n    y: \"sex\"\n  },\n  marks: [\n    Plot.rectY(\n      athletes, \n      Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\"})\n    ),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can find complete documentation for Observable plot https://github.com/observablehq/plot."
  },
  {
    "objectID": "docs/interactive/ojs/libraries.html#d3",
    "href": "docs/interactive/ojs/libraries.html#d3",
    "title": "Libraries",
    "section": "D3",
    "text": "D3\nD3.js is a JavaScript library for manipulating documents based on data. D3 is capable of creating just about any interactive graphic you can imagine!\nHere’s a zoomable sunburst diagram (originally published here) created with D3. Only two layers of the hierarchy are shown at a time. Click a node to zoom in, or the center to zoom out.\n\nsunburst = {\n  const root = partition(flareData);\n\n  root.each(d => d.current = d);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, width])\n      .style(\"font\", \"15px sans-serif\");\n\n  const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${width / 2},${width / 2})`);\n\n  const path = g.append(\"g\")\n    .selectAll(\"path\")\n    .data(root.descendants().slice(1))\n    .join(\"path\")\n      .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\n      .attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\n      .attr(\"d\", d => arc(d.current));\n\n  path.filter(d => d.children)\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", clicked);\n\n  path.append(\"title\")\n      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\n\n  const label = g.append(\"g\")\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"user-select\", \"none\")\n    .selectAll(\"text\")\n    .data(root.descendants().slice(1))\n    .join(\"text\")\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"fill-opacity\", d => +labelVisible(d.current))\n      .attr(\"transform\", d => labelTransform(d.current))\n      .text(d => d.data.name);\n\n  const parent = g.append(\"circle\")\n      .datum(root)\n      .attr(\"r\", radius)\n      .attr(\"fill\", \"none\")\n      .attr(\"pointer-events\", \"all\")\n      .on(\"click\", clicked);\n\n  function clicked(event, p) {\n    parent.datum(p.parent || root);\n\n    root.each(d => d.target = {\n      x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      y0: Math.max(0, d.y0 - p.depth),\n      y1: Math.max(0, d.y1 - p.depth)\n    });\n\n    const t = g.transition().duration(750);\n\n    // Transition the data on all arcs, even the ones that aren’t visible,\n    // so that if this transition is interrupted, entering arcs will start\n    // the next transition from the desired position.\n    path.transition(t)\n        .tween(\"data\", d => {\n          const i = d3.interpolate(d.current, d.target);\n          return t => d.current = i(t);\n        })\n      .filter(function(d) {\n        return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n      })\n        .attr(\"fill-opacity\", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)\n        .attrTween(\"d\", d => () => arc(d.current));\n\n    label.filter(function(d) {\n        return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n      }).transition(t)\n        .attr(\"fill-opacity\", d => +labelVisible(d.target))\n        .attrTween(\"transform\", d => () => labelTransform(d.current));\n  }\n  \n  function arcVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\n  }\n\n  function labelVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n  }\n\n  function labelTransform(d) {\n    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\n    const y = (d.y0 + d.y1) / 2 * radius;\n    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\n  }\n\n  return svg.node();\n}\n\n\n\n\n\n\nTo use D3 in an {ojs} cell, first import it using the require function (which loads modules hosted at jsDelivr):\n```{ojs}\nd3 = require(\"d3@7\")\n```\nThen, use d3 as needed to create your visualization. For example, here are the first few lines of the cell that creates the visualization above:\n```{ojs}\nsunburst = {\n  const root = partition(flareData);\n  root.each(d => d.current = d);\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, width])\n      .style(\"font\", \"15px sans-serif\");\n\n  // ...remainder of implementation\n  \n  return svg.node();\n}\n```\nSee the Sunburst example for the complete source code. To learn more about D3, visit https://d3js.org/."
  },
  {
    "objectID": "docs/interactive/ojs/libraries.html#arquero",
    "href": "docs/interactive/ojs/libraries.html#arquero",
    "title": "Libraries",
    "section": "Arquero",
    "text": "Arquero\nArquero is a JavaScript library for query processing and transformation of array-backed data tables. Following the relational algebra and inspired by the design of dplyr, Arquero provides a fluent API for manipulating column-oriented data frames.\nHere we’ll import Arquero (aq) and an alias to Arquero operations (op), read a dataset, then filter, aggregate, and view the data:\n\n```{ojs}\nimport { aq, op } from '@uwdata/arquero'\npenguins = aq.loadCSV(\"palmer-penguins.csv\")\npenguins\n  .groupby('species')\n  .filter(p => p.body_mass > 0)\n  .rollup({\n    count: op.count(),\n    avg_mass: op.average('body_mass')\n   })\n  .view()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee the Arquero example for complete source code. To learn more about using Arquero, see the Introducing Arquero tutorial."
  },
  {
    "objectID": "docs/interactive/ojs/libraries.html#modules",
    "href": "docs/interactive/ojs/libraries.html#modules",
    "title": "Libraries",
    "section": "Modules",
    "text": "Modules\n\nNPM\nThe require function in the standard library can be used to import npm modules (which are served from the jsDelivr CDN):\n```{ojs}\nd3 = require(\"d3\")\ntopojson = require(\"topojson\")\n```\nModules can optionally include an @ sign with a version. For example:\n```{ojs}\nd3 = require(\"d3@7\")\n```\nSee the jsDelivr documentation for additional details. Note that the require function automatically prepends the prefix https://cdn.jsdelivr.net/npm/ when resolving imports, so where the jsDeliver documentation says to use this URL:\nhttps://cdn.jsdelivr.net/npm/package@version/file\nYou need only pass this to require:\npackage@version/file\n\n\nObservableHQ\nNotebooks published on http://observablehq.com can also be compiled and downloaded as JavaScript modules.\nWhile notebooks often have their own embedded dataset, you can actually replace this data with your own when you import them! Returning to the sunburst example from above, here we import a notebook and use the with keyword to provide our own value for data:\n\n```{ojs}\npdata = FileAttachment(\"population.json\").json()\nimport { chart } with { pdata as data } from \"@d3/zoomable-sunburst\"\nchart\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne important restriction to be aware of is that not all notebooks published on ObservableHQ have an open-source license. Notebooks need to explicitly tagged with a license as an indication that it’s okay to use them outside of ObservableHQ.\nYou can see the license for a notebook in its header area. For, example this notebook is tagged with the ISC license:\n\nYou should check the license of ObservableHQ notebooks before you import them. See the documentation on notebook licenses for additional details on how to do this."
  },
  {
    "objectID": "docs/interactive/ojs/libraries.html#appendix",
    "href": "docs/interactive/ojs/libraries.html#appendix",
    "title": "Libraries",
    "section": "Appendix",
    "text": "Appendix\n\n```{ojs}\nflareData = FileAttachment(\"examples/flare-2.json\").json()\n```\n\n\n\n\n\n\n\n```{ojs}\npartition = flareData => {\n  const root = d3.hierarchy(flareData)\n      .sum(d => d.value)\n      .sort((a, b) => b.value - a.value);\n  return d3.partition()\n      .size([2 * Math.PI, root.height + 1])\n    (root);\n}\n```\n\n\n\n\n\n\n\n```{ojs}\ncolor = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, flareData.children.length + 1))\n```\n\n\n\n\n\n\n\n```{ojs}\nformat = d3.format(\",d\")\n```\n\n\n\n\n\n\n\n```{ojs}\nwidth = 932\n```\n\n\n\n\n\n\n\n```{ojs}\nradius = width / 6\n```\n\n\n\n\n\n\n\n```{ojs}\narc = d3.arc()\n    .startAngle(d => d.x0)\n    .endAngle(d => d.x1)\n    .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n    .padRadius(radius * 1.5)\n    .innerRadius(d => d.y0 * radius)\n    .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))\n```\n\n\n\n\n\n\n\n```{ojs}\nd3 = require(\"d3@7\")\n```"
  },
  {
    "objectID": "docs/interactive/ojs/shiny.html",
    "href": "docs/interactive/ojs/shiny.html",
    "title": "Shiny Reactives",
    "section": "",
    "text": "Earlier we described how to use the ojs_define() function to make data from Python and R available in OJS cells. In this scenario, data pre-processing is done once during render time then all subsequent interactions are handled on the client.\nBut what if you want to do data transformation dynamically in response to user inputs? This is also possible with ojs_define(), as it can be passed not just static values but also Shiny reactives (assuming it’s running inside a Shiny interactive document)."
  },
  {
    "objectID": "docs/interactive/ojs/shiny.html#hello-shiny",
    "href": "docs/interactive/ojs/shiny.html#hello-shiny",
    "title": "Shiny Reactives",
    "section": "Hello, Shiny",
    "text": "Hello, Shiny\nHere is the K-Means Clustering example from the Shiny Gallery implemented with an OJS client and Shiny Server:\n\n\n\n\n\nYou can see the document deployed at https://jjallaire.shinyapps.io/kmeans-shiny-ojs/.\n\nSource Code\nLet’s take a look at the source code. On the client we have familiar looking OJS inputs and a plot laid out using panel: sidebar and panel: fill:\n```{ojs}\n//| panel: sidebar\nvars = [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]\nviewof xcol = Inputs.select(vars, {label: \"X Variable\"})\nviewof ycol = Inputs.select(vars, {label: \"Y Variable\", value: vars[1]})\nviewof count = Inputs.range([1, 9], {label: \"Cluster Count\", step: 1, value: 3})\n```\n\n```{ojs}\n//| panel: fill\nPlot.plot({\n  color: {\n    type: \"ordinal\",\n    scheme: \"category10\"\n  },\n  marks: [\n    Plot.dot(transpose(selectedData), {\n      x: xcol,\n      y: ycol,\n      fill: (d, i) => clusters.cluster[i],\n    }),\n    Plot.dot(clusters.centers, { \n      x: d => d[0],\n      y: d => d[1],\n      r: 10,\n      stroke: \"black\",\n      fill: (d, i) => i + 1\n    }),\n  ]\n})\n```\nNote that the plotting code references the variables selectedData and clusters. These will be provided by reactive expressions within the Shiny server code. Note also that we use the transpose() function to reshape the data into the row-oriented format that the Plot library expects.\nHere is the server code:\n```{r}\n#| context: server\n\nselectedData <- reactive({\n  iris[, c(input$xcol, input$ycol)]\n})\n\nclusters <- reactive({\n  kmeans(selectedData(), input$count)\n})\n\nojs_define(selectedData, clusters)\n```\nWe designate this code as running on the server via the context: server option.\nNote that we reference several inputs that were defined by viewof expressions on the client (e.g. input$xcol). When these inputs change they will cause the appropriate server side reactives to re-execute.\nWe create two reactive values (selectedData and clusters) and provide them to the client using ojs_define(). The plot will be automatically re-drawn on the client side when these values change."
  },
  {
    "objectID": "docs/interactive/ojs/shiny.html#examples",
    "href": "docs/interactive/ojs/shiny.html#examples",
    "title": "Shiny Reactives",
    "section": "Examples",
    "text": "Examples\nHere are some examples that demonstrate various ways to use OJS with Shiny:\n\n\n\nExample\nSource\nDescription\n\n\n\n\nK-Means\nCode\nSimple example of binding OJS inputs to Shiny inputs and shiny reactives to OJS plots.\n\n\nBinning\nCode\nDemonstrates fast binning of a medium sized dataset (32mb) on the server.\n\n\nData Binding\nCode\nDemonstrates importing a notebook from https://observablehq.com and binding it’s data field to a Shiny reactive."
  },
  {
    "objectID": "docs/interactive/ojs/shiny.html#bindings",
    "href": "docs/interactive/ojs/shiny.html#bindings",
    "title": "Shiny Reactives",
    "section": "Bindings",
    "text": "Bindings\n\nOJS to Shiny\nIn the example above we took advantage of the fact that by default OJS viewof expressions are automatically propagated to Shiny inputs (e.g input$xcol). This provides a reasonable separation of concerns, and prevents excess network traffic in the case that you have large OJS variables.\nHowever, if you want to use other OJS variables as Shiny inputs this is also possible using the ojs-export option. The default behavior maps to the following configuration:\n---\nserver:\n  type: shiny\n  ojs-export: viewof\n---\nYou can also specify ojs-export: all to cause all OJS reactives to be bound to Shiny inputs:\n---\nserver:\n  type: shiny\n  ojs-export: all\n---\nAlternatively, you can specify a list of OJS reactives by name (including using ~ to filter out reactives), and optionally combine this with the viewof and/or all options. For example:\n---\nserver:\n  type: shiny\n  ojs-export: [all, ~large_dataset]\n---\n\n\nShiny to OJS\nLess common but occasionally useful is the ability to bind Shiny inputs into OJS. By default no such bindings occur, however you can use the ojs-import option to opt-in for specific Shiny inputs. For example:\n---\nserver: \n  type: shiny\n  ojs-import: [minimum, maximum]\n---"
  },
  {
    "objectID": "docs/interactive/ojs/index.html",
    "href": "docs/interactive/ojs/index.html",
    "title": "Observable JS",
    "section": "",
    "text": "Quarto includes native support for Observable JS, a set of enhancements to vanilla JavaScript created by Mike Bostock (also the author of D3). Observable JS is distinguished by its reactive runtime, which is especially well suited for interactive data exploration and analysis.\nThe creators of Observable JS (Observable, Inc.) run a hosted service at https://observablehq.com/ where you can create and publish notebooks. Additionally, you can use Observable JS (“OJS”) in standalone documents and websites via its core libraries. Quarto uses these libraries along with a compiler that is run at render time to enable the use of OJS within Quarto documents.\nOJS works in any Quarto document (plain markdown as well as Jupyter and Knitr documents). Just include your code in an {ojs} executable code block. The rest of this article explains the basics of using OJS with Quarto."
  },
  {
    "objectID": "docs/interactive/ojs/index.html#example",
    "href": "docs/interactive/ojs/index.html#example",
    "title": "Observable JS",
    "section": "Example",
    "text": "Example\nWe’ll start with a simple example based on Allison Horst’s Palmer Penguins dataset. Here we look at how penguin body mass varies across both sex and species (use the provided inputs to filter the dataset by bill length and island):\n\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\nLet’s take a look at the source code for this example. First we create an {ojs} cell that reads in some data from a CSV file using a FileAttachment:\n```{ojs}\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\nThe example above doesn’t plot all of the data but rather a filtered subset. To create our filter we’ll need some inputs, and we’ll want to be able to use the values of these inputs in our filtering function. To do this, we use the viewof keyword and with some standard Inputs:\n```{ojs}\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\nNow we write the filtering function that will transform the data read from the CSV using the values of bill_length_min and island.\n```{ojs}\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```\nHere we see reactivity in action: we don’t need any special syntax to refer to the dynamic input values, they “just work”, and the filtering code is automatically re-run when the inputs change. This works in much the same way a spreadsheet works when you update a cell and other cells that refer to it are recalculated.\nFinally, we’ll plot the filtered data using Observable Plot (an open-source JavaScript library for quick visualization of tabular data):\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\nNote that as with our inputs, we refer to the filtered variable with no special syntax—the plotting code will be automatically re-run whenever filtered changes (which in turn is updated whenever an input changes).\nThat covers a basic end-to-end use of OJS (see the Penguins examples for the full source code).\n\n\n\n\n\n\nIf you take a look at the Penguins code, you’ll notice something curious: the inputs and plotting code are defined before the data processing code. This demonstrates a critical difference between OJS cell execution and traditional notebooks: cells do not need to be defined in any particular order.\nBecause execution is fully reactive, the runtime will automatically execute cells in the correct order based on how they reference each other. This is more akin to a spreadsheet than a traditional notebook with linear cell execution."
  },
  {
    "objectID": "docs/interactive/ojs/index.html#libraries",
    "href": "docs/interactive/ojs/index.html#libraries",
    "title": "Observable JS",
    "section": "Libraries",
    "text": "Libraries\nOur example above made use of several standard libraries, including:\n\nObservable stdlib — Core primitives for DOM manipulation, file handling, importing code, and much more.\nObservable Inputs — Standard inputs controls including sliders, drop-downs, tables, check-boxes, etc.\nObservable Plot — High level plotting library for exploratory data visualization.\n\nThe libraries are somewhat special because they are automatically available within notebooks on https://observablehq.com as well as within {ojs} cells in Quarto documents.\nUsing other JavaScript libraries is also straightforward, they just need to be explicitly imported. For example, here we import a some libraries using the require function (which in turn loads NPM modules from jsDelivr):\n```{ojs}\nd3 = require(\"d3@7\")\ntopojson = require(\"topojson\")\n```\nSee the article on Libraries to learn more about using standard and third-party libraries."
  },
  {
    "objectID": "docs/interactive/ojs/index.html#data-sources",
    "href": "docs/interactive/ojs/index.html#data-sources",
    "title": "Observable JS",
    "section": "Data Sources",
    "text": "Data Sources\nIn our initial example we used a FileAttachment as our data source. File attachments support many formats including CSV, TSV, JSON, SQLite, and Arrow so are a convenient way to read a dataset that has already been prepared for analysis.\nFrequently though you’ll need to do some pre-processing of your data in Python or R before it’s ready for visualization. Within Quarto, you can do this pre-processing during document render then make the results available to OJS.\nUse the ojs_define() function from Python or R to define variables that you want to use within JavaScript. For example, to reproduce the simple CSV read in Python you might do this:\n\n```{python}\nimport pandas as pd\npenguins = pd.read_csv(\"palmer-penguins.csv\")\nojs_define(data = penguins)\n```\n\n\n\n\nThe call to ojs_define(data = penguins) says that we want to make a variable named data (with the value of the penguins data frame) available to OJS\nDepending on the visualization library you use, one additional step may be required to consume the data from JavaScript. In this case, the Plot function expects data by row rather than by column, so we transpose() it before filtering:\n```{ojs}\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```\nSee the article on Data Sources to learn more about the various ways to prepare and read data."
  },
  {
    "objectID": "docs/interactive/ojs/index.html#ojs-cells",
    "href": "docs/interactive/ojs/index.html#ojs-cells",
    "title": "Observable JS",
    "section": "OJS Cells",
    "text": "OJS Cells\nThere are many options available to customize the behavior of {ojs} code cells, including showing, hiding, and collapsing code as well as controlling the visibility and layout of outputs.\nThe most important cell option to be aware of is the echo option, which controls whether source code is displayed. You’ll have different preferences depending on whether you are embedding visualizations in an article or creating a notebook or full-on tutorial.\nCode in {ojs} cells is displayed by default. To prevent display of code for an entire document, set the echo: false option in YAML metadata:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\n---\nYou can also specify this option on a per-cell basis. For example:\n```{ojs}\n//| echo: false\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\nTo learn about all of the options available, see the article on OJS Cells."
  },
  {
    "objectID": "docs/interactive/ojs/index.html#learning-more",
    "href": "docs/interactive/ojs/index.html#learning-more",
    "title": "Observable JS",
    "section": "Learning More",
    "text": "Learning More\nThese articles go into more depth on using OJS in Quarto documents:\n\nLibraries covers using standard libraries and external JavaScript libraries.\nData Sources outlines the various ways to read and pre-process data.\nOJS Cells goes into more depth on cell execution, output, and layout.\nShiny Reactives describes how to integrate Shiny with OJS.\nCode Reuse delves into ways to re-use OJS code across multiple documents.\n\nIf you want to learn more about the underlying mechanics of reactivity, check out these notebooks from Mike Bostock:\n\nFive Minute Introduction\nObservable’s not JavaScript\nIntroduction to Views\nHow Observable Runs"
  },
  {
    "objectID": "docs/interactive/ojs/examples/population.html",
    "href": "docs/interactive/ojs/examples/population.html",
    "title": "Population",
    "section": "",
    "text": "First we read from a local JSON file into population:\n\npopulation = FileAttachment(\"population.json\").json()\n\n\n\n\n\n\nThen we import from https://observablehq.com/@d3/zoomable-sunburst and specify that we’d like to use population instead of the data built in to the notebook:\n\nimport { chart } with { population as data } from \"@d3/zoomable-sunburst\"\n\n\n\n\n\n\nFinally, we display the chart:\n\nchart"
  },
  {
    "objectID": "docs/interactive/ojs/examples/github.html",
    "href": "docs/interactive/ojs/examples/github.html",
    "title": "GitHub API",
    "section": "",
    "text": "Demonstration of using the GitHub API."
  },
  {
    "objectID": "docs/interactive/ojs/examples/github.html#data",
    "href": "docs/interactive/ojs/examples/github.html#data",
    "title": "GitHub API",
    "section": "Data",
    "text": "Data\n\nd3 = require('d3')\ncontributors = await d3.json(\n  \"https://api.github.com/repos/\" + repo + \"/stats/contributors\"\n)\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(commits, { sort: \"value\", reverse: true })"
  },
  {
    "objectID": "docs/interactive/ojs/examples/sunburst.html",
    "href": "docs/interactive/ojs/examples/sunburst.html",
    "title": "Sunburst",
    "section": "",
    "text": "Code\nsunburst = {\n  const root = partition(flareData);\n\n  root.each(d => d.current = d);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, width])\n      .style(\"font\", \"15px sans-serif\");\n\n  const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${width / 2},${width / 2})`);\n\n  const path = g.append(\"g\")\n    .selectAll(\"path\")\n    .data(root.descendants().slice(1))\n    .join(\"path\")\n      .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\n      .attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\n      .attr(\"d\", d => arc(d.current));\n\n  path.filter(d => d.children)\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", clicked);\n\n  path.append(\"title\")\n      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\n\n  const label = g.append(\"g\")\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"user-select\", \"none\")\n    .selectAll(\"text\")\n    .data(root.descendants().slice(1))\n    .join(\"text\")\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"fill-opacity\", d => +labelVisible(d.current))\n      .attr(\"transform\", d => labelTransform(d.current))\n      .text(d => d.data.name);\n\n  const parent = g.append(\"circle\")\n      .datum(root)\n      .attr(\"r\", radius)\n      .attr(\"fill\", \"none\")\n      .attr(\"pointer-events\", \"all\")\n      .on(\"click\", clicked);\n\n  function clicked(event, p) {\n    parent.datum(p.parent || root);\n\n    root.each(d => d.target = {\n      x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      y0: Math.max(0, d.y0 - p.depth),\n      y1: Math.max(0, d.y1 - p.depth)\n    });\n\n    const t = g.transition().duration(750);\n\n    // Transition the data on all arcs, even the ones that aren’t visible,\n    // so that if this transition is interrupted, entering arcs will start\n    // the next transition from the desired position.\n    path.transition(t)\n        .tween(\"data\", d => {\n          const i = d3.interpolate(d.current, d.target);\n          return t => d.current = i(t);\n        })\n      .filter(function(d) {\n        return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n      })\n        .attr(\"fill-opacity\", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)\n        .attrTween(\"d\", d => () => arc(d.current));\n\n    label.filter(function(d) {\n        return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n      }).transition(t)\n        .attr(\"fill-opacity\", d => +labelVisible(d.target))\n        .attrTween(\"transform\", d => () => labelTransform(d.current));\n  }\n  \n  function arcVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\n  }\n\n  function labelVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n  }\n\n  function labelTransform(d) {\n    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\n    const y = (d.y0 + d.y1) / 2 * radius;\n    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\n  }\n\n  return svg.node();\n}\n\n\n\n\n\n\n\n\nflareData = FileAttachment(\"flare-2.json\").json()\n\npartition = flareData => {\n  const root = d3.hierarchy(flareData)\n      .sum(d => d.value)\n      .sort((a, b) => b.value - a.value);\n  return d3.partition()\n      .size([2 * Math.PI, root.height + 1])\n    (root);\n}\n\ncolor = d3.scaleOrdinal(\n  d3.quantize(d3.interpolateRainbow, flareData.children.length + 1)\n)\n\nformat = d3.format(\",d\")\n\nwidth = 932\n\nradius = width / 6\n\narc = d3.arc()\n    .startAngle(d => d.x0)\n    .endAngle(d => d.x1)\n    .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n    .padRadius(radius * 1.5)\n    .innerRadius(d => d.y0 * radius)\n    .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReuseISC License"
  },
  {
    "objectID": "docs/interactive/ojs/examples/penguins.html",
    "href": "docs/interactive/ojs/examples/penguins.html",
    "title": "Penguins",
    "section": "",
    "text": "viewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n\n\n\n\n\n\n\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})"
  },
  {
    "objectID": "docs/interactive/ojs/examples/arquero.html",
    "href": "docs/interactive/ojs/examples/arquero.html",
    "title": "Arquero",
    "section": "",
    "text": "import { aq, op } from '@uwdata/arquero'\npenguins = aq.loadCSV(\"palmer-penguins.csv\")\n\npenguins.view()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins\n  .groupby('species')\n  .filter(p => p.body_mass > 0)\n  .rollup({\n    count: op.count(),\n    avg_mass: op.average('body_mass')\n   })\n  .view()"
  },
  {
    "objectID": "docs/interactive/ojs/examples/noaa-co2.html",
    "href": "docs/interactive/ojs/examples/noaa-co2.html",
    "title": "NOAA CO2",
    "section": "",
    "text": "data = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true });\n  return co2data.map(d => { \n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average); \n    return d; \n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data, \n      { x: \"decimal date\", y: \"average\"}, \n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead the same data into R, do some grouping and summarization, then make it available using ojs_define:\n\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %>% \n  group_by(year) %>% \n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n\nNow plot the summarized data:\n\nPlot.plot({\n  marks: [\n    Plot.line(transpose(co2data), \n      {x: \"year\", y: \"max\"}, \n      { stroke: \"black\" }\n    )\n  ]}\n)"
  },
  {
    "objectID": "docs/interactive/ojs/examples/layout.html",
    "href": "docs/interactive/ojs/examples/layout.html",
    "title": "Layout",
    "section": "",
    "text": "---\ntitle: \"Layout\"\nformat: \n  html: \n    page-layout: full\n---\nEnclose the inputs in a sidebar panel and the outputs in a tabset panel (click the “Code” button at top right to see the full source code):\n\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\nRead and filter the data based on the user’s inputs:\n\ndata = FileAttachment(\"palmer-penguins.csv\").csv({typed: true})\n\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})"
  },
  {
    "objectID": "docs/interactive/ojs/code-reuse.html",
    "href": "docs/interactive/ojs/code-reuse.html",
    "title": "Code Reuse",
    "section": "",
    "text": "As you build larger Quarto projects (like websites and books) that incorporate OJS, you’ll likely want to re-use code, data, and output across different pages."
  },
  {
    "objectID": "docs/interactive/ojs/code-reuse.html#modules",
    "href": "docs/interactive/ojs/code-reuse.html#modules",
    "title": "Code Reuse",
    "section": "Modules",
    "text": "Modules\nJavaScript modules are directly supported in Quarto’s OJS blocks. For example, if we have the following source file square.js:\nexport function square(x) {\n  return x * x;\n}\nThen you can import and use the square() function as follows:\n\nimport { square } from \"./square.js\"\nsquare(5)"
  },
  {
    "objectID": "docs/interactive/ojs/code-reuse.html#data",
    "href": "docs/interactive/ojs/code-reuse.html#data",
    "title": "Code Reuse",
    "section": "Data",
    "text": "Data\nYou may be using Python or R to pre-process data that is then provided to OJS via the ojs_define() function (this is described in more depth in the Data Sources article). If you want to share data prepared in this fashion you can import it directly from another .qmd.\nFor example, here we import the co2data that we read and pre-processed with dplyr in data-sources.qmd:\n\nimport { co2data } from \"./data-sources.qmd\";\nInputs.table(transpose(co2data))"
  },
  {
    "objectID": "docs/interactive/ojs/code-reuse.html#output",
    "href": "docs/interactive/ojs/code-reuse.html#output",
    "title": "Code Reuse",
    "section": "Output",
    "text": "Output\nYou can import any reactive value from another .qmd file. Here, we’re reusing a chart directly from data-sources.qmd:\n\nimport { yearlyChart } from \"./data-sources.qmd\";\nyearlyChart"
  },
  {
    "objectID": "docs/interactive/index.html",
    "href": "docs/interactive/index.html",
    "title": "Interactivity",
    "section": "",
    "text": "Adding interactivity to an article is a great way to help readers explore the concepts and data you are presenting more deeply. There are three ways to add interactive components to Quarto documents:\n\nCreate custom JavaScript visualizations using Observable JS.\nUse the Shiny R package to add interactivity to Knitr engine documents.\nIncorporate Jupyter Widgets or htmlwidgets (for the Jupyter and Knitr engines, respectively) into your document.\n\nEach of these techniques has distinct benefits and drawbacks in terms of expressiveness, ease of development, and deployment requirements. We’ll touch on these considerations briefly below, then provide links to more in depth documentation for learning more."
  },
  {
    "objectID": "docs/interactive/index.html#observable-js",
    "href": "docs/interactive/index.html#observable-js",
    "title": "Interactivity",
    "section": "Observable JS",
    "text": "Observable JS\nQuarto includes native support for Observable JS, a set of enhancements to vanilla JavaScript created by Mike Bostock (also the author of D3). Observable JS is distinguished by its reactive runtime, which is especially well suited for interactive data exploration and analysis.\nHere’s an example that provides slider inputs to condition the behavior of a visualization:\n\n\nviewof talentWeight = Inputs.range([-2, 2], { value: 0.7, step: 0.01, label: \"talent weight\" })\nviewof looksWeight = Inputs.range([-2, 2], { value: 0.7, step: 0.01, label: \"looks weight\" })\nviewof minimum = Inputs.range([-2, 2], { value: 1, step: 0.01, label: \"minimum fame\" })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n  const w = 400\n  const h = 400;\n  const result = d3.create(\"svg\").attr(\"width\", w).attr(\"height\", h);\n  const margin = 20;\n  const xScale = d3.scaleLinear().domain([-2, 2]).range([margin, w - margin]);\n  const yScale = d3.scaleLinear().domain([-2, 2]).range([h - margin, margin]);\n  const points = result\n    .append(\"g\")\n    .selectAll(\"circle\")\n    .data(actors)\n    .join(enter => {\n       const sel = enter\n         .append(\"circle\")\n         .attr(\"r\", 3)\n         .attr(\"cx\", d => xScale(d.talent))\n         .attr(\"cy\", d => yScale(d.looks))\n         .attr(\"fill\", d3.lab(50, 40, 20));\n       return sel.filter(d => d.fame <= minimum)\n         .attr(\"fill\", \"rgb(200, 200, 200)\")\n         .attr(\"r\", 2);\n    });\n    \n  const linearRegression = regression.regressionLinear()\n    .x(d => d.talent)\n    .y(d => d.looks)\n    .domain([-2, 2]);\n\n  const chosenActors = actors\n    .filter(d => d.fame > minimum);\n\n  const line = result\n    .append(\"g\")\n    .append(\"line\")\n    .attr(\"stroke\", d3.lab(20, 40, 20))\n    .attr(\"stroke-width\", 1.5)\n    .datum(linearRegression(chosenActors))\n    .attr(\"x1\", d => xScale(d[0][0]))\n    .attr(\"x2\", d => xScale(d[1][0]))\n    .attr(\"y1\", d => yScale(d[0][1]))\n    .attr(\"y2\", d => yScale(d[1][1]));\n\n\n  const xAxis = d3.axisBottom(xScale).ticks(3);\n  result.append(\"g\")\n    .attr(\"transform\", `translate(0, ${yScale(0)})`)\n    .call(xAxis);\n\n  result.append(\"text\")\n    .attr(\"x\", xScale(0.05))\n    .attr(\"y\", yScale(2))\n    .text(\"Looks\");\n\n  result.append(\"text\")\n    .attr(\"y\", yScale(0.1))\n    .attr(\"x\", xScale(-2))\n    .text(\"Talent\");\n\n  const yAxis = d3.axisLeft(yScale).ticks(3);\n  result.append(\"g\")\n    .attr(\"transform\", `translate(${xScale(0)}, 0)`)\n    .call(yAxis);\n  \n  return result.node();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nactors = transpose(points).map(v => ({\n  talent: v.x,\n  looks: v.y,\n  fame: v.x * talentWeight + v.y * looksWeight\n}));\n\n\n\n\n\n\n\ntranspose = function(df)\n{\n  const keys = Object.keys(df);\n  return df[keys[0]]\n    .map((v, i) => Object.fromEntries(keys.map(key => [key, df[key][i] || undefined])))\n    .filter(v => Object.values(v).every(e => e !== undefined));\n}\nregression = require('d3-regression@1');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservable JS uses some special keywords and a custom runtime to make JavaScript reactive. For example, the “minimum fame” slider in the example above was created with the following code:\nviewof minimum = Inputs.range([-2, 2], { \n  value: 1, step: 0.01, \n  label: \"minimum fame\"\n})\nIt’s then referenced as a normal JavaScript variable in code that creates the plot:\nsel.filter(d => d.fame <= minimum)\nAs the user interacts with the slider, the minimum value is updated and any code that references it is automatically re-executed.\nOne benefit of using JavaScript for interactive documents is that all the logic and computation is performed on the client (so no server is required for deployment).\nTo learn more see the articles on Observable JS."
  },
  {
    "objectID": "docs/interactive/index.html#shiny",
    "href": "docs/interactive/index.html#shiny",
    "title": "Interactivity",
    "section": "Shiny",
    "text": "Shiny\nThe Shiny package provides a flexible, easy to use framework for creating interactive web applications with R. Quarto in turn includes support for embedding Shiny components and applets into documents created with the Knitr engine.\nHere’s a live example of Shiny interactive components along with a brief explanation of the code required to create them:\n\n\n\n \n\n\n\nShiny comes with a variety of built in input widgets. With minimal syntax it is possible to include widgets like the ones shown on the left in your apps:\n# Select type of trend to plot\nselectInput(inputId = \"type\", \n            label = strong(\"Trend index\"),\n            choices = unique(trend_data$type),\n            selected = \"Travel\")\nDisplaying outputs is equally hassle-free:\nmainPanel(\n  plotOutput(outputId = \"lineplot\", \n             height = \"300px\"),\n)\nBuild your plots or tables as you normally would in R, and make them reactive with a call to the appropriate render function:\noutput$lineplot <- renderPlot({\n  plot(x = selected_trends()$date, \n       y = selected_trends()$close, \n       type = \"l\",\n       xlab = \"Date\", \n       ylab = \"Trend index\")\n})\n\n\n\nShiny makes it very straightforward to create interactive documents using only R. Unlike using JavaScript though, you will need to deploy documents that use Shiny to a server.\nTo learn more see the articles on Using Shiny with Quarto."
  },
  {
    "objectID": "docs/interactive/index.html#widgets",
    "href": "docs/interactive/index.html#widgets",
    "title": "Interactivity",
    "section": "Widgets",
    "text": "Widgets\nJupyter Widgets and htmlwidgets are great ways to incorporate interactivity into your documents if you don’t know JavaScript and prefer to work exclusively in Python or R. They also run entirely client-side so can be deployed within normal static HTML documents.\nFor example, the following Python code is all that is required to embed a Leaflet map into a Jupyter engine document:\n\n```{python}\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"\n  ),\n  center=(52.204793, 360.121558),\n  zoom=4\n)\nm.add_layer(Marker(location=(52.204793, 360.121558)))\nm\n```\n\n\n\n\nTo learn more see these articles on using widgets with Quarto:\n\nJupyter Widgets (Jupyter engine).\nhtmlwidgets (Knitr engine)."
  },
  {
    "objectID": "docs/interactive/index.html#layout",
    "href": "docs/interactive/index.html#layout",
    "title": "Interactivity",
    "section": "Layout",
    "text": "Layout\nOnce you’ve gotten familiar with using various interactive components see the article on Component Layout to learn how to:\n\nGroup inputs into an input panel.\nPresent multiple outputs in a tabset panel.\nUse a full page layout rather than the default article layout.\nAdd a sidebar panel for inputs in a full page layout.\nCreate custom panel layouts to arrange outputs into rows and columns."
  },
  {
    "objectID": "docs/interactive/layout.html",
    "href": "docs/interactive/layout.html",
    "title": "Component Layout",
    "section": "",
    "text": "When you introduce interactive components into a document you’ll want to be sure to lay them out in a fashion that optimizes for readability and navigation.\nThere are of course a wide variety of ways you can incorporate interactivity spanning from visualizations embedded within a longer-form article all the way up to a more application/dashboard style layout. We’ll cover both of these layout scenarios below.\nWe’ll use examples from both Observable JS and Shiny interactive documents—if you aren’t familiar with the code/syntax used for a given example just focus on the enclosing layout markup rather than the application code."
  },
  {
    "objectID": "docs/interactive/layout.html#input-panel",
    "href": "docs/interactive/layout.html#input-panel",
    "title": "Component Layout",
    "section": "Input Panel",
    "text": "Input Panel\nIf you have several inputs, you may want to group them inside an input panel (code block with option panel: input or div with class .panel-input). For example:\n\nThe inputs are grouped in a panel and laid out in three columns by adding the panel: input and layout-ncol: 3 options to the OJS code cell:\n```{ojs}\n//| panel: input\n//| layout-ncol: 3\n\nviewof ch = checkbox({\n  title: \"Passport color:\",\n  options: [\n    { value: \"red\", label: \"Red\" },\n    { value: \"green\", label: \"Green\" },\n    { value: \"blue\", label: \"Blue\" },\n    { value: \"black\", label: \"Black\" }\n  ],\n  value: [\"red\", \"green\", \"blue\", \"black\"],\n  submit: false\n})\n\nviewof type = radio({\n  title: \"Representation:\",\n  options: [\n    { label: 'Passports', value: 'p' },\n    { label: 'Circles', value: 'c' }\n  ],\n  value: 'p'\n})\n\nviewof k = slider({\n  title: \"Symbol size:\",\n  min: 1,\n  max: 10,\n  value: 3,\n  step: 1\n})\n```"
  },
  {
    "objectID": "docs/interactive/layout.html#tabset-panel",
    "href": "docs/interactive/layout.html#tabset-panel",
    "title": "Component Layout",
    "section": "Tabset Panel",
    "text": "Tabset Panel\nIf you want to allow users to toggle between multiple visualizations, use a tabset (div with class .panel-tabset). Include a heading (e.g. ##) for each tab in the tabset.\nFor example, here are a plot and data each presented in their own tab:\n\ndata = FileAttachment(\"ojs/palmer-penguins.csv\").csv({typed: true})\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(data, \n  Plot.stackY(\n    Plot.binX( \n      {y: \"count\"}, \n      {x: \"body_mass\", fill: \"species\", thresholds: 20})\n    )\n  ).plot({\n    facet: {\n      data,\n      x: \"sex\"\n    },\n    marks: [Plot.frame()]\n  })\n\n\n\n\n\n\n\n\n\nInputs.table(data)\n\n\n\n\n\n\n\n\n\nHere is the markup and code used to create the tabset:\n::: {.panel-tabset}\n\n## Plot\n\n```{ojs}\nPlot.rectY(data, \n  Plot.stackY(\n    Plot.binX( \n      {y: \"count\"}, \n      {x: \"body_mass\", fill: \"species\", thresholds: 20})\n    )\n  ).plot({\n    facet: {\n      data,\n      x: \"sex\"\n    },\n    marks: [Plot.frame()]\n  })\n```\n\n## Data\n\n```{ojs}\nInputs.table(filtered)\n```\n\n:::"
  },
  {
    "objectID": "docs/interactive/layout.html#full-page-layout",
    "href": "docs/interactive/layout.html#full-page-layout",
    "title": "Component Layout",
    "section": "Full Page Layout",
    "text": "Full Page Layout\nBy default Quarto documents center their content within the document viewport, and don’t exceed a maximum width of around 900 pixels. This behavior exists to optimize readability, but for an application layout you generally want to occupy the entire page.\nTo do this, add the page-layout: custom option. For example:\nformat: \n  html:\n    page-layout: custom\nHere’s an example of a Shiny application that occupies the full width of the browser:\n\nYou’ll also note that the inputs are contained within a sidebar—the next section describes how to create sidebars."
  },
  {
    "objectID": "docs/interactive/layout.html#sidebar-panel",
    "href": "docs/interactive/layout.html#sidebar-panel",
    "title": "Component Layout",
    "section": "Sidebar Panel",
    "text": "Sidebar Panel\nSidebars are created using divs with class .panel-sidebar. You can do this using a markdown div container (as illustrated above for .panel-input), or, if the entire contents of your sidebar is created from a single code cell, by adding the panel: sidebar option to the cell.\nSidebar panels should always have an adjacent panel with class .panel-fill or .panel-center which they will be laid out next to. The former (.panel-fill) will fill all available space, the latter (.panel-center) will leave some horizontal margin around its content.\nFor example, here is the source code of the user-interface portion of the Shiny application displayed above:\n---\ntitle: \"Iris K-Means Clustering\"\nformat: \n  html:\n    page-layout: custom\nserver: shiny\n---\n\n```{r}\n#| panel: sidebar\nvars <- setdiff(names(iris), \"Species\")\nselectInput('xcol', 'X Variable', vars)\nselectInput('ycol', 'Y Variable', vars, selected = vars[[2]])\nnumericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n```\n\n```{r}\n#| panel: fill\nplotOutput('plot1')\n```\nThe panel: fill option is added to the plot output chunk. You can alternately use panel: center if you want to leave some horizontal margin around the contents of the panel.\nAdding the panel option to a code chunk is shorthand for adding the CSS class to its containing div (i.e. it’s equivalent to surrounding the code chunk with a div with class e.g. panel-fill).\nHere’s an example of using a sidebar with OJS inputs:\n\nTo do this you would use the following code:\n```{ojs}\n//| panel: sidebar\n\nviewof myage = {\n  const myage = select({\n    title: \"Quelle classe d'âge voulez-vous cartographier ?\",\n    options: ages,\n    value: \"80etplus\"\n  });\n  return myage;\n}\n\nviewof pctvax = slider({\n  title: '<br/>Objectif de vaccination',\n  description: '200% signifie 2 doses par personnes pour tout le monde',\n  min: 50,\n  max: 200,\n  value: 200,\n  step: 10,\n  format: v => v + \"%\"\n})\n\nviewof overlay = radio({\n  title: \"Écarter les cercles\",\n  options: [{ label: 'Oui', value: 'Y' }, { label: 'Non', value: 'N' }],\n  value: 'N'\n})\n\nviewof label = radio({\n  title: \"Numéros des départements\",\n  options: [{ label: 'Afficher', value: 'Y' }, { label: 'Masquer', value: 'N' }],\n  value: 'N'\n})\n```\n\n```{ojs}\n//| panel: fill\n\n(vaccine visualization code)\n\n```"
  },
  {
    "objectID": "docs/interactive/layout.html#panel-layout",
    "href": "docs/interactive/layout.html#panel-layout",
    "title": "Component Layout",
    "section": "Panel Layout",
    "text": "Panel Layout\nYou can arrange multiple interactive components into a panel using the layout attribute of a containing div. For example, here we have a main visualization in the first row and two ancillary visualizations in the second row:\n\nAs described in the article on Figures, you can arrange panels of figures in very flexible fashion using the layout attribute. For the example above we enclosed the three visualizations in the following div:\n::: {layout=\"[ [1], [1,1] ]\"}\n\n(outputs)\n\n:::\nNote that you can apply the layout attribute to a div that is already a panel (e.g. .panel-fill) to specify layout for content adjacent to a sidebar. So the following markup is also valid:\n::: {.panel-sidebar}\n\n(inputs)\n\n:::\n\n::: {.panel-fill layout=\"[ [1], [1,1] ]\"}\n\n(outputs)\n\n:::\nThe layout attribute is an array of arrays, each of which defines a row of the layout. Above we indicate that we want the first row to encompass the first visualization, and then to split the next two equally over the second row.\nThe values in rows don’t need to add up to anything in particular (they are relative within each row), so we could have just as well have specified different relative widths for the second row if that was better suited to presenting our data:\n::: {layout=\"[ [1], [3,2] ]\"}\n\n(outputs)\n\n:::"
  },
  {
    "objectID": "docs/interactive/widgets/jupyter.html",
    "href": "docs/interactive/widgets/jupyter.html",
    "title": "Jupyter Widgets",
    "section": "",
    "text": "Jupyter Widgets enable you to use JavaScript visualization libraries like Leaflet, Plotly, and threejs directly from Python.\nIf you are using the Jupyter engine with Quarto this is a great way to incorporate interactivity without learning JavaScript."
  },
  {
    "objectID": "docs/interactive/widgets/jupyter.html#usage",
    "href": "docs/interactive/widgets/jupyter.html#usage",
    "title": "Jupyter Widgets",
    "section": "Usage",
    "text": "Usage\nIncluding Jupyter Widgets within a Quarto document is as easy as including a plot. For example, here is how we embed a Leaflet map:\n\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"\n  ),\n  center=(52.204793, 360.121558),\n  zoom=4\n)\nm.add_layer(Marker(location=(52.204793, 360.121558)))\nm\n\n\n\n\nHere’s an example of using Plotly:\n\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()\n\n\n                                                \n\n\nTo learn about available Jupyter Widgets visit https://jupyter.org/widgets."
  },
  {
    "objectID": "docs/interactive/widgets/htmlwidgets.html",
    "href": "docs/interactive/widgets/htmlwidgets.html",
    "title": "htmlwidgets for R",
    "section": "",
    "text": "The htmlwidgets package enables you to use JavaScript visualization libraries like Leaflet, Plotly, dygraphs, and threejs directly from R.\nIf you are using the Knitr engine with Quarto this is a great way to incorporate interactivity without learning JavaScript or requiring a Shiny Server to view your document."
  },
  {
    "objectID": "docs/interactive/widgets/htmlwidgets.html#usage",
    "href": "docs/interactive/widgets/htmlwidgets.html#usage",
    "title": "htmlwidgets for R",
    "section": "Usage",
    "text": "Usage\nIncluding htmlwidgets within a Quarto document is as easy as including an R plot. For example, here is how we embed a Leaflet map:\n```{r}\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n\nWarning: package 'leaflet' was built under R version 4.1.2"
  },
  {
    "objectID": "docs/interactive/widgets/htmlwidgets.html#layout",
    "href": "docs/interactive/widgets/htmlwidgets.html#layout",
    "title": "htmlwidgets for R",
    "section": "Layout",
    "text": "Layout\nYou can also use layout options with htmlwidgets. For example, here we provide a custom layout to arrange three dygraph time series plots:\n```{r}\n#| layout: [[1,1], [1]]\nlibrary(dygraphs)\ndygraph(fdeaths, \"Female Deaths\")\ndygraph(mdeaths, \"Male Deaths\")\ndygraph(ldeaths, \"All Deaths\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee the article on Figures for additional documentation on custom layouts.\nTo learn about available htmlwidgets see the showcase page and the htmlwidget gallery."
  },
  {
    "objectID": "docs/output-formats/html-basics.html",
    "href": "docs/output-formats/html-basics.html",
    "title": "HTML Basics",
    "section": "",
    "text": "Use the html format to create HTML output. For example:\n---\ntitle: \"My document\"\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n    css: styles.css\n---\nThis example highlights a few of the options available for HTML output. This document covers these and other options in detail. See the HTML format reference for a complete list of all available options."
  },
  {
    "objectID": "docs/output-formats/html-basics.html#table-of-contents",
    "href": "docs/output-formats/html-basics.html#table-of-contents",
    "title": "HTML Basics",
    "section": "Table of Contents",
    "text": "Table of Contents\nUse the toc option to include an automatically generated table of contents in the output document. Use the toc-depth option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:\ntoc: true\ntoc-depth: 2\nYou can customize the title used for the table of contents using the toc-title option:\ntoc-title: Contents\nIf you want to exclude a heading from the table of contents, add both the .unnumbered and .unlisted classes to it:\n### More Options {.unnumbered .unlisted}\nThe HTML format by default floats the table of contents to the right. You can alternatively position it at the left, or in the body. For example:\nformat:\n  html:\n    toc: true\n    toc-location: left\nThe floating table of contents can be used to navigate to sections of the document and also will automatically highlight the appropriate section as the user scrolls. The table of contents is responsive and will become hidden once the viewport becomes too narrow. See an example on the right of this page.\nNote that the toc-location option is not available when you disable the standard HTML theme (e.g. if you specify the theme: none or theme: pandoc option)."
  },
  {
    "objectID": "docs/output-formats/html-basics.html#section-numbering",
    "href": "docs/output-formats/html-basics.html#section-numbering",
    "title": "HTML Basics",
    "section": "Section Numbering",
    "text": "Section Numbering\nUse the number-sections option to number section headings in the output document. For example:\nnumber-sections: true\nUse the number-depth option to specify the deepest level of heading to add numbers to (by default all headings are numbered). For example:\nnumber-depth: 3\nTo exclude an individual heading from numbering, add the .unnumbered class to it:\n### More Options {.unnumbered}"
  },
  {
    "objectID": "docs/output-formats/html-basics.html#css-styles",
    "href": "docs/output-formats/html-basics.html#css-styles",
    "title": "HTML Basics",
    "section": "CSS Styles",
    "text": "CSS Styles\nTo add a CSS stylesheet to your document, just provide the css option. For example:\nformat:\n  html: \n    css: styles.css\nUsing the css option works well for simple tweaks to document appearance. If you want to do more extensive customization see the documentation on HTML Themes."
  },
  {
    "objectID": "docs/output-formats/html-basics.html#latex-equations",
    "href": "docs/output-formats/html-basics.html#latex-equations",
    "title": "HTML Basics",
    "section": "LaTeX Equations",
    "text": "LaTeX Equations\nBy default, LaTeX equations are rendered using MathJax. Use the html-math-method option to choose another method. For example:\nformat:\n  html:\n    html-math-method: katex\nYou can also specify a url for the library to load for a given method:\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nAvailable math rendering methods include:\n\n\n\nMethod\nDescription\n\n\n\n\nmathjax\nUse MathJax to display embedded TeX math in HTML output.\n\n\nkatex\nUse KaTeX to display embedded TeX math in HTML output.\n\n\nwebtex\nConvert TeX formulas to <img> tags that link to an external script that converts formulas to images.\n\n\ngladtex\nEnclose TeX math in <eq> tags in HTML output. The resulting HTML can then be processed by GladTeX to produce images of the typeset formulas and an HTML file with links to these images.\n\n\nmathml\nConvert TeX math to MathML (note that currently only Firefox and Safari natively support MathML)\n\n\nplain\nNo special processing (formulas are put inside a span with class=\"math\").\n\n\n\nNote that this is more detailed documentation on each of these options in the Pandoc Math Rendering in HTML documentation."
  },
  {
    "objectID": "docs/output-formats/html-basics.html#tabsets",
    "href": "docs/output-formats/html-basics.html#tabsets",
    "title": "HTML Basics",
    "section": "Tabsets",
    "text": "Tabsets\nYou can use tabsets to present content that will vary in interest depending on the audience. For example, here we provide some example code in a variety of languages:\n\nRPythonJavaJulia\n\n\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\n\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n\n\npublic class FizzBuzz\n{\n  public static void fizzBuzz(int num)\n  {\n    if (num % 15 == 0) {\n      System.out.println(\"FizzBuzz\");\n    } else if (num % 5 == 0) {\n      System.out.println(\"Buzz\");\n    } else if (num % 3 == 0) {\n      System.out.println(\"Fizz\");\n    } else {\n      System.out.println(num);\n    }\n  }\n}\n\n\nfunction FizzBuzz(num)\n  if num % 15 == 0\n    println(\"FizzBuzz\")\n  elseif num % 5 == 0\n    println(\"Buzz\")\n  elseif num % 3 == 0\n    println(\"Fizz\")\n  else\n    println(num)\n  end\nend\n\n\n\nCreate a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}). Each top-level heading within the div creates a new tab. For example, here is the markdown used to implement the first two tabs displayed above:\n::: {.panel-tabset}\n## R\n\n``` {.r}\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n```\n\n## Python\n\n``` {.python}\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n```\n\n:::"
  },
  {
    "objectID": "docs/output-formats/html-basics.html#self-contained",
    "href": "docs/output-formats/html-basics.html#self-contained",
    "title": "HTML Basics",
    "section": "Self Contained",
    "text": "Self Contained\nHTML documents typically have a number of external dependencies (e.g. images, CSS style sheets, JavaScript, etc.). By default these dependencies are placed in a _files directory alongside your document. For example, if you render report.qmd to HTML:\nquarto render report.qmd --to html\nThen the following output is produced:\nreport.html\nreport_files/\nYou might alternatively want to create an entirely self-contained HTML document (with images, css, etc. embedded into the HTML file). You can do this by specifying the self-contained option:\nformat:\n  html:\n    self-contained: true\nThis will produce a standalone HTML file with no external dependencies, using data: URIs to incorporate the contents of linked scripts, style sheets, images, and videos. The resulting file should be “self-contained,” in the sense that it needs no external files and no net access to be displayed properly by a browser."
  },
  {
    "objectID": "docs/output-formats/html-basics.html#anchor-sections",
    "href": "docs/output-formats/html-basics.html#anchor-sections",
    "title": "HTML Basics",
    "section": "Anchor Sections",
    "text": "Anchor Sections\nHover over a section title to see an anchor link. Enable/disable this behavior with:\nformat:\n  html:\n    anchor-sections: true\nAnchor links are also automatically added to figures and tables that have a cross reference defined."
  },
  {
    "objectID": "docs/output-formats/html-basics.html#smooth-scrolling",
    "href": "docs/output-formats/html-basics.html#smooth-scrolling",
    "title": "HTML Basics",
    "section": "Smooth Scrolling",
    "text": "Smooth Scrolling\nEnable smooth scrolling within the page. By default, smooth scroll is not enabled. Enable/disable it with:\nformat:\n  html:\n    smooth-scroll: true"
  },
  {
    "objectID": "docs/output-formats/html-basics.html#external-links",
    "href": "docs/output-formats/html-basics.html#external-links",
    "title": "HTML Basics",
    "section": "External Links",
    "text": "External Links\nBy default external links (i.e. links that don’t target the current site) receive no special visual adornment or navigation treatment (the current page is navigated). You can use the following options to modify this behavior:\n\n\n\nOption\nDescription\n\n\n\n\nlink-external-icon\ntrue to show an icon next to the link to indicate that it’s external (e.g. external).\n\n\nlink-external-newwindow\ntrue to open external links in a new browser window or tab (rather than navigating the current tab).\n\n\nlink-external-filter\nA regular expression that can be used to determine whether a link is an internal link. For example\n^(?:http:|https:)\\/\\/www\\.quarto\\.org\\/custom\nwill treat links that start with http://www.quarto.org as internal links (and others will be considered external).\n\n\n\nExternal links are identified either using the site-url (if provided) or using the window.host if no site-url or link-external-filter is provided. For example, here we enable both options an a custom filter:\nformat:\n  html:\n    link-external-icon: true\n    link-external-newwindow: true\n    link-external-filter: '^(?:http:|https:)\\/\\/www\\.quarto\\.org\\/custom'\nYou can also specify one or both of these behaviors for an individual link using the .external class and target attribute. For example:\n[example](https://example.com){.external target=\"_blank\"}"
  },
  {
    "objectID": "docs/output-formats/html-basics.html#reference-popups",
    "href": "docs/output-formats/html-basics.html#reference-popups",
    "title": "HTML Basics",
    "section": "Reference Popups",
    "text": "Reference Popups\nIf you hover your mouse over the citation and footnote in this sentence you’ll see a popup displaying the reference contents:\n   Hover over Xie (2015) to see a reference to the definitive book on knitr1.\nThis behavior is enabled by default. You can disable it with the following options:\nformat:\n  html:\n    citations-hover: false\n    footnotes-hover: false"
  },
  {
    "objectID": "docs/output-formats/html-basics.html#commenting",
    "href": "docs/output-formats/html-basics.html#commenting",
    "title": "HTML Basics",
    "section": "Commenting",
    "text": "Commenting\nThis page has commenting with Hypothes.is enabled via the following YAML option:\ncomments:\n  hypothesis: true\nYou can see the Hypothesis UI at the far right of the page. Rather than true, you can specify any of the available Hypothesis embedding options as a sub-key of hypothesis. For example:\ncomments:\n  hypothesis: \n    theme: clean\nYou can enable Utterances commenting using the utterances option. Here you need to specify at least the Git repo you want to use for storing comments:\ncomments:\n  utterances:\n    repo: quarto-dev/quarto-docs\nYou can also specify the other options documented here.\nYou may also enable Giscus for commenting using the giscus option. Giscus will store comments in the ‘Discussions’ of a Github repo.\ncomments:\n  giscus: \n    repo: quarto-dev/quarto-docs\nLike utterances, you need to specify at least the Git repo you want to use for storing comments. In addition, the repo that you use must:\n\nBe public\nHave the Giscus app installed.\nHave discussion enabled\n\nReview the Giscus documentation for instructions on setting up Giscus in your repository. Additional options are covered here.\n\nDisabling Comments\nIf you have comments enabled for an entire website or book, you can selectively disable comments for a single page by specifying comments: false. For example:\ntitle: \"Home Page\"\ncomments: false"
  },
  {
    "objectID": "docs/output-formats/html-basics.html#includes",
    "href": "docs/output-formats/html-basics.html#includes",
    "title": "HTML Basics",
    "section": "Includes",
    "text": "Includes\nIf you want to include additional content in your document from another file, you can use the include-in options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ninclude-in-header\nInclude contents of file, verbatim, at the end of the header. This can be used, for example, to include special CSS or JavaScript in HTML documents or to inject commands into the LaTeX preamble.\n\n\ninclude-before-body\nInclude contents of file, verbatim, at the beginning of the document body (e.g. after the <body> tag in HTML, or the \\begin{document} command in LaTeX). This can be used to include navigation bars or banners in HTML documents.\n\n\ninclude-after-body\nInclude contents of file, verbatim, at the end of the document body (before the </body> tag in HTML, or the \\end{document} command in LaTeX).\n\n\n\nYou can specify a single file for multiple files for each of these options. For example:\nformat:\n  html:\n    include-in-header:\n      - analytics.html\n      - comments.html\n    include-before-body: header.html\nThere are also a set of options you can use for inline includes (i.e. specifying the included content right within YAML):\n\n\n\nOption\nDescription\n\n\n\n\nheader-includes\nInline version of include-in-header\n\n\ninclude-before\nInline version of include-before-body\n\n\ninclude-after\nInline version include-after-body\n\n\n\nFor example:\nformat:\n  pdf: \n    header-includes: |\n      \\usepackage{eplain}\n      \\usepackage{easy-todo}"
  },
  {
    "objectID": "docs/output-formats/html-basics.html#minimal-html",
    "href": "docs/output-formats/html-basics.html#minimal-html",
    "title": "HTML Basics",
    "section": "Minimal HTML",
    "text": "Minimal HTML\nThe default Quarto HTML output format includes several features by default, including bootstrap themes, anchor sections, reference popups, tabsets, code block copying, and responsive figures. You can disable all of these built in features at once using the minimal option. For example:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    minimal: true\n---\nWhen specifying minimal: true you can still selectively re-enable features you do want, for example:\n---\ntitle: \"My Document\"\nformat:\n  html:\n    minimal: true\n    code-copy: true\n---"
  },
  {
    "objectID": "docs/output-formats/html-code.html",
    "href": "docs/output-formats/html-code.html",
    "title": "HTML Code Blocks",
    "section": "",
    "text": "There are wide variety of options available to customize the display of source code within HTML documents, including:\n\nHiding some or all code that was executed by Knitr or Jupyter.\nCode folding for executed code (hidden by default and expandable by readers).\nHandling code that overflows the available horizontal display space.\nView the source code of the markdown file used to generate the document.\nSyntax highlighting themes and other options to control the appearance of code.\nCopy to clipboard button for code blocks.\nGenerating hyperlinks to online documentation for functions used within code blocks via the downlit package (note that this option currently only works when using the Knitr engine).\n\nDetails on using all of these options are provided below."
  },
  {
    "objectID": "docs/output-formats/html-code.html#hiding-code",
    "href": "docs/output-formats/html-code.html#hiding-code",
    "title": "HTML Code Blocks",
    "section": "Hiding Code",
    "text": "Hiding Code\nFor many documents you may want to hide all of the executable source code used to produce dynamic outputs. You can do this by specifying echo: false in the document execute options. For example:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\njupyter: python3\n---\nNote that we can override this option on a per code-block basis. For example:\n```{python}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\nCode block options are included in a special comment at the top of the block (lines at the top prefaced with #| are considered options)."
  },
  {
    "objectID": "docs/output-formats/html-code.html#folding-code",
    "href": "docs/output-formats/html-code.html#folding-code",
    "title": "HTML Code Blocks",
    "section": "Folding Code",
    "text": "Folding Code\nUse the code-fold option to include code but have it hidden by default using the HTML <details> tag. For example, click the Code button to see the code that produced this plot.\n\n\nCode\nlibrary(ggplot2)\ndat <- data.frame(cond = rep(c(\"A\", \"B\"), each=10),\n                  xvar = 1:20 + rnorm(20,sd=3),\n                  yvar = 1:20 + rnorm(20,sd=3))\n\nggplot(dat, aes(x=xvar, y=yvar)) +\n    geom_point(shape=1) + \n    geom_smooth() \n\n\n\n\n\nHere we specify both code-fold: true as well as custom summary text (the default is just “Code” as shown above):\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\nValid values for code-fold include:\n\n\n\nValue\nBehavior\n\n\n\n\nfalse\nNo folding (default)\n\n\ntrue\nFold code (initially hidden)\n\n\nshow\nFold code (initially shown)\n\n\n\nUse the code-fold and code-summary chunk attributes to control this on a chunk-by-chunk basis:\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n```"
  },
  {
    "objectID": "docs/output-formats/html-code.html#code-overflow",
    "href": "docs/output-formats/html-code.html#code-overflow",
    "title": "HTML Code Blocks",
    "section": "Code Overflow",
    "text": "Code Overflow\nIn some cases the width of source code will overflow the available horizontal display space. By default, this will result in a horizontal scroll bar for the code block. However if you prefer not to have scrollbars you can have the longer lines wrap instead.\nTo set the global default behavior use the code-overflow option. For example:\nformat:\n  html:\n    code-overflow: wrap\nValid values for code-overflow are:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nscroll\nScroll code blocks that exceed available width (default, corresponds to white-space: pre).\n\n\nwrap\nWrap lines of code that exceed available width (corresponds to white-space: pre-wrap).\n\n\n\nYou can also override the global default on a per-code-block basis. For computational cells you do this with the code-overflow cell option:\n```{python}\n#| code-overflow: wrap\n\n# very long line of code....\n```\nFor a static code block, add the .code-overflow-scroll or .code-overflow-wrap CSS class:\n```{.python .code-overflow-wrap}\n# very long line of code....\n```\nNote that irrespective of these options, code will always wrap within printed HTML output (as it would otherwise be clipped off the edge of the page)."
  },
  {
    "objectID": "docs/output-formats/html-code.html#code-tools",
    "href": "docs/output-formats/html-code.html#code-tools",
    "title": "HTML Code Blocks",
    "section": "Code Tools",
    "text": "Code Tools\nYou can include a Code menu in the header of your document that provides various tools for readers to interact with the source code. Specify code-tools: true to activate these tools:\nformat:\n  html:\n    code-fold: true\n    code-tools: true\nIf you have a document that includes folded code blocks then the Code menu will present options to show and hide the folded code as well as view the full source code of the document:\n\nThis document specifies code-tools: true in its options so you should see the Code menu above next to the main header.\nYou can control which of these options are made available as well as the “Code” caption text using sub-options of code-tools. For example, here we specify that we want only “View Source” (no toggling of code visibility) and no caption on the code menu:\nformat:\n  html: \n    code-tools:\n      source: true\n      toggle: false\n      caption: none\nBy default, the source code is embedded in the document and shown in a popup window like this:\n\nYou can alternatively specify a URL for the value of source:\nformat:\n  html: \n    code-tools:\n      source: https://github.com/quarto-dev/quarto-web/blob/main/index.md\nIf you are within a project and have specified a repo-url option then you can just use repo and the correct link to your source file will be generated:\nformat:\n  html: \n    code-tools:\n      source: repo\nNote that the code-tools option is not available when you disable the standard HTML theme (e.g. if you specify the theme: none option)."
  },
  {
    "objectID": "docs/output-formats/html-code.html#appearance",
    "href": "docs/output-formats/html-code.html#appearance",
    "title": "HTML Code Blocks",
    "section": "Appearance",
    "text": "Appearance\nBy default code blocks are rendered with a left border whose color is derived from the current theme. You can customize code chunk appearance with some simple options that control the background color and left border. Options can either be booleans to enable or disable the treatment or can be legal CSS color strings (or they could even be SASS variable names!).\nHere is the default appearance for code blocks (code-block-background: true):\n\nYou can instead use a left border treatment using the code-block-border-left option:\ncode-block-border-left: true\n\nYou can combine a background and border treatment as well as customize the left border color:\ncode-block-bg: true\ncode-block-border-left: \"#31BAE9\""
  },
  {
    "objectID": "docs/output-formats/html-code.html#highlighting",
    "href": "docs/output-formats/html-code.html#highlighting",
    "title": "HTML Code Blocks",
    "section": "Highlighting",
    "text": "Highlighting\nYou can specify the code highlighting style using highlight-style and specifying one of the supported themes. These themes are “adaptive”, which means they will automatically switch between a dark and light mode based upon the theme of the website. These are designed to work well with sites that include a dark and light mode.\n\na11y\narrow\natom-one\nayu\nbreeze\ngithub\ngruvbox\n\nAll of the standard Pandoc themes are also available:\n\npygments\ntango\nespresso\nzenburn\nkate\nmonochrome\nbreezedark\nhaddock\n\nAs well as an additional set of extended themes, including:\n\ndracula\nmokokai\nnord\noblivion\nprinting\nradical\nsolarized\nvim-dark\n\nThe highlight-style option determines which theme is used. For example:\nhighlight-style: github\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color’s darkness. Users may always opt to specify the full name (e.g. atom-one-dark) to by pass this automatic behavior.\nBy default, code is highlighted using the arrow theme, which optimized for accessibility. We’ve additionally introduced the arrow-dark theme which is designed to provide accessible highlighting against dark backgrounds.\nExamples of the light and dark themes:\n\nArrow (light)\n\n\n\nArrow (dark)\n\n\n\nAyu (light)\n\n\n\nAyu (dark)\n\n\n\nCustom Highlighting\nIn addition to the built in themes available for syntax highlighting, you can also specify your own syntax highlighting by providing the path to a valid theme file (which is based upon the KDE XML syntax highlighting descriptions). Highlighting is implemented using skylighting.\nFor example:\n---\nhighlight-style: custom.theme\n---\nIn addition, if you’d like to provide adaptive themes, you may also pass both a light and dark theme file:\n---\nhighlight-style: pygments"
  },
  {
    "objectID": "docs/output-formats/html-code.html#copy-button",
    "href": "docs/output-formats/html-code.html#copy-button",
    "title": "HTML Code Blocks",
    "section": "Copy Button",
    "text": "Copy Button\nHover over the code block below and you will see a copy icon in the top-right corner:\n\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\") %>% \n  dyRangeSelector(dateWindow = c(\"1920-01-01\", \"1960-01-01\"))\n\nThis behavior is enabled by default but you configure it using the code-copy option:\nformat:\n  html:\n    code-copy: false\nValid values for code-copy include:\n\n\n\nhover\nShow button on hover (default)\n\n\ntrue\nAlways show code copy button\n\n\nfalse\nNever show code copy button"
  },
  {
    "objectID": "docs/output-formats/html-code.html#code-linking",
    "href": "docs/output-formats/html-code.html#code-linking",
    "title": "HTML Code Blocks",
    "section": "Code Linking",
    "text": "Code Linking\nThe code-link option enables hyper-linking of functions within code blocks to their online documentation:\nformat:\n  html:\n    code-link: true\nCode linking is currently implemented only for the knitr engine (via the downlit package)."
  },
  {
    "objectID": "docs/output-formats/ms-word.html",
    "href": "docs/output-formats/ms-word.html",
    "title": "Word Basics",
    "section": "",
    "text": "Use the docx format to create MS Word output. For example:\n---\ntitle: \"My Document\"\nformat:\n  docx:\n    toc: true\n    number-sections: true\n    highlight-style: github\n---\nThis example highlights a few of the options available for MS Word output. This document covers these and other options in detail. See the Word format reference for a complete list of all available options.\nTo learn about creating custom templates for use with the docx format, see the article on Word Templates."
  },
  {
    "objectID": "docs/output-formats/ms-word.html#table-of-contents",
    "href": "docs/output-formats/ms-word.html#table-of-contents",
    "title": "Word Basics",
    "section": "Table of Contents",
    "text": "Table of Contents\nUse the toc option to include an automatically generated table of contents in the output document. Use the toc-depth option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:\ntoc: true\ntoc-depth: 2\nYou can customize the title used for the table of contents using the toc-title option:\ntoc-title: Contents\nIf you want to exclude a heading from the table of contents, add both the .unnumbered and .unlisted classes to it:\n### More Options {.unnumbered .unlisted}"
  },
  {
    "objectID": "docs/output-formats/ms-word.html#section-numbering",
    "href": "docs/output-formats/ms-word.html#section-numbering",
    "title": "Word Basics",
    "section": "Section Numbering",
    "text": "Section Numbering\nUse the number-sections option to number section headings in the output document. For example:\nnumber-sections: true\nUse the number-depth option to specify the deepest level of heading to add numbers to (by default all headings are numbered). For example:\nnumber-depth: 3\nTo exclude an individual heading from numbering, add the .unnumbered class to it:\n### More Options {.unnumbered}"
  },
  {
    "objectID": "docs/output-formats/ms-word.html#syntax-highlighting",
    "href": "docs/output-formats/ms-word.html#syntax-highlighting",
    "title": "Word Basics",
    "section": "Syntax Highlighting",
    "text": "Syntax Highlighting\nPandoc will automatically highlight syntax in fenced code blocks that are marked with a language name.\nYou can specify the code highlighting style using highlight-style and specifying one of the supported themes. Supported themes include: arrow, pygments, tango, espresso, zenburn, kate, monochrome, breezedark, haddock, atom-one, ayu, breeze, dracula, github, gruvbox, monokai, nord, oblivion, printing, radical, solarized, and vim.\nFor example:\nhighlight-style: github\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color’s darkness. You may may always opt to specify the full name (e.g. atom-one-dark) to bypass this automatic behavior.\nBy default, code is highlighted using the arrow theme, which is optimized for accessibility. Here are examples of the arrow light and dark themes:\n\nLightDark"
  },
  {
    "objectID": "docs/output-formats/all-formats.html",
    "href": "docs/output-formats/all-formats.html",
    "title": "All Formats",
    "section": "",
    "text": "Pandoc supports a huge array of output formats, all of which can be used with Quarto. To use any Pandoc format just use the format option or the --to command line option.\nFor example, here’s some YAML that specifies the use of the html format as well as a couple of format options:\n---\ntitle: \"My Document\"\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\nAlternatively you can specify the use of a format on the command line:\nquarto render document.qmd --to html\nSee below for a list of all output formats by type along with links to their reference documentation."
  },
  {
    "objectID": "docs/output-formats/all-formats.html#documents",
    "href": "docs/output-formats/all-formats.html#documents",
    "title": "All Formats",
    "section": "Documents",
    "text": "Documents\n\n\n\n\n\n\n\nHTML\nHTML is a markup language used for structuring and presenting content on the web.\n\n\nPDF\nPDF is a file format for creating print-ready paged documents.\n\n\nMS Word\nMS Word is the word processor included with Microsoft Office.\n\n\nOpenOffice\nOpenDocument is an open standard file format for word processing documents.\n\n\nePub\nePub is an e-book file format that is supported by many e-readers."
  },
  {
    "objectID": "docs/output-formats/all-formats.html#presentations",
    "href": "docs/output-formats/all-formats.html#presentations",
    "title": "All Formats",
    "section": "Presentations",
    "text": "Presentations\n\n\n\n\n\n\n\nRevealjs\nRevealjs is an open source HTML presentation framework.\n\n\nPowerPoint\nPowerPoint is the presentation editing software included with Microsoft Office.\n\n\nBeamer\nBeamer is a LaTeX class for producing presentations and slides."
  },
  {
    "objectID": "docs/output-formats/all-formats.html#markdown",
    "href": "docs/output-formats/all-formats.html#markdown",
    "title": "All Formats",
    "section": "Markdown",
    "text": "Markdown\n\n\n\n\n\n\n\nGitHub\nGitHub Flavored Markdown (GFM) is the dialect of Markdown that is currently supported for user content on GitHub.\n\n\nCommonMark\nCommonMark is a strongly defined, highly compatible specification of Markdown.\n\n\nHugo\nHugo is an open-source static website generator.\n\n\nMarkua\nMarkua is a markdown variant used by Leanpub."
  },
  {
    "objectID": "docs/output-formats/all-formats.html#wikis",
    "href": "docs/output-formats/all-formats.html#wikis",
    "title": "All Formats",
    "section": "Wikis",
    "text": "Wikis\n\n\n\n\n\n\n\nMediaWiki\nMediaWiki is the native document format of Wikipedia.\n\n\nDokuWiki\nDokuWiki is a simple to use and highly versatile open source wiki software that doesn’t require a database.\n\n\nZimWiki\nZim is a graphical text editor used to maintain a collection of wiki pages.\n\n\nJira Wiki\nJira Wiki is the native document format for the Jira issue tracking and project management system from Atlassian.\n\n\nXWiki\nXWiki is an open-source enterprise wiki system."
  },
  {
    "objectID": "docs/output-formats/all-formats.html#more-formats",
    "href": "docs/output-formats/all-formats.html#more-formats",
    "title": "All Formats",
    "section": "More Formats",
    "text": "More Formats\n\n\n\n\n\n\n\nJATS\nJATS (Journal Article Tag Suite) is an XML format for marking up and exchanging journal content.\n\n\nJupyter\nJupyter Notebooks combine software code, computational output, explanatory text and multimedia resources in a single document.\n\n\nConTeXt\nConTeXt is a system for typesetting documents based on TEX and METAPOST.\n\n\nRTF\nThe Rich Text Format (RTF) is a file format for for cross-platform document interchange.\n\n\nreST\nreStructuredText is an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax and parser system.\n\n\nAsciiDoc\nAsciiDoc is a text document format for writing documentation, articles, and books, ebooks, slideshows, web pages, man pages and blogs.\n\n\nOrg-Mode\nOrg-Mode is an Emacs major mode for keeping notes, authoring documents, creating computational notebooks, and more.\n\n\nMuse\nEmacs Muse is an authoring and publishing environment for Emacs.\n\n\nGNU Texinfo\nTexinfo is the official documentation format of the GNU project.\n\n\nGroff Man Page\nThe Groff (GNU troff) man page document formats consists of plain text mixed with formatting commands that produce ASCII/UTF8 for display at the terminal.\n\n\nGroff Manuscript\nThe Groff (GNU troff) manuscript format consists of plain text mixed with formatting commands that produces PostScript, PDF, or HTML.\n\n\nHaddock markup\nHaddock is a tool for automatically generating documentation from annotated Haskell source code.\n\n\nOPML\nOPML (Outline Processor Markup Language) is an XML format for outlines.\n\n\nTextile\nTextile is a simple text markup language that makes it easy to structure content for blogs, wikis, and documentation.\n\n\nDocBook\nDocBook is an XML schema particularly well suited to books and papers about computer hardware and software.\n\n\nInDesign\nICML is an XML representation of an Adobe InDesign document.\n\n\nTEI Simple\nTEI Simple aims to define a new highly-constrained and prescriptive subset of the Text Encoding Initiative (TEI) Guidelines suited to the representation of early modern and modern books.\n\n\nFictionBook\nFictionBook is an open XML-based e-book format."
  },
  {
    "objectID": "docs/output-formats/pdf-engine.html",
    "href": "docs/output-formats/pdf-engine.html",
    "title": "PDF Engines",
    "section": "",
    "text": "Pandoc supports the use of a wide range of TeX distributions and PDF compilation engines including pdflatex, xelatex, lualatex, tectonic, and latexmk.\nWhile you can employ whatever toolchain you like for LaTeX compilation, we strongly recommend the use of TinyTeX, which is a distribution of TeX Live that provides a reasonably sized initial download (~100 MB) that includes the 200 or so most commonly used TeX packages for Pandoc documents.\nWe also recommend the use of Quarto’s built in PDF compilation engine, which among other things performs automatic installation of any missing TeX packages."
  },
  {
    "objectID": "docs/output-formats/pdf-engine.html#installing-tex",
    "href": "docs/output-formats/pdf-engine.html#installing-tex",
    "title": "PDF Engines",
    "section": "Installing TeX",
    "text": "Installing TeX\nTo install TinyTeX, use the following command:\nquarto tools install tinytex\nIf you prefer TeX Live, you can find instructions for installing it here: https://tug.org/texlive/.\nNote that Quarto’s automatic installation of missing TeX packages will work for TinyTeX and TeX Live, but not for other TeX distributions (as it relies on TeX Live’s tlmgr command)."
  },
  {
    "objectID": "docs/output-formats/pdf-engine.html#quarto-pdf-engine",
    "href": "docs/output-formats/pdf-engine.html#quarto-pdf-engine",
    "title": "PDF Engines",
    "section": "Quarto PDF Engine",
    "text": "Quarto PDF Engine\nQuarto’s built-in PDF compilation engine handles running LaTeX multiple times to resolve index and bibliography entries, and also performs automatic LaTeX package installation. This section describes customizing the built-in engine (see the Alternate PDF Engines section below for docs on using other engines).\n\nPDF Compilation\nThe following options are available for customizing PDF compilation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlatex-min-runs\nNumber (minimum number of compilation passes)\n\n\nlatex-max-runs\nNumber (maximum number of compilation passes)\n\n\nlatex-clean\nBoolean (clean intermediates after compilation, defaults to true)\n\n\nlatex-output-dir\nString (output directory for intermediates and PDF)\n\n\nlatex-makeindex\nString (program to use for makeindex)\n\n\nlatex-makeindex-opts\nArray (options for makeindexprogram)\n\n\n\n\n\nPackage Installation\nThe following options are available for customizing automatic package installation:\n\n\n\nOption\nDescription\n\n\n\n\nlatex-auto-install\nBoolean (enable/disable automatic package installation)\n\n\nlatex-tlmgr-opts\nArray (options for tlmgr)"
  },
  {
    "objectID": "docs/output-formats/pdf-engine.html#alternate-pdf-engines",
    "href": "docs/output-formats/pdf-engine.html#alternate-pdf-engines",
    "title": "PDF Engines",
    "section": "Alternate PDF Engines",
    "text": "Alternate PDF Engines\nYou can use the pdf-engine and pdf-engine-opts to control the PDF engine that Quarto uses to compile the LaTeX output into a PDF. For example:\ntitle: \"My Document\"\npdf-engine: lualatex\npdf-engine-opt: -outdir=out\nThe above example will use the lualatex PDF engine rather than the default xelatex."
  },
  {
    "objectID": "docs/output-formats/pdf-engine.html#latexmk",
    "href": "docs/output-formats/pdf-engine.html#latexmk",
    "title": "PDF Engines",
    "section": "Latexmk",
    "text": "Latexmk\nQuarto includes a built in Latexmk engine, which will run the pdf-engine more than once to generate your PDF (for example if you’re using cross references or a bibliography). In addition, this engine will detect and attempt to install missing packages, fonts, or commands if TeX Live is available.\nYou can disable Quarto’s built in Latexmk engine by settng the latex-auto-mk option to false. For example:\ntitle: \"My Document\"\nlatex-auto-mk: false"
  },
  {
    "objectID": "docs/output-formats/gfm.html",
    "href": "docs/output-formats/gfm.html",
    "title": "GFM",
    "section": "",
    "text": "While markdown is the input format for Quarto, it can also in some cases be an output format (for example, if you have a website or CMS that accepts markdown as input and want to incorporate computations from Python or R).\nThis article covers using Quarto to generate GitHub Flavored Markdown (GFM). You might want to do this in order to:\n\nGenerate a GitHub README.md from a Jupyter notebook\nCreate pages for a GitHub wiki that include computations (e.g. plot output)."
  },
  {
    "objectID": "docs/output-formats/gfm.html#gfm-format",
    "href": "docs/output-formats/gfm.html#gfm-format",
    "title": "GFM",
    "section": "GFM Format",
    "text": "GFM Format\nUse the gfm format to create GitHub Flavored Markdown from Quarto. For example:\n---\ntitle: \"My Project\"\nformat: gfm\n---\nSee the GFM format reference for a complete list of all options available for GFM output.\nTo create a README.md using Quarto, start with a notebook (.ipynb) or computational markdown file (.qmd) that has README as its file name stem, for example:\nREADME.qmd\n---\ntitle: \"My Project\"\nformat: gfm\njupyter: python3\n---\n\nThis is a GitHub README that has content dynamically generated from Python:\n  \n```{python}\n1 + 1\n```\nRender the README with:\nquarto render README.qmd\nWhich will create README.md alongside your input file."
  },
  {
    "objectID": "docs/output-formats/gfm.html#webtex-math",
    "href": "docs/output-formats/gfm.html#webtex-math",
    "title": "GFM",
    "section": "WebTeX Math",
    "text": "WebTeX Math\nThe gfm format renders LaTeX equations using standard dollar-delimited inline ($...$) and display ($$...$$) syntax. However, if the web environment you are publishing into doesn’t support dollar-delimited math, you can alternatively use WebTeX to display math. This is done by setting the Pandoc html-math-method to webtex. For example:\nformat:\n  gfm:\n    html-math-method: webtex\nThe webtex method works for any web page that can display images, and requires no special JavaScript or CSS. Any inline or display equations contained within your document will be converted to an image URL that requests a rendered version of the equation. For example, the following markdown:\n$x + 1$\nWill be converted to:\n![](https://latex.codecogs.com/svg.latex?x%20%2B%201)\n\nDark Background\nSVG is used as the default rendering method because it has the best overall appearance. However, if your gfm document is being rendered on a dark background, you may want to switch to PNG with a dark background specified. You can do this as follows:\nformat:\n   gfm:\n     html-math-method: \n       method: webtex\n       url: https://latex.codecogs.com/png.image?%5Cbg_black&space;"
  },
  {
    "objectID": "docs/output-formats/gfm.html#github-wikis",
    "href": "docs/output-formats/gfm.html#github-wikis",
    "title": "GFM",
    "section": "GitHub Wikis",
    "text": "GitHub Wikis\nIf you want to use Quarto to incorporate computations into a GitHub wiki start by cloning the wiki for local editing.\nThen, simply create a computational markdown file (.ipynb, .qmd) for each page in the wiki. You can render all of these files at once into their corresponding .md files using Quarto Projects. For example:\nquarto render\nYou don’t even strictly need a Quarto project file to do this as quarto render will render all input files in a directory by default if there is no project file."
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html",
    "href": "docs/output-formats/pdf-basics.html",
    "title": "PDF Basics",
    "section": "",
    "text": "Use the pdf format to create PDF output. For example:\n---\ntitle: \"My document\"\nformat:\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\n---\nThis example highlights a few of the options available for PDF output. This article covers these and other options in detail. See the PDF format reference for a complete list of all available options.\nIf you want to produce raw LaTeX output (a .tex file) rather than a PDF, all of the options documented here are still available (see the LaTeX Output section below for additional details).\n\n\n\n\n\n\nNote\n\n\n\nNote that while we will focus here exclusively on the use LaTeX to create PDFs, Pandoc also has support for creating PDFs using ConTeXt, roff ms, or HTML (via wkhtmltopdf). See the Pandoc documentation on Creating a PDF for additional details.\n\n\n\n\nIn order to create PDFs you will need to install a recent distribution of TeX. We recommend the use of TinyTeX (which is based on TexLive), which you can install with the following command:\nquarto tools install tinytex\nSee the article on PDF Engines for details on using other TeX distributions and PDF compilation engines."
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#document-class",
    "href": "docs/output-formats/pdf-basics.html#document-class",
    "title": "PDF Basics",
    "section": "Document Class",
    "text": "Document Class\nQuarto uses KOMA Script document classes by default for PDF documents and books. KOMA-Script classes are drop-in replacements for the standard classes with an emphasis on typography and versatility.\nFor PDF documents this results in the following Pandoc options set by default:\nformat:\n  pdf:\n    documentclass: scrartcl\n    papersize: letter\nYou can set documentclass to the standard article, report or book classes, to the KOMA Script equivalents scrartcl, scrbook, and scrreprt, or to any other class made available by LaTeX packages you have installed.\nSee the Output Options section below for additional details on customizing LaTeX document options."
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#table-of-contents",
    "href": "docs/output-formats/pdf-basics.html#table-of-contents",
    "title": "PDF Basics",
    "section": "Table of Contents",
    "text": "Table of Contents\nUse the toc option to include an automatically generated table of contents in the output document. Use the toc-depth option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:\ntoc: true\ntoc-depth: 2\nYou can customize the title used for the table of contents using the toc-title option:\ntoc-title: Contents\nIf you want to exclude a heading from the table of contents, add both the .unnumbered and .unlisted classes to it:\n### More Options {.unnumbered .unlisted}"
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#section-numbering",
    "href": "docs/output-formats/pdf-basics.html#section-numbering",
    "title": "PDF Basics",
    "section": "Section Numbering",
    "text": "Section Numbering\nUse the number-sections option to number section headings in the output document. For example:\nnumber-sections: true\nUse the number-depth option to specify the deepest level of heading to add numbers to (by default all headings are numbered). For example:\nnumber-depth: 3\nTo exclude an individual heading from numbering, add the .unnumbered class to it:\n### More Options {.unnumbered}"
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#syntax-highlighting",
    "href": "docs/output-formats/pdf-basics.html#syntax-highlighting",
    "title": "PDF Basics",
    "section": "Syntax Highlighting",
    "text": "Syntax Highlighting\nPandoc will automatically highlight syntax in fenced code blocks that are marked with a language name.\nYou can specify the code highlighting style using highlight-style and specifying one of the supported themes. Supported themes include: arrow, pygments, tango, espresso, zenburn, kate, monochrome, breezedark, haddock, atom-one, ayu, breeze, dracula, github, gruvbox, monokai, nord, oblivion, printing, radical, solarized, and vim.\nFor example:\nhighlight-style: github\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color’s darkness. You may may always opt to specify the full name (e.g. atom-one-dark) to bypass this automatic behavior.\nBy default, code is highlighted using the arrow theme, which is optimized for accessibility. Here are examples of the arrow light and dark themes:\n\nLightDark"
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#output-options",
    "href": "docs/output-formats/pdf-basics.html#output-options",
    "title": "PDF Basics",
    "section": "Output Options",
    "text": "Output Options\nThere are numerous options available for customizing PDF output, including:\n\nSpecifying document classes and their options\nIncluding lists of figures and tables\nUsing the geometry and hyperref packages\nNumerous options for customizing fonts and colors.\n\nFor example, here we use a few of these options:\n---\ntitle: \"My Document\"\nformat: \n  pdf: \n    documentclass: report\n    classoption: [twocolumn, landscape]\n    lof: true\n    lot: true\n    geometry:\n      - top=30mm\n      - left=20mm\n      - heightrounded\n    fontfamily: libertinus\n    colorlinks: true\n---\nSee the Pandoc documentation on metadata variables for LaTeX for documentation on all available options."
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#citations",
    "href": "docs/output-formats/pdf-basics.html#citations",
    "title": "PDF Basics",
    "section": "Citations",
    "text": "Citations\nWhen creating PDFs, you can choose to use either the default Pandoc citation handling based on citeproc, or alternatively use natbib or BibLaTeX. This can be controlled using the cite-method option. For example:\nformat:\n  pdf: \n    cite-method: biblatex\nThe default is to use citeproc (Pandoc’s built in citation processor).\nSee the main article on using Citations with Quarto for additional details on citation syntax, available bibliography formats, etc.\n\nOptions\nWhen using natbib or biblatex you can specify the following additional options to affect how bibliographies are rendered:\n\n\n\nOption\nDescription\n\n\n\n\nbiblatexoptions\nList of options for biblatex\n\n\nnatbiboptions\nList of options for natbib\n\n\nbiblio-title\nTitle for bibliography\n\n\nbiblio-style\nStyle for bibliography"
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#raw-latex",
    "href": "docs/output-formats/pdf-basics.html#raw-latex",
    "title": "PDF Basics",
    "section": "Raw LaTeX",
    "text": "Raw LaTeX\nWhen creating a PDF document, Pandoc allows the use of raw LaTeX directives intermixed with markdown. For example:\n\\begin{tabular}{|l|l|}\\hline\nAge & Frequency \\\\ \\hline\n18--25  & 15 \\\\\n26--35  & 33 \\\\\n36--45  & 22 \\\\ \\hline\n\\end{tabular}\nRaw LaTeX commands will be preserved and passed unchanged to the LaTeX writer.\n\n\n\n\n\n\nWarning\n\n\n\nWhile it’s very convenient to use raw LaTeX, raw LaTeX is ignored when rendering to other formats like HTML and MS Word. If you plan on rendering to other formats then the example above would be better written using native markdown tables.\n\n\nIn some cases raw LaTeX will require additional LaTeX packages. The LaTeX Includes section below describes how to include \\usepackage commands for these packages in your document."
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#latex-includes",
    "href": "docs/output-formats/pdf-basics.html#latex-includes",
    "title": "PDF Basics",
    "section": "LaTeX Includes",
    "text": "LaTeX Includes\nIf you want to include additional content in your document from another file, you can use the include-in options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ninclude-in-header\nInclude contents of file, verbatim, into the LaTeX preamble.\n\n\ninclude-before-body\nInclude contents of file, verbatim, at the beginning of the document body (e.g. after the \\begin{document} command).\n\n\ninclude-after-body\nInclude contents of file, verbatim, at the end of the document body (before the the \\end{document}).\n\n\n\nYou can specify a single file for multiple files for each of these options. For example:\nformat:\n  pdf:\n    include-in-header:\n      - packages.tex\n      - macros.tex\n    include-before-body: before.tex\nYou can also include latex directly using the text sub key. For example:\nformat:\n  pdf: \n    include-in-header: \n      text: |\n        \\usepackage{eplain}\n        \\usepackage{easy-todo}\nNote the use of the | character on the line with header-includes to indicate that the value is a multi-line string.\nIf you don’t already have these packages installed locally, then Quarto will automatically install them during rendering of the document."
  },
  {
    "objectID": "docs/output-formats/pdf-basics.html#latex-output",
    "href": "docs/output-formats/pdf-basics.html#latex-output",
    "title": "PDF Basics",
    "section": "LaTeX Output",
    "text": "LaTeX Output\nIf you want Quarto to produce a LaTeX file (.tex) rather than a PDF (for example, if you want to do your own processing of the PDF) there are two ways to accomplish this:\n\nUse the latex format rather than the pdf format. For example:\nformat:\n  latex:\n    documentclass: report\n    classoption: [twocolumn, landscape]\n    lof: true\n    lot: true\nNote that all of the PDF format options documented above will also work for the latex format.\nUse the pdf format along with the keep-tex option. For example:\nformat:\n  pdf:\n    documentclass: report\n    keep-tex: true\nThis technique will produce a PDF file for preview, but will also create a .tex file alongside it that you can do subsequent processing on."
  },
  {
    "objectID": "docs/output-formats/ms-word-templates.html",
    "href": "docs/output-formats/ms-word-templates.html",
    "title": "Word Templates",
    "section": "",
    "text": "If you want to customize the appearance of MS Word output, Pandoc supports a special type of template called a reference document. Here’s an example of specifying a custom reference document for docx:\nformat:\n  docx:\n    reference-doc: custom-reference-doc.docx\nReference documents include sample text that uses all of the output styles used by Pandoc.\nTo use a reference doc template, just copy it to your document’s directory and reference it as shown above."
  },
  {
    "objectID": "docs/output-formats/ms-word-templates.html#creating-templates",
    "href": "docs/output-formats/ms-word-templates.html#creating-templates",
    "title": "Word Templates",
    "section": "Creating Templates",
    "text": "Creating Templates\nTo create a new reference doc based on the Pandoc default, execute the following command:\n$ quarto pandoc -o custom-reference-doc.docx \\\n   --print-default-data-file reference.docx\nThen, open custom-reference-doc.docx in MS Word and modify styles as you wish:\n\n\n\nYou can open the Styles pane from the HOME tab in the MS Word toolbar.\n\n\nWhen you move the cursor to a specific element in the document, an item in the styles list will be highlighted. If you want to modify the style of any type of element, you can click the drop-down menu on the highlighted item, and you will see a dialog box like this:\n\nAfter you finish modifying the styles, you can save the document and use it as the template for future Word documents."
  },
  {
    "objectID": "docs/output-formats/page-layout.html",
    "href": "docs/output-formats/page-layout.html",
    "title": "Page Layout",
    "section": "",
    "text": "By default Quarto HTML documents display content centered at a width optimized for readability (typically from 600px to 900px wide). While this is a sound default layout for traditional articles, for other types of pages (e.g. landing or index pages) you may want to use other layouts.\nThe page-layout option can be use to control the layout used. For example:\nformat: \n  html:\n    page-layout: full\nThe various page-layout options are described below."
  },
  {
    "objectID": "docs/output-formats/page-layout.html#article",
    "href": "docs/output-formats/page-layout.html#article",
    "title": "Page Layout",
    "section": "Article",
    "text": "Article\npage-layout: article\nArticle layout provides a content area with a page based grid layout that provides margins, areas for sidebars, and a reading width optimized body region. The precise size of the document regions will vary slightly depending upon the sidebar (if present) and the presence or absence of margin or complex layout elements. To learn more, checkout the guide to Article Layout."
  },
  {
    "objectID": "docs/output-formats/page-layout.html#full",
    "href": "docs/output-formats/page-layout.html#full",
    "title": "Page Layout",
    "section": "Full",
    "text": "Full\npage-layout: full\nFull layout uses the article grid system, but automatically expands the content area to use the sidebar and margin region if no content is placed within those regions. This is useful for layouts that don’t need to be constrained to reading width and that will benefit from additional horizontal space (e.g. landing or index pages)"
  },
  {
    "objectID": "docs/output-formats/page-layout.html#custom",
    "href": "docs/output-formats/page-layout.html#custom",
    "title": "Page Layout",
    "section": "Custom",
    "text": "Custom\npage-layout: custom\nCustom layout provides a simple HTML content container with no default grid system, padding, or margins. The default HTML framing provided will look this this:\n<div class=\"page-layout-custom\">\n  <!-- body content here -->\n</div>\nIn websites, custom layouts do not include navigation sidebars but do include the site navbar and footer.\n\nCSS Grid\nIf you are using page-layout: custom, you’ll likely want to utilize the Bootstrap CSS Grid layout system (which is available by default in Quarto documents) for creating more sophisticated layouts.\nFor example, here’s a simple 2-column grid:\n::: {.grid}\n\n::: {.g-col-4}\nThis column takes 1/3 of the page\n:::\n\n::: {.g-col-8}\nThis column takes 2/3 of the page\n:::\n\n:::\nBootstrap’s CSS Grid system includes facilities for responsiveness, wrapping, nesting, and fine grained customization of column behavior.\nNote that this isn’t the traditional Bootstrap grid used in older versions of Bootstrap – rather, it’s a brand new layout system introduced in Bootstrap 5.1 based on the CSS Grid standard. Quarto uses this newer system because it has more sophisticated layout capabilities akin to what LaTeX offers for print documents.\nSee the Bootstrap CSS Grid documentation for additionals details."
  },
  {
    "objectID": "docs/output-formats/html-publishing.html",
    "href": "docs/output-formats/html-publishing.html",
    "title": "Publishing HTML",
    "section": "",
    "text": "This article covers the various ways you can publish Quarto HTML documents, including:\nNote that it’s also possible to publish collections of Quarto documents as a website (see the article on publishing websites for additional details)."
  },
  {
    "objectID": "docs/output-formats/html-publishing.html#github-pages",
    "href": "docs/output-formats/html-publishing.html#github-pages",
    "title": "Publishing HTML",
    "section": "GitHub Pages",
    "text": "GitHub Pages\nGitHub Pages is a service that lets you publish a website from any GitHub repository. While the service supports publishing full websites, it’s also a perfectly suitable place to publish a single Quarto document.\nHere are the steps required to publish a Quarto article to GitHub Pages:\n\nCreate a new Git repository that will be used to host your article.\nConfigure your repository to publish the contents of the main branch (you can do this from the Pages section of your repository settings:\n\nNote that the Source is set to the root directory of the main branch.\nCreate a Quarto document named index.qmd within the repository (using this name will allow your article to be served as the default web page for the repository).\nWrite and render your article using Quarto.\nPush the article (including the HTML file generated when you rendered it) to GitHub. Your article is now published!\n\nGitHub Pages are served on the github.io domain (with your GitHub account as a sub-domain). For example, if your GitHub username is jsmith and your repository is named quarto-article then the article will be available at https://jsmith.github.io/quarto-article."
  },
  {
    "objectID": "docs/output-formats/html-publishing.html#rpubs-and-rsc",
    "href": "docs/output-formats/html-publishing.html#rpubs-and-rsc",
    "title": "Publishing HTML",
    "section": "RPubs & RStudio Connect",
    "text": "RPubs & RStudio Connect\nRPubs is a free service from RStudio for sharing documents on the web. RStudio Connect is a server product from RStudio for secure sharing of applications, reports, and plots.\nNote that all documents published to RPubs are publicly visible, so you should only publish content you want to share publicly. Unlike RPubs, RStudio Connect is a server that you run inside an organization, so is suitable for publishing content that you only want visible within your organization’s network.\nYou can publish Quarto documents using the quarto_publish_doc() function from the R quarto package. For example, here we publish a document to both RPubs and an RStudio Connect server:\nlibrary(quarto)\nquarto_publish_doc(\"mydoc.qmd\", server = \"rpubs.com\")\nquarto_publish_doc(\"mydoc.qmd\", server = \"rsc.example.com\")\nNote that once you’ve published a document to a particular server you can omit the server argument when updating the document:\nquarto_publish_doc(\"mydoc.qmd\")\nYou can also publish to RPubs and RStudio Connect directly from within RStudio. To do this, just click the Publish button  on the editor toolbar or preview window:\n\nYou should be running the latest release of RStudio (v2022.02) if you want to publish Quarto documents. This release has many other Quarto related enhancements so is highly recommended even if you aren’t using the publishing features."
  },
  {
    "objectID": "docs/output-formats/html-publishing.html#standalone-html",
    "href": "docs/output-formats/html-publishing.html#standalone-html",
    "title": "Publishing HTML",
    "section": "Standalone HTML",
    "text": "Standalone HTML\nYou can optionally render Quarto documents into self-contained HTML, whereby all of the content required to render the article (images generated by plots, required CSS and JavaScript, etc.) are bundled into a single HTML file. Use the self-contained option to do this:\nformat:\n   html:\n     self-contained: true\nThen, you can share this HTML file using the same means you use to share other document types like spreadsheets, presentations, and PDFs (e.g by uploading it to Dropbox or any other file sharing service)."
  },
  {
    "objectID": "docs/output-formats/html-publishing.html#other-services",
    "href": "docs/output-formats/html-publishing.html#other-services",
    "title": "Publishing HTML",
    "section": "Other Services",
    "text": "Other Services\nNote that any web server or web host capable of hosting a static website can equally well host a single Quarto HTML document. See the article on publishing websites for details on publishing articles on a variety of other services including Netlify, Firebase, Site44, and Amazon S3."
  },
  {
    "objectID": "docs/output-formats/html-themes.html",
    "href": "docs/output-formats/html-themes.html",
    "title": "HTML Theming",
    "section": "",
    "text": "HTML documents rendered with Quarto use Bootstrap 5 by default. This can be disabled or customized via the theme option:\ntheme: default # bootstrap 5 default\ntheme: cosmo   # cosmo bootswatch theme\ntheme: pandoc  # pandoc default html treatment\ntheme: none    # no theme css added to document\nQuarto includes 25 themes from the Bootswatch project (for example, the website uses the cosmo theme). Available themes include:\n\n\n\n\ndefault\ncerulean\ncosmo\ncyborg\ndarkly\nflatly\njournal\nlitera\nlumen\nlux\nmateria\nminty\nmorph\npulse\nquartz\nsandstone\nsimplex\nsketchy\nslate\nsolar\nspacelab\nsuperhero\nunited\nvapor\nyeti\nzephyr\n\n\n\n\n\n\n\nUse of any of these themes via the theme option. For example:\nformat:\n  html:\n    theme: united\nYou can also customize these themes or create your own new themes. Learn how to do this below in Theme Options."
  },
  {
    "objectID": "docs/output-formats/html-themes.html#basic-options",
    "href": "docs/output-formats/html-themes.html#basic-options",
    "title": "HTML Theming",
    "section": "Basic Options",
    "text": "Basic Options\nIf you are using a Bootstrap theme or the Pandoc theme, there are a set of options you can provide in document metadata to customize its appearance. These include:\n\n\n\nOption\nDescription\n\n\n\n\nmax-width\nThe maximum width occupied by page content. Defaults to 1400px for bootstrap themes and 36em for the pandoc theme.\n\n\nmainfont\nSets the font-family property for the document.\n\n\nfontsize\nSets the base CSS font-size for the document.\n\n\nfontcolor\nSets the default text color for the document.\n\n\nlinkcolor\nSets the default text color for hyperlinks.\n\n\nmonofont\nSets the font-family property for <code> elements.\n\n\nmonobackgroundcolor\nSets the background-color property for <code> elements.\n\n\nlinestretch\nSets the CSS line-height property (affects distance between lines of text, defaults to 1.5).\n\n\nbackgroundcolor\nSets the background-color for the document.\n\n\nmargin-left, margin-right, margin-top, margin-bottom\nSets the CSS margin properties for the document body.\n\n\n\nFor example. here we set the font-size a bit larger and specify that we want a bit more space between lines of text:\ntitle: \"My Document\"\nformat:\n  html: \n    theme: cosmo\n    fontsize: 1.1em\n    linestretch: 1.7"
  },
  {
    "objectID": "docs/output-formats/html-themes.html#theme-options",
    "href": "docs/output-formats/html-themes.html#theme-options",
    "title": "HTML Theming",
    "section": "Theme Options",
    "text": "Theme Options\nWhile the basic customization described above handles many common requirements, you can do extensive additional customization using SASS theme files. Bootstrap defines over 1,400 variables that control fonts, colors, padding, borders, and much more. You can see all of the variables here:\nhttps://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss\nSASS theme files can define both variables that globally set things like colors and fonts, as well as rules that define more fine grained behavior. To customize an existing Bootstrap theme with your own set of variables and/or rules, just provide the base theme and then your custom theme file(s):\ntheme:\n  - cosmo\n  - custom.scss\nYour custom.scss file might look something like this:\n/*-- scss:defaults --*/\n$h2-font-size:          1.6rem !default;\n$headings-font-weight:  500 !default;\n$body-color:            $gray-700 !default;\n\n/*-- scss:rules --*/\nh1, h2, h3, h4, h5, h6 {\n  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);\n}\nNote that the variables section is denoted by the /*-- scss:defaults --*/ comment and the rules section (where normal CSS rules go) is denoted by the /*-- scss:rules --*/ comment."
  },
  {
    "objectID": "docs/output-formats/html-themes.html#custom-themes",
    "href": "docs/output-formats/html-themes.html#custom-themes",
    "title": "HTML Theming",
    "section": "Custom Themes",
    "text": "Custom Themes\nYou can naturally also create an entirely custom theme and provide only that (in this case you will inherit from the default Bootstrap theme):\ntheme: custom.scss\nFor example, here are the theme files for the 25 built-in Bootswatch themes:\nhttps://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes\nYou can read more about the custom theming design here."
  },
  {
    "objectID": "docs/output-formats/html-themes.html#dark-mode",
    "href": "docs/output-formats/html-themes.html#dark-mode",
    "title": "HTML Theming",
    "section": "Dark Mode",
    "text": "Dark Mode\nIn addition to providing a single theme for your html output, you may also provide a light and dark theme. For example:\ntheme:\n  light: flatly\n  dark: darkly\nSetting the above themes in your _quarto.yml results in both a dark and light version of your output being available. For example:\n\n\nFlatly Themed Output\n\n\n\n\nDarkly Themed Output\n\n\nWhen providing both a dark and light mode for your html output, Quarto will automatically create a toggle to allow your reader to select the desired dark or light appearance. The toggle will automatically appear in the top right corner of your html output. When possible, the toggle will use browser local storage to maintain the user’s preference across sessions.\nThe first appearance (light or dark) elements in the theme to determine the default appearance for your html output. For example, since the light option appears first in the above example, a reader will see the light appearance by default.\nQuarto will automatically select the appropriate light or dark version of the text highlighter that you have specified when possible. For more information, see Code Highlighting.\n\n\nCustomizing Themes\nAs when providing a single theme, you may provide a custom theme for dark and light mode, or a list of scss files to customize the light and dark appearance. This website, for example uses the following to use a light cosmo theme and then customizes the cosmo theme with additional Sass variables when in dark mode:\ntheme:\n  light: cosmo\n  dark: [cosmo, theme-dark.scss]\nThe contents of theme-dark.scss which is customizing the cosmo document appearance is:\n/*-- scss:defaults --*/\n// Base document colors\n$body-bg: #181818;\n$body-color: white;\n$link-color: #75AADB;\n\n// Code blocks\n$code-block-bg-alpha: -.8;\nFor more information about available Sass variables, see HTML Customization Using Sass Variables."
  },
  {
    "objectID": "docs/output-formats/html-themes.html#sass-variables",
    "href": "docs/output-formats/html-themes.html#sass-variables",
    "title": "HTML Theming",
    "section": "Sass Variables",
    "text": "Sass Variables\nThe following Sass Variables can be specified within SCSS files (note that these variables should always be prefixed with a $ and are specified within theme files rather than within YAML options):\n\nColors\n\n\n\n\n\n\n\nVariable\nNotes\n\n\n\n\n$body-bg\nThe page background color.\n\n\n$body-color\nThe page text color.\n\n\n$link-color\nThe link color.\n\n\n$input-bg\nThe background color for HTML inputs.\n\n\n$popover-bg\nThe background color for popovers (for example, when a citation preview is shown).\n\n\n\n\n\nFonts\n\n\n\n\n\n\n\nVariable\nNotes\n\n\n\n\n$font-family-sans-serif\nThe sans-serif font family for the page.\n\n\n$font-family-monospace\nThe monospace font family for the page.\n\n\n$font-size-root\nThe base font size for the page.\n\n\n$toc-font-size\nThe font size for the page TOC.\n\n\n$h1-font-size\n$h2-font-size\n$h3-font-size\n$h4-font-size\n$h5-font-size\nFont sizes for the specified headings.\n\n\n\n\n\nCode Blocks\n\n\n\n\n\n\n\nVariable\nNotes\n\n\n\n\n$code-block-border-left\nBy default, Quarto does not display a left border on code blocks. Set this variable to a truthy value or a CSS color to enable the left border.\n\n\n$code-block-border-left-style\nThe style of the left border displayed on code blocks. Defaults to solid.\n\n\n$code-block-border-left-size\nThe thickness of the left border displayed on code blocks. Defaults to 3px;\n\n\n$code-block-padding-left\nThe amount of padding applied between the code and the border. Defaults to 0.6em.\n\n\n$code-block-bg\nBy default, Quarto sets a background on code blocks by adding transparency to the theme’s progress-bg color. Set this variable to truthy value or a CSS color.\n\n\n$code-block-bg-padding\nThe padding applied to the code block. Defaults to 0.4em.\n\n\n$code-block-bg-alpha\nThe amount to alter the transparency fo the progress-bg color. This is not used if an explicit background color is set. Defaults to -0.35.\n\n\n\n\n\nInline Code\n\n\n\n\n\n\n\nVariable\nNotes\n\n\n\n\n$code-bg\nThe background color of inline code. Defaults to a mix between the body-bg and body-color.\n\n\n$code-color\nThe text color of inline code. Defaults to a generated contrasting color against the code-bg.\n\n\n\n\n\nLayout\n\n\n\n\n\n\n\nVariable\nNotes\n\n\n\n\n$content-padding-top\nPadding that should appear before the main content area (including the sidebar, content, and TOC.\n\n\n\n\n\nNavigation\n\n\n\n\n\n\n\nVariable\nNotes\n\n\n\n\n$navbar-bg\nThe background color of the navbar. Defaults to the theme’s $primary color.\n\n\n$navbar-fg\nThe color of foreground elements (text and navigation) on the navbar. If not specified, a contrasting color is automatically computed.\n\n\n$navbar-hl\nThe highlight color for links in the navbar. If not specified, the $link-color is used or a contrasting color is automatically computed.\n\n\n$sidebar-bg\nThe background color for a sidebar. Defaults to $light except when a navbar is present or when the style is floating. In that case it defaults to the $body-bg color.\n\n\n$sidebar-fg\nThe color of foreground elements (text and navigation) on the sidebar. If not specified, a contrasting color is automatically computed.\n\n\n$sidebar-hl\nThe highlight color for links in the sidebar. If not specified, the $link-color is used.\n\n\n$footer-bg\nThe background color for a sidebar. Defaults to the $body-bg color.\n\n\n$footer-fg\nThe color of foreground elements (text and navigation) on the footer. If not specified, a contrasting color is automatically computed.\n\n\n\n\n\nCallouts\n\n\n\n\n\n\n\nVariable\nNotes\n\n\n\n\n$callout-border-width\nBy default, Quarto does not display a left border on code blocks. Set this variable to a truthy value or a CSS color to enable the left border. Defaults to 5px.\n\n\n$callout-border-scale\nThe border color of callouts computed by shifting the callout color by this amount. Defaults to 0%.\n\n\n$callout-icon-scale\nThe color of the callout icon computed by shifting the callout color by this amount. Defaults to 10%.\n\n\n$callout-margin-top\nThe amount of top margin on the callout. Defaults to 1.25rem.\n\n\n$callout-margin-bottom\nThe amount of bottom margin on the callout. Defaults to 1.25rem.\n\n\n$callout-color-<type>\nThe colors for the various types of callouts. Defaults:\n\n\n\ntype\ndefault\n\n\n\n\nnote\n$blue\n\n\ntip\n$green\n\n\ncaution\n$orange\n\n\nwarning\n$yellow\n\n\nimportant\n$red\n\n\n\n\n\n\nIn addition to the above Sass variables, Bootstrap itself supports hundreds of additional variables. You can learn more about Bootstrap’s use of Sass variables or review the raw variables and their default values."
  },
  {
    "objectID": "docs/output-formats/html-themes-more.html",
    "href": "docs/output-formats/html-themes-more.html",
    "title": "More About Quarto Themes",
    "section": "",
    "text": "As a part of Quarto, we’ve developed a simple single file format that describes declarations, variables, and rules that should be layered into Scss files when compiling them into css. The basic structure of a theme file is:\nHere is an example file:"
  },
  {
    "objectID": "docs/output-formats/html-themes-more.html#bootswatch-sass-theme-files",
    "href": "docs/output-formats/html-themes-more.html#bootswatch-sass-theme-files",
    "title": "More About Quarto Themes",
    "section": "Bootswatch Sass Theme Files",
    "text": "Bootswatch Sass Theme Files\nWe’ve merged Bootswatch themes for Bootstrap 5 into this single file theme format in our repo here:\nhttps://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes\nFrom time to time, as the Bootswatch themes are updated, we will update these merged theme files."
  },
  {
    "objectID": "docs/output-formats/html-themes-more.html#bootstrap-bootswatch-layering",
    "href": "docs/output-formats/html-themes-more.html#bootstrap-bootswatch-layering",
    "title": "More About Quarto Themes",
    "section": "Bootstrap / Bootswatch Layering",
    "text": "Bootstrap / Bootswatch Layering\nWhen using the Quarto HTML format, we allow the user to specify theme information in the document front matter (or project YAML). The theme information consists of a list of one more of\n\nA valid built in Bootswatch theme name\nA theme file (valid as described above).\n\nFor example the following would use the cosmo Bootswatch theme and provide customization using the custom.scss file:\ntheme:\n  - cosmo\n  - custom.scss\nWhen compiling the CSS for a Quarto website or HTML page, we merge any user provided theme file(s) or Bootswatch themes with the Bootstrap Scss in the following layers:\nUses\n    Bootstrap\n    Theme(s)       /*-- scss:uses --*/\n    \nFunctions\n    Bootstrap\n    Theme(s)       /*-- scss:functions --*/\n\nVariables\n    Themes(s)      /*-- scss:defaults --*/\n    Bootstrap\n    \nMixins                 \n    Bootstrap\n    Theme(s)       /* -- scss:mixins --*/\n\nRules\n    Bootstrap\n    Theme(s)       /*-- scss:rules --*/\nWe order the themes according to the order that they are specified in the YAML, maintaining the order for declarations and rules and reversing the order for variables (allowing the files specified later in the list to provide defaults variable values to the files specified earlier in the list). Layering of the example themes above would be as follows:\nUses\n    Bootstrap\n    cosmo           /*-- scss:uses --*/\n    custom.scss     /*-- scss:uses --*/\n\nFunctions\n    Bootstrap\n    cosmo           /*-- scss:functions --*/\n    custom.scss     /*-- scss:functions --*/\n\nVariables\n    custom.scss     /*-- scss:defaults --*/\n    cosmo           /*-- scss:defaults --*/\n    Bootstrap\n\nMixins\n    Bootstrap\n    cosmo            /* -- scss:mixins --*/\n    custom.scss      /* -- scss:mixins --*/\n\nRules\n    Bootstrap\n    cosmo           /*-- scss:rules --*/\n    custom.scss     /*-- scss:rules --*/"
  },
  {
    "objectID": "docs/output-formats/hugo.html",
    "href": "docs/output-formats/hugo.html",
    "title": "Hugo",
    "section": "",
    "text": "Hugo is a very popular open source website publishing system. Pages in Hugo websites are typically written in plain markdown, so don’t have a straightforward way to automatically and reproducibly incorporate computational output.\nUsing the Quarto hugo format, you can incorporate computational output (e.g. R or Python code that produces plots) into Hugo websites. This article explains how.\nSee the Hugo format reference for a complete list of all options available for Hugo output."
  },
  {
    "objectID": "docs/output-formats/hugo.html#site-config",
    "href": "docs/output-formats/hugo.html#site-config",
    "title": "Hugo",
    "section": "Site Config",
    "text": "Site Config\nThere are a couple of changes you should make to your Hugo config.toml in preparation for using Quarto with Hugo. First, make sure that .qmd and .ipynb files are not published as part of the site:\nignoreFiles = [ \"\\\\.qmd$\", \"\\\\.ipynb$\" ]\nNext, configure Hugo’s markdown renderer to allow raw HTML (as many R and Python packages will produce computational output using raw HTML rather than markdown):\n[markup.goldmark.renderer]\nunsafe= true"
  },
  {
    "objectID": "docs/output-formats/hugo.html#creating-a-page",
    "href": "docs/output-formats/hugo.html#creating-a-page",
    "title": "Hugo",
    "section": "Creating a Page",
    "text": "Creating a Page\nHugo articles and posts that use Quarto should live in their own directory (taking advantage of the Hugo Page Bundles feature). This allows any content generated/referenced by the page (e.g. plot output) to live right alongside the markdown source.\nTo add Quarto documents to a Hugo site:\n\nCreate a directory within content that will hold your Quarto article.\nAdd an index.qmd document to the directory. When rendered this will create an index.md, which in turn will ensure that Hugo treats it as a Page Bundle (automatically copying images and other referened resources to the publish directory).\nAdd the requisite Hugo front matter, then also specify format: hugo and any other required Quarto options.\n\nFor example, let’s say we wanted to create a new article named hello-quarto within the content directory. The filesystem would look like this:\nmysite/\n  content/\n    hello-quarto/\n      index.qmd\nHere’s what the source code of index.qmd might look like:\n---\ntitle: Hello, Quarto\ndate: \"2012-04-06\"\ncategories: \n  - Matplotlib\n  - Coordinates\nformat: hugo\njupyter: python3\n---\n\n## Polar Axis\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```"
  },
  {
    "objectID": "docs/output-formats/hugo.html#workflow",
    "href": "docs/output-formats/hugo.html#workflow",
    "title": "Hugo",
    "section": "Workflow",
    "text": "Workflow\n\nRendering\nGenerating pages for Hugo requires just a simple Quarto render:\nquarto render mysite/content/hello-quarto/index.qmd\nWhenever your render the index.qmd file, Quarto will execute the code in the file (writing any generated plots, etc. into the article’s directory) and then generate an index.md file that is subsequently processed by Hugo.\nNote that the index.md file is only updated when you explicitly render with Quarto. Running the hugo command to build your site just renders the index.md file — if you want to regenerate this file based on updated code or data you need to explicitly quarto render it.\n\n\nLive Preview\nTo setup a live preview workflow for a given page or post, start by running the hugo serve command for your hugo site:\nhugo serve\nThen, use quarto preview for the particular .qmd file you are working on:\nquarto preview index.qmd\nChanges to the index.qmd file will result in an updated index.md, which hugo serve will in turn pick up and use to referesh the current preview."
  },
  {
    "objectID": "docs/output-formats/hugo.html#webtex-math",
    "href": "docs/output-formats/hugo.html#webtex-math",
    "title": "Hugo",
    "section": "WebTeX Math",
    "text": "WebTeX Math\nThe hugo format renders LaTeX equations using standard dollar-delimited inline ($...$) and display ($$...$$) syntax. However, if the web environment you are publishing into doesn’t support dollar-delimited math, you can alternatively use WebTeX to display math. This is done by setting the Pandoc html-math-method to webtex. For example:\nformat:\n  hugo:\n    html-math-method: webtex\nThe webtex method works for any web page that can display images, and requires no special JavaScript or CSS. Any inline or display equations contained within your document will be converted to an image URL that requests a rendered version of the equation. For example, the following markdown:\n$x + 1$\nWill be converted to:\n![](https://latex.codecogs.com/svg.latex?x%20%2B%201)\n\nDark Background\nSVG is used as the default rendering method because it has the best overall appearance. However, if your hugo document is being rendered on a dark background, you may want to switch to PNG with a dark background specified. You can do this as follows:\nformat:\n   hugo:\n     html-math-method: \n       method: webtex\n       url: https://latex.codecogs.com/png.image?%5Cbg_black&space;"
  },
  {
    "objectID": "docs/reference/dates.html",
    "href": "docs/reference/dates.html",
    "title": "Quarto Dates and Date Formatting",
    "section": "",
    "text": "When you write a date for Quarto document, Quarto will attempt to parse a date string by trying a number of standard forms before ultimately attempting to infer the date format. Quarto will try dates formatted as follows, in the following order:\n\nMM/dd/yyyy\nMM-dd-yyyy\nMM/dd/yy\nMM-dd-yy\nyyyy-MM-dd\ndd MM yyyy\nMM dd, yyyy\nYYYY-MM-DDTHH:mm:ssZ\n\nIn addition, you may also provide date keywords, which will provide a dynamic date.\n\n\n\n\n\n\n\nKeyword\nDate\n\n\n\n\ntoday\nThe current local date, with the time portion set to 0.\n\n\nnow\nThe current local date and time.\n\n\nlast-modified\nThe last modified date and time of the file containing the date."
  },
  {
    "objectID": "docs/reference/dates.html#date-formatting",
    "href": "docs/reference/dates.html#date-formatting",
    "title": "Quarto Dates and Date Formatting",
    "section": "Date Formatting",
    "text": "Date Formatting\nWhen specifying a date format in Quarto, there are two ways to represent the format that you’d like.\n\nUsing a Date Style\nYou can specify a simple date style which will be used to format the date.\nFor example:\n---\ndate: 03/07/2005\ndate-format: long\n---\nValid styles and examples of the formatted output are as follows:\n\n\n\n\n\n\n\n\nStyle\nDescription\nExample\n\n\n\n\nfull\nA full date that includes the weekday name\nMonday, March 7, 2005\n\n\nlong\nA long date that includes a wide month name\nMarch 7, 2005\n\n\nmedium\nA medium date\nMar 7, 2005\n\n\nshort\nA short date with a numeric month\n3/7/05\n\n\niso\nA short date in ISO format\n2005-03-07\n\n\n\n\n\nUsing a Date Format\nYou can also specify a date format string that will be used to format the date. For example:\n---\ndate: 03/07/2005\ndate-format: \"MMM D, YYYY\"\nThe permissible values in this string include:\n\n\n\n\n\n\n\n\nFormat String\nOutput\nDescription\n\n\n\n\nYY\n18\nTwo-digit year\n\n\nYYYY\n2018\nFour-digit year\n\n\nM\n1-12\nThe month, beginning at 1\n\n\nMM\n01-12\nThe month, 2-digits\n\n\nMMM\nJan-Dec\nThe abbreviated month name\n\n\nMMMM\nJanuary-December\nThe full month name\n\n\nD\n1-31\nThe day of the month\n\n\nDD\n01-31\nThe day of the month, 2-digits\n\n\nd\n0-6\nThe day of the week, with Sunday as 0\n\n\ndd\nSu-Sa\nThe min name of the day of the week\n\n\nddd\nSun-Sat\nThe short name of the day of the week\n\n\ndddd\nSunday-Saturday\nThe name of the day of the week\n\n\nH\n0-23\nThe hour\n\n\nHH\n00-23\nThe hour, 2-digits\n\n\nh\n1-12\nThe hour, 12-hour clock\n\n\nhh\n01-12\nThe hour, 12-hour clock, 2-digits\n\n\nm\n0-59\nThe minute\n\n\nmm\n00-59\nThe minute, 2-digits\n\n\ns\n0-59\nThe second\n\n\nss\n00-59\nThe second, 2-digits\n\n\nSSS\n000-999\nThe millisecond, 3-digits\n\n\nZ\n+05:00\nThe offset from UTC, ±HH:mm\n\n\nZZ\n+0500\nThe offset from UTC, ±HHmm\n\n\nA\nAM PM\n\n\n\na\nam pm\n\n\n\n\nTo escape characters, wrap them in square brackets (e.g. [MM]).\nExample formats and outputs include:\n\n\n\n\n\n\n\nFormat\nOutput\n\n\n\n\nMMM D, YYYY\nMar 7, 2005\n\n\nDD/MM/YYYY\n07/03/2005\n\n\n[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]\nYYYYescape 2005-03-07T00:00:00-05:00Z\n\n\nYYYY-MM-DDTHH:mm:ssZ\n2005-03-07T00:00:00-05:00\n\n\ndddd MMM D, YYYY\nMonday Mar 7, 2005"
  },
  {
    "objectID": "docs/reference/globs.html",
    "href": "docs/reference/globs.html",
    "title": "Quarto Glob Syntax",
    "section": "",
    "text": "Quarto sometimes allows you to provide a path or paths using glob syntax, providing wildcard expansion and other behavior that makes it simple to match a list of files without having to specify each file individually. Globs may be used:\n\nWhen specifying render targets in Quarto projects (see Render Targets).\nWhen defining resources for Quarto websites (see Site Resources).\nWhen defining documents to include in a listing (see Listing Contents)."
  },
  {
    "objectID": "docs/reference/globs.html#glob-syntax",
    "href": "docs/reference/globs.html#glob-syntax",
    "title": "Quarto Glob Syntax",
    "section": "Glob Syntax",
    "text": "Glob Syntax\nThe below is a general reference of the syntax used for globs in Quarto.\n\n* - Matches everything without leaving the path segment.\n{foo,bar} - Matches foo or bar.\n[abcd] - Matches a, b, c or d.\n[a-d] - Matches a, b, c or d.\n[!abcd] - Matches any single character besides a, b, c or d.\n[[:<class>:]] - Matches any character belonging to <class>.\n\n[[:alnum:]] - Matches any digit or letter.\n[[:digit:]abc] - Matches any digit, a, b or c.\nSee https://facelessuser.github.io/wcmatch/glob/#posix-character-classes for a complete list of supported character classes.\n\n\\ - Escapes the next character for an os other than \"windows\".\n` - Escapes the next character for os set to \"windows\".\n/ - Path separator.\n\\ - Additional path separator only for os set to \"windows\".\n?(foo|bar) - Matches 0 or 1 instance of {foo,bar}.\n@(foo|bar) - Matches 1 instance of {foo,bar}. They behave the same.\n*(foo|bar) - Matches n instances of {foo,bar}.\n+(foo|bar) - Matches n > 0 instances of {foo,bar}.\n!(foo|bar) - Matches anything other than {foo,bar}.\n** - Matches any number of any path segments.\n\nMust comprise its entire path segment in the provided glob.\nSee https://www.linuxjournal.com/content/globstar-new-bash-globbing-option."
  },
  {
    "objectID": "docs/websites/website-about.html",
    "href": "docs/websites/website-about.html",
    "title": "About Pages",
    "section": "",
    "text": "Quarto makes it easy to create a simple about page for an individual or organization. When the about option is provided for a document, a special template will be used to layout the content of the current page with a custom layout designed to present a person or organization.\nFor example:\n---\ntitle: \"Finley Malloc\"\nabout:\n  template: jolla\n  image: profile.jpg\n  links:\n    - icon: twitter\n      text: twitter\n      href: https://twitter.com\n    - icon: github\n      text: Github\n      href: https://github.com\n---\n\nFinley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending  time unicycling and playing with her pet iguana.\n\n## Education\n\nUniversity of California, San Diego | San Diego, CA\nPhD in Mathematics | Sep 2011 - June 2015\n\nMacalester College | St. Paul MA\nB.A in Economics | Sep 2007 - June 2011\n\n## Experience\n\nWengo Analytics | Head Data Scientist | April 2018 - present\n\nGeoScynce | Chief Analyst | Spet 2012 - April 2018\nThe contents of this page will be laid out using the jolla template with the profile.png image, and generate a set of links for the items specified in links.\nYou can write and format the content of the page however you’d like - when the page is rendered, Quarto will use the content and options provided in the about option to create the about page, arranging the content content of the about option with the content in the page itself."
  },
  {
    "objectID": "docs/websites/website-about.html#templates",
    "href": "docs/websites/website-about.html#templates",
    "title": "About Pages",
    "section": "Templates",
    "text": "Templates\nQuarto includes 5 built in templates, drawing inspiration from the Postcards R Package. Built in templates include:\n\njolla\ntrestles\nsolana\nmarquee\nbroadside\n\nEach template will position the about elements with the content in a different layout. Select the template using the template option:\nabout:\n  template: trestles\nHere is a preview of each of the templates:\n\njollatrestlessolanamarqueebroadside\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImage\nThe image for the about page will be read from the document-level image option:\ntitle: Finley Malloc\nimage: profile.jpg\nabout:\n  template: jolla\nIn addition, you can customize how the image is displayed in the page to better meet your needs by setting the following options.\n\n\n\n\n\n\n\n\noption\ndescription\ntemplates\n\n\n\n\nimage-width\nA valid CSS width for your image.\nall\n\n\nimage-shape\nThe shape of the image on the about page. Choose from:rectangle, round, rounded\njolla, solana, trestles\n\n\n\nFor example:\ntitle: Finley Malloc\nimage: profile.png\nabout:\n  template: trestles\n  image-width: 10em\n  image-shape: round\n\n\nLinks\nYour about page also may contain a set of links to other resources about you or your organization. Each template will render these links in a slightly different way. Here are the options that you can specify for each link:\n\n\n\nOption\nDescription\n\n\n\n\nhref\nLink to file contained with the project or an external URL.\n\n\ntext\nText to display for navigation item (defaults to the document title if not provided).\n\n\nicon\nName of one of the standard Bootstrap 5 icons (e.g. “github”, “twitter”, “share”, etc.).\n\n\naria-label\nAccessible label for the navigation item."
  },
  {
    "objectID": "docs/websites/website-about.html#partial-page-content",
    "href": "docs/websites/website-about.html#partial-page-content",
    "title": "About Pages",
    "section": "Partial Page Content",
    "text": "Partial Page Content\nBy default, the about page will be generated using the entire contents of the page If you’d like, however, you may also choose to use only a portion of the page’s content to populate the about template. In this case, you can specify an id for the about page in the document front matter. When rendering the page, Quarto will find any div with that id and use the contents of that div to populate the about template. The div that provided the contents will be replaced with the formatted ‘about’ content. For example, you could write:\n---\ntitle: \"Finley Malloc\"\nabout:\n  id: hero-heading\n  template: jolla\n  image: profile.jpg\n  links:\n    - icon: twitter\n      text: twitter\n      href: https://twitter.com\n    - icon: github\n      text: Github\n      href: https://github.com\n---\n\n### This content appears above the formatted about page content.\n\n:::{#hero-heading}\n\nFinley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending  time unicycling and playing with her pet iguana.\n\n## Education\n\nUniversity of California, San Diego | San Diego, CA\nPhD in Mathematics | Sep 2011 - June 2015\n\nMacalester College | St. Paul MA\nB.A in Economics | Sep 2007 - June 2011\n\n## Experience\n\nWengo Analytics | Head Data Scientist | April 2018 - present\n\nGeoScynce | Chief Analyst | Spet 2012 - April 2018\n\n:::\n\n### This content appears below the formatted about page content."
  },
  {
    "objectID": "docs/websites/website-search.html",
    "href": "docs/websites/website-search.html",
    "title": "Website Search",
    "section": "",
    "text": "Quarto includes support for full text search of websites and books. By default, Quarto will automatically index the contents of your site and make it searchable using a locally built index. You can also configure Quarto search to use a hosted Algolia index."
  },
  {
    "objectID": "docs/websites/website-search.html#search-appearance",
    "href": "docs/websites/website-search.html#search-appearance",
    "title": "Website Search",
    "section": "Search Appearance",
    "text": "Search Appearance\nSearch is enabled by default for websites and books. If the site has a navbar the search UI will appear on the navbar, otherwise it will appear on the sidebar. You can control the location of search with the following options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlocation\nnavbar or sidebar (defaults to navbar if one is present on the page).\n\n\ntype\noverlay or textbox (overlay provides a button that pops up a search UI, textbox does search inline)\n\n\n\nFor example:\nwebsite:\n  search: \n    location: navbar\n    type: overlay\nNote that the above example reflects the default behavior so need not be explicitly specified. Note also that search is enabled by default for websites (you can disable it with search: false).\nThe overlay option displays the search UI as follows:\n\nThe textbox option displays search like this:"
  },
  {
    "objectID": "docs/websites/website-search.html#customizing-results",
    "href": "docs/websites/website-search.html#customizing-results",
    "title": "Website Search",
    "section": "Customizing Results",
    "text": "Customizing Results\nYou can use the following search options to customize how search results are displayed:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlimit\nThe number of results to display in the search results. Defaults to 20.\n\n\ncollapse-after\nThe number of sections matching a document to show before hiding additional sections behind a ‘more matches’ link. Defaults to 2.\n\n\n\ncopy-button\nIf true, the search textbox will include a small icon that when clicked will copy a url to the search results to the clipboard (this is useful if users would like to share a particular search with results). Defaults to false."
  },
  {
    "objectID": "docs/websites/website-search.html#using-algolia",
    "href": "docs/websites/website-search.html#using-algolia",
    "title": "Website Search",
    "section": "Using Algolia",
    "text": "Using Algolia\nIn addition to the built in search capability, Quarto websites can also be configured to use an external Algolia search index. When rendering a website, Quarto will produce a JSON file (search.json in the site output directory) which can be used to update an Algolia index. For more on creating indexes with Algolia, see Send and Update Your Data using Algolia.\n\nBasic Configuration\nIn order for Quarto to connect to your Algolia index, you need to provide basic connection information in your Quarto project file. You can find this connection information for your Algolia index in the Dashboard in the API Keys section. The following basic connection information is required:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nindex-name\nThe name of the index to use when performing a search.\n\n\napplication-id\nThe unique ID used by Algolia to identify your application.\n\n\nsearch-only-api-key\nThe Search-Only API key to use to connect to Algolia.\n\n\n\n\n\n\nImportant\n\n\n\nBe sure to use the Search Only API key, which provides read only access to your index and is safe to include in project files. Never use your Admin API key in a Quarto document or project.\n\n\n\n\nshow-logo\nDisplays a ‘search by Algolia’ logo in the footer of search results.\n\n\n\nFor example:\nwebsite:\n  search:\n    algolia:\n      index-name: <my-index-name>\n      application-id: <my-application-id>\n      search-only-api-key: <my-search-only-api-key>\n\n\nCustom Index Schema\nIf you are simply using the search.json file generated by Quarto as your Algolia index, the above configuration information is all that is required to set up search using Algolia.\nHowever, if you are generating an index in some other fashion, you may need to provide additional information to specify which fields Quarto should use when searching. You do this by including an index-fields key under algolia which specifies the names of specific fields in your index.\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nhref\nThe field to use to read the URL to this index entry. The user will be navigated to this URL when they select the matching search result. Note that Quarto groups results by URL (not including the anchor when grouping).\nThis field is required (either as an existing field in your index or with a mapped field name).\n\n\ntitle\nThe field to use to read the title of the index entry.\nThis field is required (either as an existing field in your index or with a mapped field name).\n\n\ntext\nThe field to use to read the text of the index entry.\nThis field is required (either as an existing field in your index or with a mapped field name).\n\n\nsection\nThe field to use to read the section of the index entry. Quarto groups results by URL and uses the section information (if present) to show matching subsections of the same document.\nThis field is optional.\n\n\n\nAny or all of the above may be specified in your Quarto project file. For example:\nwebsite:\n  search:\n    algolia:\n      index-name: <my-index-name>\n      application-id: <my-application-id>\n      search-only-api-key: <my-search-only-api-key>\n      index-fields:\n        href: url\n        section: sec\n        text: body\n\n\nAlgolia Insights\nBy default, Algolia provides a number of insights based upon the performance of your Algolia search. In addition, it may be helpful to understand more detailed tracking of the results that are viewed and clicked. You can enable click and conversion tracking using Algolia by setting the analytics-events to true:\nwebsite:\n  search:\n    algolia:\n      index-name: <my-index-name>\n      application-id: <my-application-id>\n      search-only-api-key: <my-search-only-api-key>\n      analytics-events: true\nYou can confirm that events are being properly sent to Algolia using the Event Debugger. Note that the click and conversion events use cookies to maintain an anonymous user identifier—if cookie consent is enabled, search events will only be enabled if cookie consent has been granted.\n\n\nAdvanced Configuration\nIn addition to the above configuration, you may also pass Algolia specific parameters when executing a search. For example, you may want to limit results to a particular facet or set of tags. To specify parameters, add the params key to your algolia yaml and provide params. For information about about available parameters, see Algolia’s Search API Parameters.\nFor example:\nwebsite:\n  search:\n    algolia:\n      index-name: <my-index-name>\n      application-id: <my-application-id>\n      search-only-api-key: <my-search-only-api-key>\n    index-fields:\n      href: url\n      section: sec\n      text: body\n    params:\n      tagFilters: ['tag1','tag2']"
  },
  {
    "objectID": "docs/websites/website-search.html#disabling-search",
    "href": "docs/websites/website-search.html#disabling-search",
    "title": "Website Search",
    "section": "Disabling Search",
    "text": "Disabling Search\nYou can disable search for an indvidual document by adding search: false to the document metadata. For example:\n---\ntitle: \"My Document\"\nsearch: false\n---\nIf you’d like to disable search support for an entire website, you can do so by including the following in your _quarto.yml file:\nwebsite:\n  search: false"
  },
  {
    "objectID": "docs/websites/website-listings.html",
    "href": "docs/websites/website-listings.html",
    "title": "Document Listings",
    "section": "",
    "text": "Listings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data.\nListings are useful for creating blogs, providing navigation for large numbers of documents, or any other scenario where you’d like the contents of a page to be automatically updated as documents are added, updated, and removed.\nYou can enable listings on a page using the listing option in the document front matter. This will instruct Quarto to generate additional content (the ‘listings’) when the page is rendered. For example, the following YAML in the front matter of a document:\n---\ntitle: \"Listing Example\"\nlisting: default\n---\nWill result in a listing of all documents in the directory (with the exception of the current document). It might look something like this:"
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-contents",
    "href": "docs/websites/website-listings.html#listing-contents",
    "title": "Document Listings",
    "section": "Listing Contents",
    "text": "Listing Contents\nYou can control what documents are included in the listing by using the contents option, which allows you to provide a set of input files (or globs of input files) that should be included in the listing. For each of the inputs that matches the contents of a listing, an item will be included using the metadata in the front matter of the document.\nFor example to include all the Quarto documents in the posts directory, you would write:\n---\ntitle: \"Listing Example\"\nlisting:\n  contents: posts\n---\nYou can write much more complex rules for including content by using globs and using a list of targets in the contents, such as:\n---\ntitle: \"Listing Example\"\nlisting:\n  contents:\n    - \"reports/*.qmd\"\n    - \"lab-notes/*reports.qmd\"\nReview the Quarto Glob Reference for more information about supported glob syntax.\n\n\n\n\n\n\nNote\n\n\n\nIf you provide a path to a directory, it will be treated as <directory>/** - the directory will be searched recursively for project inputs.\n\n\nIn addition to specifying lists of files or globs, contents can contain lists of metadata as well. For more about this, see Custom Listings."
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-types",
    "href": "docs/websites/website-listings.html#listing-types",
    "title": "Document Listings",
    "section": "Listing Types",
    "text": "Listing Types\nThere are three built in types of listings that you can choose from. Use the type option to choose the appearance of the listing:\n---\nlisting:\n  contents: posts\n  type: default\n---\nThe type field accepts the following values:\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ndefault\nA blog style list of items.\n\n\ntable\nA table of listings.\n\n\ngrid\nA grid of listing cards.\n\n\n\n\nDefaultGridTable\n\n\nBy default, listings will appear in full width rows that display the item’s metadata (author and date), title, description, and image.\n\n\n\nGrid style listings display a card for each item.\n\n\n\nThe table listing style provides a traditional tabular layout."
  },
  {
    "objectID": "docs/websites/website-listings.html#sorting-items",
    "href": "docs/websites/website-listings.html#sorting-items",
    "title": "Document Listings",
    "section": "Sorting Items",
    "text": "Sorting Items\nBy default, listings created from documents will be ordered by their title. Use the sort option to control the order of the listing. For example:\nlisting:\n  contents: posts\n  sort: \"date\"\nEach sort key in can include a field name and optionally either asc or desc to control whether to sort in ascending or descending order. When only the bame is specified, sorting by that field will be in ascending order.\nThe sort key can also contain one or more fields to sort by. For example:\nlisting:\n  contents: posts\n  sort:\n    - \"date\"\n    - \"title desc\"\nThis will sort the documents in the post directory first by their data in ascending order, then by their title in descending order."
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-options",
    "href": "docs/websites/website-listings.html#listing-options",
    "title": "Document Listings",
    "section": "Listing Options",
    "text": "Listing Options\nIt is possible to customize the appearance of listings using the following options for each type of listing display.\n\nDefault\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmax-items\nThe maximum number of items to include in this listing.\n\n\nimage-align\nWhether to place the image on the right or left side of the post content. Defaults to right.\n\n\nimage-height\nThe height of the image being displayed. The width is automatically determined and the image will fill the rectangle without scaling (cropped to fill).\n\n\nimage-placeholder\nThe default image for items if they have no image.\n\n\n\n\n\nGrids\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmax-items\nThe maximum number of items to include in this listing.\n\n\nimage-height\nThe height of the image being displayed. The width is automatically determined and the image will fill the rectangle without scaling (cropped to fill).\n\n\nimage-placeholder\nThe default image for items if they have no image.\n\n\ngrid-columns\nThe number of columns in the grid display. Defaults to 3.\n\n\ngrid-item-border\nWhether to display a border around the item card. Defaults to true.\n\n\ngrid-item-align\nAligns the content within the card (left, right, or center). Defaults to left.\n\n\n\n\n\nTables\n\n\n\n\n\n\n\nOptions\nDescription\n\n\n\n\nmax-items\nThe maximum number of items to include in this listing.\n\n\nimage-height\nThe height of the image being displayed. The width is automatically select and the image will fill the rectangle without scaling (cropped to fill).\n\n\nimage-placeholder\nThe default image for items if they have no image.\n\n\ntable-striped\nDisplay the table rows with alternating background colors (true or false). Defaults to false\n\n\ntable-hover\nHighlight rows of the table when the user hovers the mouse over them (true or false). Defaults to false.\n\n\nfield-links\nA list of fields that should link to the document in the table (defaults to title).\n\n\n\n\n\nAdvanced Options\n\n\n\nOption\nDescription\n\n\n\n\nfield-display-names\nA mapping that provides display name for specific fields. For example, to display the title column as ‘Report’ in a table listing you would write:\nlisting:\n  field-display-names:\n    title: \"Report\"\n\n\nmax-description-length\nThe maximum length of the description displayed in the listing (in characters). Defaults to 175.\n\n\ndate-format\nThe date format to use when displaying dates (e.g. d-M-yyyy).\nYou may either provide a date style (full, long, medium, or short) or a format string for formatting the date. The behavior of date styles varies depending upon locale, but examples in the en locale are as follows:\n\nfull\n\nSaturday, February 5, 2022\n\nlong\n\nFebruary 5, 2022\n\nmedium\n\nFeb 5, 2022\n\nshort\n\n2/5/22\n\n\nLearn more about supported date formatting values here.\n\n\n\nIn addition to the above listing wide options, each listing type has a variety of options to customize its appearance."
  },
  {
    "objectID": "docs/websites/website-listings.html#categories",
    "href": "docs/websites/website-listings.html#categories",
    "title": "Document Listings",
    "section": "Categories",
    "text": "Categories\nIn addition to displaying the listing contents, listings can also automatically add a list of categories to the page that they appear on. To enable categories you can set the categories option like:\nlisting:\n  categories: true\nwhich results in categories appearing in the right sidebar:\n\nWhen users click a category, the page will be updated to show only the listing items that match the selected category.\n\nCategory Appearance\nYou can choose between a few different display styles for categories:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nnumbered\nDisplays a list of categories in alphabetical order with the number of items in that category displayed next to the category name.\n\n\nunnumbered\nDisplay a list of categories in alphabetical order.\n\n\ncloud\nDisplays a ‘word cloud’ of categories.\n\n\n\nWhen multiple listings appear on the page, categories will be enabled based upon the option set in the first listing. If categories are enabled for the first listing, all listings on the page will contribute their item categories to the list of categories and all will be filtered when the user clicks a category."
  },
  {
    "objectID": "docs/websites/website-listings.html#feeds",
    "href": "docs/websites/website-listings.html#feeds",
    "title": "Document Listings",
    "section": "Feeds",
    "text": "Feeds\nYou can also have an RSS feed generated based upon the contents of a listing. This is great to allow your content to be syndicated or to be accessible via RSS Readers. Include a feed for your listing by including the feed option:\nlisting:\n  content: posts\n  feed: true\nWhen a feed is enabled for a listing on a page, an RSS file will automatically be generated using the name of the the file. For example, index.qmd will produce a feed at index.xml. A link to the feed will be included in the head of the page as well.\nGenerating feeds requires that the site-url be set for the site in your _quarto.yml file. For example:\nwebsite:\n  site-url: \"https://www.quarto.org\"\nYou can further customize your feed using the following options:\n\n\n\nOption\nDescription\n\n\n\n\nitems\nThe number of items to include in your feed. Defaults to 20.\n\n\ntype\nfull or partial. full, the default, includes the full contents of each document in the feed. partial includes only the first paragraph contents in the feed.\n\n\ntitle\nThe title for this feed. Defaults to the site title provided in your _quarto.yml file.\n\n\nimage\nThe image for this feed. If not specified, the image for the page the listing appears on will be used, otherwise an image will be used if specified for the site in your _quarto.yml file.\n\n\ndescription\nThe description of this feed. If not specified, the description for the page the listing appears on will be used, otherwise the description of the site will be used if specified in your _quarto.yml file.\n\n\nlanguage\nThe language of the feed. Omitted if not specified. See https://www.rssboard.org/rss-language-codes for a list of valid language codes."
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-fields",
    "href": "docs/websites/website-listings.html#listing-fields",
    "title": "Document Listings",
    "section": "Listing Fields",
    "text": "Listing Fields\nWhen reading the contents of a listing, Quarto uses the metadata read from the front matter of the document or the contents of the document itself to populate the following fields for each item:\n\n\n\n\n\n\n\nField Name\nDescription\n\n\n\n\ntitle\nThe title of the item, read from the title field of the front matter (or the first H1 of the document).\n\n\nsubtitle\nThe subtitle of the item, read from the subtitle field of the front matter.\n\n\nauthor\nThe author of the item, read from the author field of the front matter.\n\n\ndescription\nThe description of the item, read from the description or abstract field of the front matter or from the first paragraph of the document.\n\n\ndate\nThe date of the item, read from the date field of the front matter.\n\n\nimage\nThe image for this team, read from the image field of the front matter, or automatically discovered by taking the first of an image of class preview-image, an image with a file name starting with feature, cover, or thumbnail, or the first image to appear in the document.\n\n\nreading-time\nAn estimate of the reading time for this item, computed by counting the words in the item and assuming a reading speed of 200 words per minute.\n\n\ncategories\nCategories for the item, read from the categories field of the front matter.\n\n\nfilename\nThe name of the input file.\n\n\nfile-modified\nThe last modified date of this input file.\n\n\n\nDepending upon the type of listing that you are using, different fields are displayed automatically:\n\n\n\n\n\n\n\n\n\nField\nType: Default\nType: Table\nType: Grid\n\n\n\n\ntitle\nx\nx\nx\n\n\nsubtitle\nx\n\n\n\n\nauthor\nx\nx\nx\n\n\ndescription\nx\n\nx\n\n\ndate\nx\nx\nx\n\n\nimage\nx\n\nx\n\n\n\n\nCustomizing Fields\nThough specific columns are displayed by default, each of the types will allow you to display any of the above columns by using the fields options. For example, to display more fields in a table (as columns), you write:\nlisting:\n  type: table\n  contents: posts\n  fields: [image, date, title, author, reading-time]\nwhich produces:\n\n\n\nTable with custom list of fields\n\n\nEach type of listing will handle the fields in different ways.\n\nTables\n\nFor table type listings, the list of fields will be displayed as columns in the order that the fields appear in the list.\n\nDefault\n\nFor default type listings, the various fields will be placed logically, with the image in the right column, the title, subtitle, and description in the center column, and any other fields in the left column.\n\n\nGrid\n\nFor grid listings, the image, title, subtitle, reading-time, categories, description, author, and date fields will be arranged on the body of the card. The filename and file-modified fields will appear in the card footer. Any other fields will appear in a table at the bottom of the card body."
  },
  {
    "objectID": "docs/websites/website-listings.html#user-tools",
    "href": "docs/websites/website-listings.html#user-tools",
    "title": "Document Listings",
    "section": "User Tools",
    "text": "User Tools\nListings support interactive tools to allow the viewer of the listing to sort, filter, or page through listings.\n\nSorting\nUsers can use the select box to choose how to sort the items in the listing (or in the case of tables, by clicking on the column headings). By default, the sorting control will allow the user to sort by title, date, or author. You can stop this UI from being displayed to the user with the option:\nlisting:\n  sort-ui: false\nYou can control which fields are included in the sort list by providing a list of field names in the sort-ui key:\nlisting:\n  sort-ui: [title, date]\n\n\nFiltering\nListings include a filter box positioned on the top right of the listing content. The filter box allows readers to perform a ‘typeahead’ search of the listing contents. You can disable the filtering control using the option:\nlisting:\n  filter-ui: false\nBy default, if the filtering control is enabling, all fields that are being displayed in the listing will be searchable. If you’d like to limit searching / filtering to specific fields, you can do so by providing a field list in the filter-ui key:\nlisting:\n  filter-ui: [title, date]\n\n\nPagination\nListings also natively support pagination of the items. The default number of items displayed on a page depends up the listing type:\n\n\n\nListing Type\nItems Per Page\n\n\n\n\ndefault\n25\n\n\ntable\n30\n\n\ngrid\n18\n\n\n\nYou can control the number of items displayed per page using the option page-size:\nlisting:\n  page-size: 36"
  },
  {
    "objectID": "docs/websites/website-listings.html#listing-location",
    "href": "docs/websites/website-listings.html#listing-location",
    "title": "Document Listings",
    "section": "Listing Location",
    "text": "Listing Location\nBy default, listings will simply be appended to the main content region of the page. If you’d like to control where a listing appears, set an id for that listing and use that id on a corresponding div in the page. For example, updating the page used in the previous example to this:\n---\ntitle: \"Listing Example\"\nlisting:\n  id: sample-listings\n  contents: posts\n  sort: \"date desc\"\n  type: table\n---\n\nYou can review the following documents for additional information:\n\n::: {#sample-listings}\n:::\n\nLearn more about Quarto [here](https://www.quarto.com).\nResults in a listing page like:\n\n\nMultiple Listings\nYou can place any number of listings on a single page. The following would populate two listings on a single page:\n---\ntitle: Team Documents\nlisting: \n  - id: lab-reports\n    contents: \"lab-reports/*.qmd\"\n    type: table\n  - id: meeting-notes\n    contents: \"meeting-notes/*.qmd\"\n    type: table\n---\n\n## Lab Reports\n\n:::{#lab-reports}\n:::\n\n## Meeting Notes\n\n:::{#meeting-notes}\n:::"
  },
  {
    "objectID": "docs/websites/website-navigation.html",
    "href": "docs/websites/website-navigation.html",
    "title": "Website Navigation",
    "section": "",
    "text": "There are a variety of options available for providing website navigation, including:\n\nUsing top navigation (a navbar) with optional sub-menus.\nUsing side navigation with a hierarchy of pages.\nCombining top and side navigation (where top navigation links to different sections of the site each with their own side navigation).\n\nIn addition, you can add full text search to either the top or side navigation interface."
  },
  {
    "objectID": "docs/websites/website-navigation.html#top-navigation",
    "href": "docs/websites/website-navigation.html#top-navigation",
    "title": "Website Navigation",
    "section": "Top Navigation",
    "text": "Top Navigation\nTo add top-navigation to a website, add a navbar entry to the website config in _quarto.yml. For example, the following YAML:\nwebsite:\n  navbar:\n    background: primary\n    search: true\n    left:\n      - text: \"Home\"\n        file: index.qmd\n      - talks.qmd\n      - about.qmd \nResults in a navigation bar that looks something like this:\n\nAbove we use the left option to specify items for the left side of the navigation bar. You can also use the right option to specify items for the right side.\nThe text for navigation bar items will be taken from the underlying target document’s title. Note that in the above example we provide a custom text: \"Home\" value for index.qmd.\nYou can also create a navigation bar menu by including a menu (which is a list of items much like left and right). For example:\nleft:\n  - text: \"More\"\n    menu:\n      - talks.qmd\n      - about.qmd \nHere are all of the options available for top navigation:\n\n\n\nOption\nDescription\n\n\n\n\ntitle\nNavbar title (uses the site: title if none is specified). Use title: false to surpress the display of the title on the navbar.\n\n\nlogo\nLogo image to be displayed left of the title.\n\n\nbackground\nBackground color (“primary”, “secondary”, “success”, “danger”, “warning”, “info”, “light”, “dark”, or hex color)\n\n\nforeground\nForeground color (“primary”, “secondary”, “success”, “danger”, “warning”, “info”, “light”, “dark”, or hex color). The foreground color will be used to color navigation elements, text and links that appear in the navbar.\n\n\nsearch\nInclude a search box (true or false)\n\n\nleft / right\nLists of navigation items for left and right side of navbar\n\n\npinned\nAlways show the navbar (true or false). Defaults to false, and uses headroom.js to automatically show the navbar when the user scrolls up on the page.\n\n\ncollapse\nCollapse the navbar items into a hamburger menu when the display gets narrow (defaults to true)\n\n\ncollapse-below\nResponsive breakpoint at which to collapse navbar items to a hamburger menu (“sm”, “md”, “lg”, “xl”, or “xxl”, defaults to “lg”)\n\n\n\nHere are the options available for individual navigation items:\n\n\n\nOption\nDescription\n\n\n\n\nhref\nLink to file contained with the project or external URL.\n\n\ntext\nText to display for navigation item (defaults to the document title if not provided).\n\n\nicon\nName of one of the standard Bootstrap 5 icons (e.g. “github”, “twitter”, “share”, etc.).\n\n\naria-label\nAccessible label for the navigation item.\n\n\nmenu\nList of navigation items to populate a drop-down menu.\n\n\n\nFor more information on controlling the appearance of the navigation bar using HTML themes, see HTML Themes - Navigation."
  },
  {
    "objectID": "docs/websites/website-navigation.html#side-navigation",
    "href": "docs/websites/website-navigation.html#side-navigation",
    "title": "Website Navigation",
    "section": "Side Navigation",
    "text": "Side Navigation\nIf your site consists of more than a handful of documents, you might prefer to use side navigation, which enables you to display an arbitrarily deep hierarchy of articles.\nIf you are reading this page on a desktop device then you will see the default side navigation display on the left (otherwise you’ll see a title bar at the top which you can click or touch to reveal the navigation).\nTo add side navigation to a website, add a sidebar entry to the website section of _quarto.yml. For example:\nwebsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    contents:\n      - section: \"Basics\"\n        contents:\n          - index.qmd\n          - basics-knitr.qmd\n          - basics-jupyter.qmd\n      - section: \"Layout\"\n        contents:\n          - layout.qmd\n          - layout-knitr.qmd\n          - layout-jupyter.qmd\nThere are two styles of side navigation available: “docked” which shows the navigation in a sidebar with a distinct background color, and “floating” which places it closer to the main body text. Here’s what the “docked” and “floating” styles look like (respectively):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere are all of the options available for side navigation:\n\n\n\nOption\nDescription\n\n\n\n\nid\nOptional identifier (used only for hybrid navigation, described below).\n\n\ntitle\nSidebar title (uses the project title if none is specified).\n\n\nsubtitle\nOptional subtitle\n\n\nlogo\nOptional logo image\n\n\nsearch\nInclude a search box (true or false). Note that if there is already a search box on the top navigation bar it won’t be displayed on the sidebar.\n\n\ntools\nList of sidebar tools (e.g. link to github or twitter, etc.). See the next section for details.\n\n\nitems\nList of navigation items to display (typically top level items will in turn have a list of sub-items).\n\n\nstyle\n“docked” or “floating”\n\n\ntype\n“dark” or “light” (hint to make sure the text color is the inverse of the background)\n\n\nbackground\nBackground color (“none”, “primary”, “secondary”, “success”, “danger”, “warning”, “info”, “light”, “dark”, or “white”). Defaults to “light”.\n\n\nforeground\nForeground color (“primary”, “secondary”, “success”, “danger”, “warning”, “info”, “light”, “dark”, or hex color). The foreground color will be used to color navigation elements, text and links that appear in the sidebar.\n\n\nborder\nWhether to show a border on the sidebar. “true” or “false”\n\n\nalignment\nAlignment (“left”, “right”, or “center”).\n\n\ncollapse-level\nWhether to show sidebar navigation collapsed by default. The default is 2, which shows the top and next level fully expanded (but leaves the 3rd and subsequent levels collapsed).\n\n\npinned\nAlways show a title bar that expands to show the sidebar at narrower screen widths (true or false). Defaults to false, and uses headroom.js to automatically show the navigation bar when the user scrolls up on the page.\n\n\n\nFor more information on controlling the appearance of the side navigation using HTML themes, see HTML Themes - Navigation.\n\nSidebar Tools\nIn addition to traditional navigation, the sidebar can also display a set of tools (e.g. social actions, github view or edit actions, etc.) A tool definition consists of an icon name and an href to follow when clicked. For icon, use the icon name of any of the 1,300+ Bootstrap Icons.\nFor example:\n\n\n\nwebsite:\n  sidebar:\n    tools:\n      - icon: twitter\n        href: https://twitter.com\n      - icon: github\n        menu:\n          - text: Source Code\n            url:  https://code.com\n          - text: Report a Bug\n            url:  https://bugs.com"
  },
  {
    "objectID": "docs/websites/website-navigation.html#hybrid-navigation",
    "href": "docs/websites/website-navigation.html#hybrid-navigation",
    "title": "Website Navigation",
    "section": "Hybrid Navigation",
    "text": "Hybrid Navigation\nIf you have a website with dozens or even hundreds of pages you will likely want to use top and side navigation together (where the top navigation links to various sections, each with their own side navigation).\nTo do this, provide a list of sidebar entries and give them each an id, which you then use to reference them from the navbar. For example, if you are using the Diátaxis Framework for documentation, you might have separate sections for tutorials, how-to guides, explanations, and reference documents:\n\nYour site configuration might look something like this:\nwebsite:\n  navbar:\n    search: true\n    left:\n      - text: \"Home\"\n        file: index.qmd\n      - sidebar:tutorials\n      - sidebar:howto\n      - sidebar:fundamentals\n      - sidebar:reference\n\n  sidebar:\n    - id: tutorials\n      title: \"Tutorials\"\n      style: \"docked\"\n      background: light\n      collapse-level: 2\n      contents: \n        # navigation items\n        \n    - id: howto\n      title: \"How-To\"\n      contents:\n        # navigation items\n        \n    - id: fundamentals\n      title: \"Fundamentals\"\n      contents: :\n        # navigation items\n        \n    - id: reference\n      title: \"Reference\"\n      contents: \n        # navigation items\n    \nNote that the first sidebar definition contains a few options (e.g. style and background). These options are automatically inherited by the other sidebars."
  },
  {
    "objectID": "docs/websites/website-navigation.html#page-navigation",
    "href": "docs/websites/website-navigation.html#page-navigation",
    "title": "Website Navigation",
    "section": "Page Navigation",
    "text": "Page Navigation\nIf you have a website with several pages in a section or subsection, it is often convenient to offer the user the ability to navigate to the next page (or previous page) at the bottom of the page that they’ve just finished reading. You can enable this using:\nwebsite:\n  page-navigation: true\nWhen enabled, page navigation will be displayed at the bottom of the page whenever there is a next or previous page (including in the next or previous section). This option is enabled by default for books but not for websites.\n\nSeparators\nIf you include a page separator in the sidebar (either between sections or items), page navigation controls will not appear to continue pagination across the separator. For example, in the following sidebar:\nwebsite:\n  sidebar:\n    contents:\n      - section: \"First Section\"\n      - contents:\n        - href: document1.qmd\n        - href: document2.qmd\n        - href: document3.qmd\n      - section: \"---\"\n      - section: \"Second Section\"\n        contents:\n          - href: document4.qmd\n          - href: document5.qmd\n          - href: document6.qmd\nWhen the user reaches the bottom of document3.qmd, they will see previous navigation to go back to document2.qmd, but they will not see next navigation to continue onto document 4. This behavior is useful when you have sections of contents that don’t naturally flow together in sequential order. Use the separator to denote this in the sidebar with a horizontal line and to break up pagination."
  },
  {
    "objectID": "docs/websites/website-navigation.html#page-footer",
    "href": "docs/websites/website-navigation.html#page-footer",
    "title": "Website Navigation",
    "section": "Page Footer",
    "text": "Page Footer\nUse the page-footer option to provide a common footer for all of the pages in a website. The simplest footer just provides text that will be centered and displayed in a lighter typeface:\nwebsite:\n  page-footer: \"Copyright 2021, Norah Jones\" \nYou can alternatively target the left, right, and center regions of the footer individually:\nwebsite:\n  page-footer: \n    left: \"Copyright 2021, Norah Jones\" \n    right: \n      - icon: github\n        href: https://github.com/\n      - icon: twitter \n        href: https://twitter.com/ \nNote for the right region of the footer we included navigational items for GitHub and Twitter rather than text. You can include navigational items in any region of the footer.\nYou can use the background, foreground, and border options to further control the appearance of the footer. By default, the footer has no background color and a top border. To eliminate the border you would do this:\nwebsite:\n  page-footer:\n    border: false\nTo use a light background (e.g. to match a navigation bar) you would do this:\nwebsite:\n  page-footer:\n    background: light\nUnless specified, the color (foreground) used for elements that appear in the footer will be automatically determined by using a color that contrasts with the footer background."
  },
  {
    "objectID": "docs/websites/website-navigation.html#hiding-navigation",
    "href": "docs/websites/website-navigation.html#hiding-navigation",
    "title": "Website Navigation",
    "section": "Hiding Navigation",
    "text": "Hiding Navigation\nFor some pages (especially those with a completely custom layout) you can hide navigation altogether (navbar, sidebar, or both). In these case, add the following to the page front matter:\n# Hides the sidebar on this page\nsidebar: false\n\n# Hides the navbar on this page\nnavbar: false"
  },
  {
    "objectID": "docs/websites/website-navigation.html#reader-mode",
    "href": "docs/websites/website-navigation.html#reader-mode",
    "title": "Website Navigation",
    "section": "Reader Mode",
    "text": "Reader Mode\nIf you’d like users to be able to hide the side navigation and table of contents and have a more focused reading experience, you can enabled reader-mode. When enabled, a reader-mode toggle will appear on the navbar, if present, or on the sidebar. When pressed, the toggle will ‘roll up’ the sidebar and table of contents.\n\nTo enable reader-mode, use the following in your project:\nwebsite:\n  reader-mode: true"
  },
  {
    "objectID": "docs/websites/website-navigation.html#site-search",
    "href": "docs/websites/website-navigation.html#site-search",
    "title": "Website Navigation",
    "section": "Site Search",
    "text": "Site Search\nYou can add site search by including search: true in either your site-navbar or site-sidebar configuration. For example:\nwebsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    items:\n      - text: \"Basics\"\n        contents:\n          - index.qmd\n          - basics-jupyter.md\n        # etc"
  },
  {
    "objectID": "docs/websites/website-navigation.html#github-links",
    "href": "docs/websites/website-navigation.html#github-links",
    "title": "Website Navigation",
    "section": "GitHub Links",
    "text": "GitHub Links\nYou can add various links (e.g. to edit pages, report issues, etc.) to the GitHub repository where your site source code is hosted. To do this, add a repo-url along with one or more actions in repo-actions. For example:\nwebsite:\n  repo-url: https://github.com/quarto-dev/quarto-demo\n  repo-actions: [edit, issue]\nThe links will be displayed immediately below the page table of contents:\n\nBy default, the main branch will be used for generating links. You can specify an alternate branch using the repo-branch option."
  },
  {
    "objectID": "docs/websites/website-navigation.html#redirects",
    "href": "docs/websites/website-navigation.html#redirects",
    "title": "Website Navigation",
    "section": "Redirects",
    "text": "Redirects\nIf you rename or move a page on your site, you may want to create redirects from the old URLs so that existing links don’t break. You can do this by adding aliases from old pages to renamed pages.\nFor example, let’s say you renamed page.qmd to renamed-page.qmd. You would add the following aliases entry to renamed-page.qmd to create the redirect:\n---\ntitle: \"Renamed Page\"\naliases:\n  - page.html\n---\nThis can also be useful for situations where you re-organize content on your site into a different directory hierarchy or break one large article into smaller ones. For this case, you may want to add the URL hash of the section that you have broken into a new page. For example:\n---\ntitle: \"Learning More\"\naliases:\n  - overview.html#learning-more\n---\n\n\n\n\n\n\nTip\n\n\n\nDepending on where you are deploying your site there may be more powerful tools available for defining redirects based on patterns. For example, Netlify _redirects files or .htaccess files. Search your web host’s documentation for “redirects” to see if any of these tools are available."
  },
  {
    "objectID": "docs/websites/website-navigation.html#pages-404",
    "href": "docs/websites/website-navigation.html#pages-404",
    "title": "Website Navigation",
    "section": "404 Pages",
    "text": "404 Pages\nWhen a browser can’t find a requested web page, it displays a 404 error indicating that the file can’t be found. Browser default 404 pages can be pretty stark, so you may want to create a custom page with a more friendly message and perhaps pointers on how users might find what they are looking for.\nMost web serving platforms (e.g. Netlify, GitHub Pages, etc.) will use a file named 404.html in the root of your website as a custom error page if you provide it. You can include a custom 404 page in a Quarto website by creating a markdown file named 404.qmd in the root of your project. For example:\n---\ntitle: Page Not Found\n---\n\nThe page you requested cannot be found (perhaps it was moved or renamed).\n\nYou may want to try searching to find the page's new location.\nNote that you can use HTML alongside markdown within your 404.qmd file in order to get exactly the appearance and layout you want.\nYour 404 page will appear within the chrome of your site (e.g. fonts, css, layout, navigation, etc.). This is so that users don’t feel that they’ve irrecoverably “left” your site when they get a 404 error. If you don’t want this behavior, then provide a 404.html rather than 404.qmd.\nHere are some examples of how various popular websites handle custom 404 pages: https://blog.fluidui.com/top-404-error-page-examples/.\n\nNon-Root Site Paths\nIf your website is served from the root of a domain (e.g. https://example.com/) then simply providing a 404.qmd file as described above is all that’s required to create a custom 404 page.\nHowever, if your website is not served from the root of a domain then you need to provide one additional bit of configuration to make sure that resources (e.g. your site’s CSS) are resolved correctly within 404 pages.\nFor example, if your site is served from https://example.com/mysite/ then you’d add the following to your project website configuration within _quarto.yml:\nwebsite:\n  title: \"My Site\"\n  site-path: \"/mysite/\"\nNote that if you are already providing a site-url (which is required for generation of sitemaps and social metadata preview images) then it’s enough to simply include the path within the site-url:\nwebsite:\n  title: \"My Site\"\n  site-url: \"https://example.com/mysite/\""
  },
  {
    "objectID": "docs/websites/publishing-websites.html",
    "href": "docs/websites/publishing-websites.html",
    "title": "Publishing Websites",
    "section": "",
    "text": "There are a wide variety of ways to publish Quarto websites. Website content is by default written to the _site sub-directory (you can customize this using the output-dir option). Publishing is simply a matter of copying the output directory to a web server or web hosting service.\nBelow we describe several convenient options for Quarto website deployment including GitHub Pages, Netlify, RStudio Connect, Firebase, Site44, and Amazon S3. We’ll mostly defer to the documentation provided by the various services, but will note any Quarto website specific configuration required."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#rendering-for-publish",
    "href": "docs/websites/publishing-websites.html#rendering-for-publish",
    "title": "Publishing Websites",
    "section": "Rendering for Publish",
    "text": "Rendering for Publish\nThe most important thing you should be sure to do before publishing is a final render of your project:\nquarto render\nIf you are publishing a book you’ll want to add the --to all argument to ensure that all output formats (e.g. PDF, EPUB) have up to date content:\nquarto render --to all\nThis is particularly important to remember because incremental changes you make when using the development server aren’t rendered into the output directory. To ensure that your output is up to date before publishing you should always do a full quarto render."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#github-pages",
    "href": "docs/websites/publishing-websites.html#github-pages",
    "title": "Publishing Websites",
    "section": "GitHub Pages",
    "text": "GitHub Pages\nGitHub Pages is a service that lets you publish a website from any GitHub repository. There are a few configuration steps required to host a Quarto website using GitHub Pages:\n\nCreate a file named .nojekyll in your repository (this is required to disable some processing of HTML files that GitHub does by default). You can do this with the following:\ntouch .nojekyll\nIf you are using Windows Powershell, you can do this with:\nni  .nojekyll\nSet the output-dir within your _quarto.yml project file to “docs”:\nproject:\n  type: website\n  output-dir: docs\nConfigure your gh-pages to serve content from the “docs” directory:\n\n\nSee the GitHub Pages documentation for additional details on creating and deploying websites with GitHub."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#netlify",
    "href": "docs/websites/publishing-websites.html#netlify",
    "title": "Publishing Websites",
    "section": "Netlify",
    "text": "Netlify\nNetlify is a popular website hosting service that allows for both direct upload of website files or integrated publishing from Git repositories (GitHub, GitLab, or Bitbucket) via commit-hooks.\nIf you are using Netlify Git integration, be sure to set the publish directory to the output directory of your website (_site by default but modifiable via the output-dir metadata value). For example:"
  },
  {
    "objectID": "docs/websites/publishing-websites.html#rstudio-connect",
    "href": "docs/websites/publishing-websites.html#rstudio-connect",
    "title": "Publishing Websites",
    "section": "RStudio Connect",
    "text": "RStudio Connect\nRStudio Connect is a server product from RStudio for secure sharing of websites, applications, reports, and plots.\nUnlike the other website publishing options described here, RStudio Connect is a server that you run inside an organization, so is suitable for publishing content that you only want visible within your organization’s network as opposed to visible to the entire internet.\nYou can deploy a Quarto website to RStudio Connect from the command line using the quarto_publish_site() function from the R quarto package. For example:\nlibrary(quarto)\nquarto_publish_site(server = \"https://rsc.example.com\")\nNote that once you’ve published the site for the first time you can omit the server argument:\nquarto_publish_site()\nYou can also publish to RStudio Connect directly from within RStudio. To do this, just click the Publish button  on the editor toolbar or preview window:\n\nFor the time being Publish finished website only is the only option supported for publishing Quarto websites to RStudio Connect. Support for publishing websites with source code (so they can be rendered on the server) will be added to an upcoming release of RStudio Connect.\n\n\n\n\n\n\nNote\n\n\n\nYou should be running the latest release of RStudio (v2022.02) if you want to publish Quarto websites. The preview release has many other Quarto related enhancements so is highly recommended even if you aren’t using the publishing features."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#google-firebase",
    "href": "docs/websites/publishing-websites.html#google-firebase",
    "title": "Publishing Websites",
    "section": "Google Firebase",
    "text": "Google Firebase\nGoogle Firebase has a web hosting service that enables easy deployment of websites using a set of command line tools.\nFirebase websites by default deploy content from the public directory of the Firebase project directory. This means that you should set the output-dir to \"public\" within _quarto.yml:\nproject:\n  type: website\n  output-dir: public"
  },
  {
    "objectID": "docs/websites/publishing-websites.html#site44",
    "href": "docs/websites/publishing-websites.html#site44",
    "title": "Publishing Websites",
    "section": "Site44",
    "text": "Site44\nSite44 is a service that allows you to publish websites from within Dropbox folders. Site44 creates a Dropbox/Apps/site44 directory, and any folders within that directory are published as websites.\nThe recommended workflow for deploying Quarto websites to Site44 is to develop your website in a separate project directory, and then, when it’s ready for final publishing, copy the contents of the _site directory to the folder for your website."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#amazon-s3",
    "href": "docs/websites/publishing-websites.html#amazon-s3",
    "title": "Publishing Websites",
    "section": "Amazon S3",
    "text": "Amazon S3\nIf you are a user of Amazon Web Services you can serve your website directly from Amazon S3. Note however that this option is a bit more technically involved than GitHub Pages, Netlify, or Site44. See the article on Hosting a Static Website on Amazon S3 for additional details."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#other-services",
    "href": "docs/websites/publishing-websites.html#other-services",
    "title": "Publishing Websites",
    "section": "Other services",
    "text": "Other services\nAny web server or web host can be used to deploy a Quarto website. Here’s a recent CNET roundup of other web hosts you could consider. You can also deploy a Quarto website on any internal (intranet) web server."
  },
  {
    "objectID": "docs/websites/website-blog.html",
    "href": "docs/websites/website-blog.html",
    "title": "Creating a Blog",
    "section": "",
    "text": "Quarto websites include integrated support for blogging. Blogs consist of a collection of posts along with a navigational page that lists them in reverse chronological order. Blogs can include a custom about page, publish an RSS feed, and use a wide variety of themes.\nYou can create websites that consist entirely of a single blog, websites that have multiple blogs, or you can add a blog to a website that contains other content."
  },
  {
    "objectID": "docs/websites/website-blog.html#blog-projects",
    "href": "docs/websites/website-blog.html#blog-projects",
    "title": "Creating a Blog",
    "section": "Blog Projects",
    "text": "Blog Projects\nTo create a new blog, use the quarto create-project command with --type website:blog. For example, to create a blog within the directory myblog you would do this:\nquarto create-project myblog --type website:blog\nThis will result in the directory myblog being populated with a website that serves a single blog:\nCreating project at myblog:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n\n\n\n\n\n\nNote\n\n\n\nIf you are using RStudio, you can alternatively use the New Project command to create a Quarto Blog. Note that this feature is only available in the preview release of RStudio.\n\n\nHere’s a summary of the key files created within the project:\n\n\n\nFile\nDescription\n\n\n\n\n_quarto.yml\nQuarto project file.\n\n\nindex.qmd\nBlog home page.\n\n\nabout.qmd\nBlog about page.\n\n\nposts/\nDirectory containing posts\n\n\nposts/_metadata.yml\nShared options for posts\n\n\nstyles.css\nCustom CSS for website\n\n\n\nLet’s take a closer look at the various components of the project."
  },
  {
    "objectID": "docs/websites/website-blog.html#home-page",
    "href": "docs/websites/website-blog.html#home-page",
    "title": "Creating a Blog",
    "section": "Home Page",
    "text": "Home Page\nThe home page is a listing page for all of the documents in the posts directory:\n\nHere’s the source code for the home page:\n---\ntitle: \"myblog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n---\nWhen you render a new post, the listing page will automatically updated, adding the most recent post to the top of the list.\n\n\n\n\n\n\nWarning\n\n\n\nIt is not recommended that you use dynamic dates (for example today or last-modified) in your blog posts. This will cause the order of your blog and feed to be changed each time the document is rendered or modified.\n\n\nSee the article on Listing Pages to learn more about customizing listings, including use a grid layout rather than the default shown above.\n\nCategories\nThe listing page is configured to enable categories, which display in the right margin of the page:\n---\ntitle: \"myblog\"\nlisting:\n  # (additional metadata excluded for brevity)\n  categories: true\n---\nThe categories are read from the front matter of documents included in the listing. For example, here is sample post metadata that includes categories:\n---\ntitle: \"Post With Code\"\ndescription: \"Post description\"\nauthor: \"Fizz McPhee\"\ndate: \"5/22/2021\"\ncategories:\n  - news\n  - code\n  - analysis\n---\nSee the article on Categories to learn more."
  },
  {
    "objectID": "docs/websites/website-blog.html#about-page",
    "href": "docs/websites/website-blog.html#about-page",
    "title": "Creating a Blog",
    "section": "About Page",
    "text": "About Page\nThe about.qmd document includes additional information on the blog and its author. For example:\n\nHere’s what the source code of an about.qmd might look like:\n---\ntitle: \"About\"\nimage: profile.jpg\nabout:\n  template: jolla\n  links:\n    - icon: twitter\n      text: Twitter\n      href: https://twitter.com\n    # (additional links excluded for brevity)\n---\n\n## About this blog\n\nThis is the contents of the about page for my blog.\nSee the article on About Pages to learn about the various options available for customizing page output."
  },
  {
    "objectID": "docs/websites/website-blog.html#posts-directory",
    "href": "docs/websites/website-blog.html#posts-directory",
    "title": "Creating a Blog",
    "section": "Posts Directory",
    "text": "Posts Directory\nThe posts that make up the contents of the blog are located in the posts directory.\nAdd a new post to your blog by creating a sub-directory within posts, and adding an index.qmd file to the directory. That qmd file is the new blog post and when you render that, the blog home page will automatically update to include the newest post at the top of the listing.\n\nDrafts\nAdd draft: true to the document options if you’d like a post to not be included in the listing, site map, or site search. For example:\n---\ntitle: \"My Post\"\ndescription: \"Post description\"\nauthor: \"Fizz McPhee\"\ndate: \"5/22/2021\"\ndraft: true\n---\nTo publish the post when it is complete, simply remove draft: true from the document options and then render it.\n\n\nFreezing Posts\nBlogs posts that contain executable code often have the problem that posts created last year can’t be rendered this year (for example, because the packages used by the post have changed). A similar problem can also arise when a blog has multiple contributors and not everyone has the right software (or the right versions) to render all of the posts. Finally, posts that include computations can often take a while to render, and you don’t want the cumulative time required to render the site to grow too large.\nThe solution to these problems is to freeze the output of computational blog posts. When a post is rendered with freeze: true, the markdown output from the the underlying engine (e.g. Jupyter or Knitr) is saved. When the entire site is rendered these computations are not re-run, but rather read from the previously frozen results.\nThe only time an article with freeze: true is rendered is when you explicitly re-render it. By specifying this option for blog posts you can ensure that posts rendered now will always re-render well with the rest of the site, even if the software required to originally render them isn’t available.\nIn the default blog we include a file (_metadata.yml) that establishes shared metadata for all documents within the posts directory. In this file, we specify that we want freeze: true set by default for all posts:\n# options apply to all posts in this folder\n\n# freeze computational output\nfreeze: true\nSee the article on the freeze option to learn more about freezing computational output within websites."
  },
  {
    "objectID": "docs/websites/website-blog.html#themes",
    "href": "docs/websites/website-blog.html#themes",
    "title": "Creating a Blog",
    "section": "Themes",
    "text": "Themes\nBlogs can use any of the 25 Bootswatch themes included with Quarto. You can also create your own themes. The default blog generated by quarto create-project uses the cosmo theme. Here are links to the available themes along with thumbnails of what the simple default blog looks like under a few of them:\n\n\n\n\ndefault\ncerulean\ncosmo\ncyborg\ndarkly\nflatly\njournal\nlitera\nlumen\nlux\nmateria\nminty\nmorph\npulse\nquartz\nsandstone\nsimplex\nsketchy\nslate\nsolar\nspacelab\nsuperhero\nunited\nvapor\nyeti\nzephyr\n\n\n\nlitera\n\n\n\n\n\nsolar\n\n\n\n\n\nmorph"
  },
  {
    "objectID": "docs/websites/website-blog.html#rss-feed",
    "href": "docs/websites/website-blog.html#rss-feed",
    "title": "Creating a Blog",
    "section": "RSS Feed",
    "text": "RSS Feed\nBlogs typically include an RSS feed that allows their content to be easily syndicated to feed readers and other websites. You can enable RSS for a blog by doing the following:\n\nIn the quarto.yml file, add a site-url and description to the website key (without these options being set in the project file, Quarto cannot generated a feed). For example:\nwebsite:\n  title: \"myblog\"\n  site-url: https://www.myblogexample.io\n  description: \"A great sample blog\"\nIn your blog home page index.qmd add the feed: true option to the listing. For example:\n---\ntitle: \"myblog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n  feed: true\n---\n\nNow, when your site is rendered, an RSS feed will also be generated. To learn more, see the article on RSS Feeds.\n\n\n\n\n\n\nIncluding an RSS Link on the Navbar\n\n\n\nYou can add an RSS link to your navbar by including the following in your _quarto.yml project file. For example:\nwebsite:\n  title: \"myblog\"\n  site-url: https://www.myblogexample.io\n  description: \"A great sample blog\"\n  navbar:\n    right:\n      - icon: rss\n        href: index.xml"
  },
  {
    "objectID": "docs/websites/website-blog.html#publishing",
    "href": "docs/websites/website-blog.html#publishing",
    "title": "Creating a Blog",
    "section": "Publishing",
    "text": "Publishing\nThere are a wide variety of ways to publish Quarto blogs. Blog content is by default written to the _site sub-directory. Publishing is simply a matter of copying this directory to a web server or web hosting service.\nThe article on Publishing Websites describes in more detail how to publish to the following services:\n\nGitHub Pages\nNetlify\nRStudio Connect\nFirebase\nSite44\nAmazon S3"
  },
  {
    "objectID": "docs/websites/website-blog.html#subscriptions",
    "href": "docs/websites/website-blog.html#subscriptions",
    "title": "Creating a Blog",
    "section": "Subscriptions",
    "text": "Subscriptions\nYou may want to allow readers of your blog to subscribe to updates via email. You can use a third party email service to manage and send these emails.\nThird party email services will typically take your RSS Feed as input (e.g. https://https://www.myblogexample.io/index.xml) and provide HTML for a subscription widget that you can place on your blog. A good place to locate that widget is often right margin of your blog.\nHere are the steps required to add a subscription widget:\n\nUse your email service features to generate the HTML for your subscription widget. MailChimp, for example, provides HTML like this for a minimal subscription widget.\n<span style=\"font-weight: 600;\">Subscribe</span>\n\n<!-- Begin Mailchimp Signup Form -->\n<link href=\"http://cdn-images.mailchimp.com/embedcode/slim-10_7_dtp.css\" rel=\"stylesheet\" type=\"text/css\">\n<style type=\"text/css\">\n    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif;  width:170px;}\n    /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block.\n       We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */\n    #mc-embedded-subscribe-form{margin-left:-5px;}\n</style>\n<div id=\"mc_embed_signup\">\n<form action=\"<site_url>\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" class=\"validate\" target=\"_blank\" novalidate>\n    <div id=\"mc_embed_signup_scroll\">\n\n    <input type=\"email\" value=\"\" name=\"EMAIL\" class=\"email\" id=\"mce-EMAIL\" placeholder=\"email address\" required>\n    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\n    <div style=\"position: absolute; left: -5000px;\" aria-hidden=\"true\"><input type=\"text\" name=\"b_f718424fc5df77c22533bdaa6_a3c37fb57b\" tabindex=\"-1\" value=\"\"></div>\n        <div class=\"optionalParent\">\n            <div class=\"clear foot\" style=\"margin-top: 10px;\">\n                <input type=\"submit\" value=\"Subscribe\" name=\"subscribe\" id=\"mc-embedded-subscribe\" class=\"button\">\n                <p class=\"brandingLogo\"></p>\n            </div>\n        </div>\n    </div>\n</form>\n</div>\n\n<!--End mc_embed_signup-->\n\n\n\n\n\n\nWarning\n\n\n\nThe above widget HTML will not work in your blog as the subscription HTML needs to contain value specific to your blog. See your email service provider’s instructions for generating a subscription widget.\n\n\nCreate the file subscribe.html in the root of your project.\nPaste the HTML for your subscription widget into subscribe.html and save the file.\nAdd subscribe.html to the margin-header in your _quarto.yml file:\nwebsite:\n  # (additional metadata excluded for brevity)\n  margin-header: subscribe.html\n\nThe result looks like this:"
  },
  {
    "objectID": "docs/websites/website-tools.html",
    "href": "docs/websites/website-tools.html",
    "title": "Website Tools",
    "section": "",
    "text": "You can provide standard headers and footers for pages on your site. These can apply to the main document body or to the sidebar. Available options include:\n\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\nbody-header\nMarkdown to insert at the beginning of each page’s body (below the title and author block).\n\n\nbody-footer\nMarkdown to insert below each page’s body.\n\n\nmargin-header\nMarkdown to insert above right margin content (i.e. table of contents).\n\n\nmargin-footer\nMarkdown to insert below right margin content.\n\n\n\nFor example:\nbody-header: | \n  This page brought to you by <https://example.com>\nmargin-header: |\n  ![Logo image](logo.png)"
  },
  {
    "objectID": "docs/websites/website-tools.html#social-metadata",
    "href": "docs/websites/website-tools.html#social-metadata",
    "title": "Website Tools",
    "section": "Social Metadata",
    "text": "Social Metadata\nYou can enhance your website and the content that you publish to it by including additional types of metadata, including:\n\nFavicon\nTwitter Cards\nOpen Graph\n\n\nFavicon\nThe favicon for your site provides an icon for browser tabs and other sites that link to yours. Use the favicon option to provide the path to a favicon image. For example:\nwebsite:\n  favicon: logo.png\n\n\nTwitter Cards\nTwitter Cards provide an enhanced appearance when someone links to your site on Twitter. When a link to your site is included in a Tweet, Twitter automatically crawls your site and fetches any Twitter Card metadata. To enable the automatic generation of Twitter Card metadata for your site, you can add the following to your _quarto.yml configuration file:\nwebsite:\n  twitter-card: true\nIn this case, Quarto will automatically generate a title, description, and preview image for the content. For more information about how Quarto finds preview images, see Preview Images.\nYou may also provide additional metadata to be used when generating the Twitter Card, including:\n\n\n\nKey\nDescription\n\n\n\n\ntitle\nThe title of the page. Quarto will automatically use the title metadata from the page metadata. If you’d like you can override this just for the Twitter Card by including a title in the twitter-card metadata.\n\n\ndescription\nA short description of the content. Quarto will automatically use the description metadata from the page metadata. If you’d like you can override this just for the Twitter Card by including a description in the twitter-card metadata.\n\n\nimage\nThe path to a preview image for this content. By default, Quarto will use the image value from the site: metadata. If you provide an image, you may also optionally provide an image-width and image-height to improve the appearance of your Twitter Card.\nIf image is not provided, Quarto will automatically attempt to locate a preview image. For more information, see Preview Images.\n\n\ncard-style\nEither summary or summary_large_image. If this is not provided, the best style will automatically selected based upon other metadata. You can learn more about Twitter Card styles here.\n\n\ncreator\n@username of the content creator. Note that strings with special characters such as @ must be quoted in yaml.\n\n\nsite\n@username of website. Note that strings with special characters such as @ must be quoted in yaml.\n\n\n\nHere is a more comprehensive example of specifying Twitter Card metadata in a quarto.yml file:\nwebsite:\n  twitter-card:\n    creator: \"@dragsonstyle\"\n    site: \"@rstudio\"\nQuarto will automatically merge global metadata found in the website: twitter-card key with any metadata provided in the document itself in the twitter-card key. This is useful when you need to specify a mix of global options (for example, site) with per document options such as title or image.\n\n\nOpen Graph\nThe Open Graph protocol is a specification that enables richer sharing of links to articles on the web. It will improve the previews of your content when a link to it is pasted into applications like Slack, Discord, Facebook, Linkedin, and more. To enable the automatic generation of Open Graph metadata for your content, include the following in your _quarto.yml configuration file:\nwebsite:\n  opengraph: true\nIn this case, Quarto will automatically generate a title, description, and preview image for the content. For more information about how Quarto finds preview images, see Preview Images.\nYou may also provide additional metadata to be used when generating the Open Graph metadata, including:\n\n\n\nKey\nDescription\n\n\n\n\ntitle\nThe title of the page. Quarto will automatically use the title metadata from the page metadata. If you’d like you can override this just for the Open Graph metadata by including a title in the open-graph metadata.\n\n\ndescription\nA short description of the content. Quarto will automatically use the description metadata from the page metadata. If you’d like you can override this just for the Open Graph metadata by including a description in the open-graph metadata.\n\n\nimage\nThe path to a preview image for this content. By default, Quarto will use the image value from the site: metadata. If you provide an image, you may also optionally provide an image-width and image-height.\nIf image is not provided, Quarto will automatically attempt to locate a preview image. For more information, see Preview Images.\n\n\nlocale\nThe locale that the Open Graph metadata is marked up in.\n\n\nsite-name\nThe name which should be displayed for the overall site. If not explicitly provided in the open-graph metadata, Quarto will use the site:title value.\n\n\n\nHere is a more comprehensive example of specifying Open Graph metadata in a quarto.yml file:\nwebsite:\n  open-graph:\n    locale: es_ES\n    site-name: Quarto\nQuarto will automatically merge global metadata found in the website: open-graph key with any metadata provided in the document itself in the open-graph key. This is useful when you need to specify a mix of global options (for example, site) with per document options such as title or image.\n\n\nPreview Images\nYou can specify a preview image for your article in several different ways:\n\nYou can explicitly provide a full url to the preview image using the image field in the appropriate metadata. For example:\ntitle: \"My Document\"\ntwitter-card:\n  image: \"https://quarto.org/docs/websites/images/tools.png\"\nYou may provide a document relative path to an image (such as images/preview-code.png) or a project relative path to an image (such as /images/preview-code.png). If you provide a relative path such as this, you must also provide a site-url in your site’s metadata. For example in your _quarto.yml configuration file:\nwebsite:\n  site-url: \"https://www.quarto.org\"\nand in your document front matter:\ntitle: \"My Document\"\ntwitter-card:\n  image: \"/docs/websites/images/tools.png\"\nAny image that is being rendered in the page may also be used as a preview image by giving it the class name preview-image. Quarto will select the first image it finds with this class. For example, the following image will be used as the preview image when included on a page:\n![](images/tools.png){.preview-image}\nIf you label an image with this class, you must also provide a site-url in your site’s metadata.\nIf none of the above ways of specifying a preview image have been used, Quarto will attempt to find a preview image by looking for an image included in the rendered document with one of the following names: preview.png, feature.png, cover.png, or thumbail.png."
  },
  {
    "objectID": "docs/websites/website-tools.html#google-analytics",
    "href": "docs/websites/website-tools.html#google-analytics",
    "title": "Website Tools",
    "section": "Google Analytics",
    "text": "Google Analytics\nYou can add Google Analytics to your website by adding adding a google-analytics key to your _quarto.yml file. In its simplest form, you can just pass your Google Analytics tracking Id (e.g. UA-xxxxxxx) or Google Tag measurement Id (e.g. G-xxxxxxx) like:\nwebsite:\n  google-analytics: \"UA-XXXXXXXX\"\nQuarto will use the key itself to determine whether to embed Google Analytics (analytics.js) or Google Tags (gtag) as appropriate.\nIn addition to this basic configuration, you can exercise more fine grained control of your site analytics using the following keys.\n\n\n\nKey\nDescription\n\n\n\n\ntracking-id\nThe Google tracking Id or measurement Id of this website.\n\n\nstorage\ncookies - Use cookies to store unique user and session identification (default).\nnone - Do not use cookies to store unique user and session identification.\nFor more about choosing storage options see Storage.\n\n\nanonymize-ip\nAnonymize the user ip address. For more about this feature, see IP Anonymization (or IP masking) in Google Analytics.\n\n\nversion\nThe version number of Google Analytics to use. Currently supports either 3 (for analytics.js) or 4 (for gtag). This is automatically detected based upon the tracking-id, but you may specify it.\n\n\n\n\nStorage\nGoogle Analytics uses cookies to distinguish unique users and sessions. If you choose to use cookies to store this user data, you should consider whether you need to enable Cookie Consent in order to permit the viewer to control any tracking that you enable.\nIf you choose none for storage, this will have the following effects:\n\nFor Google Analytics v3 (analytics.js)\nNo tracking cookies will be used. Individual page hits will be properly tracked, enabling you to see which pages are viewed and how often they are viewed. Unique user and session tracking will not report data correctly since the tracking cookies they rely upon are not set.\nFor Google Tags (gtag)\nUser consent for ad and analytics tracking cookies will be withheld. In this mode, Google Analytics will still collect user data without the user identification, but that data is currently not displayed in the Google Analytics reports."
  },
  {
    "objectID": "docs/websites/website-tools.html#cookie-consent",
    "href": "docs/websites/website-tools.html#cookie-consent",
    "title": "Website Tools",
    "section": "Cookie Consent",
    "text": "Cookie Consent\nQuarto includes the ability to request cookie consent before enabling scripts that set cookies, using Cookie Consent.\nThe user’s cookie preferences will automatically control Google Analytics (if enabled) and can be used to control custom scripts you add as well (see Custom Scripts and Cookie Consent. You can enable the default request for cookie consent using the following:\nwebsite:\n  cookie-consent: true\nYou can further customize the appearance and behavior of the consent using the following:\n\n\n\n\n\n\n\nKey\nDescription\n\n\n\n\ntype\nThe type of consent that should be requested, using one of these two values:\nimplied - (default) This will notify the user that the site uses cookies and permit them to change preferences, but not block cookies unless the user changes their preferences.\nexpress - This will block cookies until the user expressly agrees to allow them (or continue blocking them if the user doesn’t agree).\n\n\nstyle\nThe style of the consent banner that is displayed:\nsimple - (default) A simple dialog in the lower right corner of the website.\nheadline - A full width banner across the top of the website.\ninterstitial - An semi-transparent overlay of the entire website.\nstandalone - An opaque overlay of the entire website.\n\n\npalette\nWhether to use a dark or light appearance for the consent banner:\nlight - A light colored banner.\ndark - A dark colored banner.\n\n\npolicy-url\nThe url to the website’s cookie or privacy policy.\n\n\nprefs-text\nThe text to display for the cookie preferences link in the website footer.\n\n\n\nA custom example might look more like:\nwebsite:\n  cookie-consent:\n    type: express\n    style: headline\n    palette: dark\n  google-analytics:\n    tracking-id: \"G-XXXXXXX\"\n    anonymize-ip: true\n\nCookie Preferences\nIn addition to requesting consent when a new user visits your website, Cookie Consent will also add a cookie preferences link to the footer of the website. You can control the text of this link using prefs-text. If you would rather position this link yourself, just add a link with the id #open_preferences_center to the website and Cookie Consent will not add the preferences link to the footer. For example:\nChange [cookie preferences](#open_preferences_center)\n\n\nCustom Scripts and Cookie Consent\nCookie Consent works by preventing the execution of scripts unless the user has expressed their consent. To control your custom scripts using Cookie Consent:\n\nInsert script tags as type='text/plain' (when the user consents, the type will be switched to text/javascript and the script will be executed).\n\n\n\nAdd a cookie-consent attribute to your script tag, setting it one of the following 4 levels:\n\n\n\nLevel\nDescription\n\n\n\n\nstrictly-necessary\nStrictly scripts are loaded automatically and cannot be disabled by the user.\n\n\nfunctionality\nScripts that are required for basic functionality of the website, for example, remembering a user language preference.\n\n\ntracking\nScripts that are used to track users, for example Google Analytics.\n\n\ntargeting\nScripts that are used for the purposed of advertising to ad targeting, for example Google AdSense remarketing.\n\n\n\n\nAn example script that is used for user tracking would look like:\n<script type=\"text/plain\" cookie-consent=\"tracking\">\n\n// My tracking JS code here\n\n</script>"
  },
  {
    "objectID": "docs/websites/website-tools.html#site-resources",
    "href": "docs/websites/website-tools.html#site-resources",
    "title": "Website Tools",
    "section": "Site Resources",
    "text": "Site Resources\nBesides input and configuration files, your site likely also includes a variety of resources (e.g. images) that you will want to publish along with your site. Quarto will automatically detect any files that you reference within your site and copy them to the output directory (e.g. _site).\nIf this auto-detection fails for any reason, or if you want to publish a file not explicitly linked to from within your site, you can add a resources entry to your configuration. For example, here we specify that we want to include all Excel spreadsheets within the project directory as part of the website:\nproject:\n  type: website\n  resources: \n    - \"*.xlsx\"\nNote that the *.xslx value is quoted: this is because YAML requires that strings that begin with non-alphanumeric characters be quoted.\nYou can also add a resources metadata value to individual files. For example:\ntitle: \"My Page\"\nresources:\n  - \"sheet.xlsx\"\nImages are the most commonly used type of resource file. If you have global images (e.g. a logo) that you want to reference from various pages within your site, you can use a site-absolute path to refer to the images, and it will be automatically converted to a relative path during publishing. For example:\n![](/images/logo.png)"
  },
  {
    "objectID": "docs/websites/website-tools.html#dark-mode",
    "href": "docs/websites/website-tools.html#dark-mode",
    "title": "Website Tools",
    "section": "Dark Mode",
    "text": "Dark Mode\nQuarto websites can support both a light and dark mode. For example, you may use the flatly and darkly themes (which are designed to be used in tandem as dark and light appearances) as:\ntheme:\n  light: flatly\n  dark: darkly\nFor more about selecting the dark and light themes for your website, see Dark Mode.\n\n\n\n\n\n\n\n\nLight\nDark\n\n\n\n\n\n\n\n\n\n\nWhen enabled, a toggle that allows your reader to control the appearance of the website will appear. The toggle will automatically be added to the website navigation as follows:\n\nIf a navbar has been specified, the toggle will appear in the top right corner of the nav bar.\nIf there is no navbar present, but a sidebar has been specified, the toggle will appear in the same location that the sidebar tools appears (adjacent to the title or logo in the sidebar).\nIf there is no navbar or sidebar present, the toggle will appear in the top right corner of the page."
  },
  {
    "objectID": "docs/websites/index.html",
    "href": "docs/websites/index.html",
    "title": "Creating a Website",
    "section": "",
    "text": "Quarto Websites are a convenient way to publish groups of documents. Documents published as part of a website share navigational elements, rendering options, and visual style.\nWebsite navigation can be provided through a global navbar, a sidebar with links, or a combination of both for sites that have multiple levels of content. You can also enable full text search for websites.\nThis site is an example of a Quarto Website (you can see the source code for it here: https://github.com/quarto-dev/quarto-web)."
  },
  {
    "objectID": "docs/websites/index.html#getting-started",
    "href": "docs/websites/index.html#getting-started",
    "title": "Creating a Website",
    "section": "Getting Started",
    "text": "Getting Started\nTo create a new website project, use the Quarto create-project command:\nquarto create-project mysite --type website\nThis will create the scaffolding for a simple website in the mysite sub-directory. Here is what the _quarto.yml config file will look like for the site:\nproject:\n  type: website\n\nwebsite:\n  title: \"mysite\"\n  navbar:\n    background: primary\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nThis will create the scaffolding for a simple website in the mysite sub-directory. To build and view the site use the preview command:\nquarto preview mysite\nThis will build the website and run a local web server to view it. To render (but not preview) the website into the _site directory:\nquarto render mysite\nBy default, all valid Quarto input files in the project directory will be included in the website (save for ones with a file or directory prefix of . or _).\nSee the Project Basics article to learn more about working with projects, including specifying an explicit list of files to render, as well as adding custom pre and post render scripts to your project.\n\nVS Code\nIf you are using VS Code you can open a new workspace with your website project using the code command from within VS Code:\ncode mysite\n\n\nRStudio\nIf you are using RStudio you can also create a Quarto website via the New Project command:\n\nRender documents within the site using the Render command, render the entire site using the Render Site command on the Build tab."
  },
  {
    "objectID": "docs/websites/index.html#workflow",
    "href": "docs/websites/index.html#workflow",
    "title": "Creating a Website",
    "section": "Workflow",
    "text": "Workflow\nQuarto includes a live-reloading development server that you will likely find convenient to use while working on websites. Start the server with:\nquarto preview\nThe development server will automatically re-render input files whenever they change.\nChanges to configuration files (e.g. _quarto.yml) as well as site resources (e.g. theme or CSS files) will also cause an automatic refresh.\nIf you are using RStudio a site development server will be run automatically when you render a document or the site. You can also start the development server directly using the Serve Website command on the Build tab.\nYou can customize the behavior of the preview server (port, whether it opens a browser, etc.) using command line options or the _quarto.yml config file. See quarto preview help or the project file reference for additional details.\n\n\n\n\n\n\nImportant\n\n\n\nAs you preview your site, pages will be rendered and updated. However, if you make changes to global options (e.g. _quarto.yml or included files) you need to fully re-render your site to have all of the changes reflected. Consequently, you should always fully quarto render your site before deploying it, even if you have already previewed changes to some pages with the preview server."
  },
  {
    "objectID": "docs/websites/index.html#render-targets",
    "href": "docs/websites/index.html#render-targets",
    "title": "Creating a Website",
    "section": "Render Targets",
    "text": "Render Targets\nBy default, all valid Quarto input files (.qmd, .ipynb, .md, .Rmd) in the project directory will be rendered, save for ones with a file or directory prefix of . (hidden files) or _ (typically used for non top-level files, e.g. ones included in other files).\nIf you don’t want to render all of the target documents in a project, or you wish to control the order of rendering more precisely, you can add a project: render: [files] entry to your project metadata. For example:\nproject:\n  render:\n    - section1.qmd\n    - section2.qmd\nNote that you can use wildcards when defining the render list. For example:\nproject:\n  render:\n    - section*.qmd\nYou can also use the prefix ! to ignore some paths in the render list. Note that in that case you need to start by specifying everything you do want to render. For example:\nproject:\n  render:\n    - \"*.qmd\"\n    - \"!ignored.qmd\"\n    - \"!ignored-dir/\"\n\n\n\n\n\n\nNote\n\n\n\nIf the name of your output file needs to start with . or _ (for instance _index.md for Hugo users), you must name the Quarto input file without the prefix (for instance index.qmd) and add an explicit output-file parameter in the YAML such as\n---\noutput-file: _index.md\n---"
  },
  {
    "objectID": "docs/websites/index.html#linking",
    "href": "docs/websites/index.html#linking",
    "title": "Creating a Website",
    "section": "Linking",
    "text": "Linking\nWhen creating links between pages in your site, you can provide the source file as the link target (rather than the .html file). You can also add hash identifiers (#) to the source file if you want to link to a particular section in the document. For example:\n[about](about.qmd)\n[about](about.qmd#section)\nOne benefit of using this style of link as opposed to targeting .html files directly is that if you at some point convert your site to a book the file-based links will automatically resolve to section links for formats that produce a single file (e.g. PDF or MS Word)."
  },
  {
    "objectID": "docs/websites/index.html#learning-more",
    "href": "docs/websites/index.html#learning-more",
    "title": "Creating a Website",
    "section": "Learning More",
    "text": "Learning More\nOnce you’ve got a basic website up and running check out these articles for various ways to enhance your site:\nWebsite Navigation describes various ways to add navigation to a website, including top-level navigation bars, sidebars, or hybrid designs that uses both. This article also covers adding full-text search as well as a site-wide footer.\nWebsite Tools covers adding social metadata (e.g. for Twitter Cards) and Google Analytics to your site, as well as enabling users to toggle between dark and light color schemes.\nWebsite Options provides a comprehensive reference to all of the available website options.\nCode Execution provides tips for optimizing the rendering of sites with large numbers of documents or expensive computations.\nPublishing Websites enumerates the various options for publishing websites including GitHub Pages, Netlify, Google Firebase, and RStudio Connect."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html",
    "href": "docs/websites/website-listings-custom.html",
    "title": "Custom Listings",
    "section": "",
    "text": "In addition to the 3 built in types of listings, you can also build a completely custom display of the items. This custom display can generate any HTML and can optionally still take advantage of the sorting, filtering, and pagination provided by listings."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#listing-templates",
    "href": "docs/websites/website-listings-custom.html#listing-templates",
    "title": "Custom Listings",
    "section": "Listing Templates",
    "text": "Listing Templates\nTo build a custom listing display, you create an EJS template that will be used to generate the HTML for a set of items that are passed to the template. EJS templates allow to generate HTML using plain javascript, making it easy to loop through items and output their values in your custom HTML.\nTo use a custom template, pass it in the template option for a listing:\nlisting:\n  template: gallery.ejs\nWhen a listing with a custom template is rendered, the listing contents will be read and processed into a set of items that are passed to the template for rendering. For example, in this case, all the documents in the posts directory will be read into items and passed to the gallery.ejs template.\nlisting:\n  contents: posts\n  template: gallery.ejs\nA simple template for outputing a list of documents might look like:\n```{=html}\n<ul>\n<% for (const item of items) { %>\n  <li><a href=\"<%- item.path %>\"><%= item.title %></a></li>\n<% } %>\n</ul>\n```\nwhich produces simple HTML output like:\n\nWhen rendered, the above template will receive an array of listing items called items. When the contents of a listing are loaded from a list a documents, each of those items will be populated with the fields described in Listing Item Fields. In addition, any other fields included in a documents metadata will be passed as a property of the item, making it possible to use custom metadata in your documents and the listing display."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#metadata-listings",
    "href": "docs/websites/website-listings-custom.html#metadata-listings",
    "title": "Custom Listings",
    "section": "Metadata Listings",
    "text": "Metadata Listings\nThe contents option for a listing most commonly contains a list of paths or globs, but it can also contain metadata. When contents are metadata, the metadata will be read into items and passed to the template. For example:\nlisting:\n  template: custom.ejs\n  contents:\n    - name: First Item\n      href: https://www.quarto.org\n      custom-field: A custom value\n    - name: Second Item\n      href: https://www.rstudio.org\n      custom-field: A second custom value\ncould be rendered using:\n```{=html}\n<ul>\n<% for (const item of items) { %>\n  <li>\n    <a href=\"<%- item.href %>\"><%= item.name %></a><br/>\n    <%= item['custom-field'] %>\n  </li>\n<% } %>\n</ul>\n```\nwhich produces a simple HTML display like:"
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#metadata-file-listings",
    "href": "docs/websites/website-listings-custom.html#metadata-file-listings",
    "title": "Custom Listings",
    "section": "Metadata File Listings",
    "text": "Metadata File Listings\nThe contents option for a listing can also point to one or more yaml files (which contain metadata). In that case, the metadata will be read from the files into items and passed to the template. For example:\nlisting:\n  template: custom.ejs\n  contents:\n    - items.yml\nwhere the contents of items.yml is:\n- name: First Item\n  href: https://www.quarto.org\n  custom-field: A custom value\n- name: Second Item\n  href: https://www.rstudio.org\n  custom-field: A second custom value\n\nTemplate Examples\nPortions of this website are built using custom listings. The best place to start is with our gallery, which is a listing built using a custom template and a metadata file. You can view the source code used to create the gallery page in our Github repository.\n\n\n\n\n\n\n\nFile\nDescription\n\n\n\n\ngallery.yml\nThe metadata that controls what items are displayed in the gallery listing.\n\n\ngallery.ejs\nThe template used to display the items on the page.\n\n\nindex.qmd\nThe Quarto document that configures and positions the listing in the #gallery div."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#sorting-filtering-and-pagination",
    "href": "docs/websites/website-listings-custom.html#sorting-filtering-and-pagination",
    "title": "Custom Listings",
    "section": "Sorting, Filtering, and Pagination",
    "text": "Sorting, Filtering, and Pagination\nBy default, sorting, filtering, and pagination are disabled for custom listings templates, but with some simple changes to your template and listing options, you can add this capability to your custom listing. To do this, you need to include the following three things in your custom template:\n\nInclude a list class on the HTML tag that contains the list of items.\nFor each item, include <%= metadataAttrs(item) %> in the HTML tag that contains the item. This will allow Quarto write custom attributes that are used for sorting and filtering.\nWithin each item, include a class that identifies the tag whose text represents the contents of an item’s field. The class must be the name of the field prefixed with listing-, for example the tag whose inner text is the item.name should include a class listing-name.\n\nFor example, we can modify the above custom.ejs template as follows:\n```{=html}\n<ul class=\"list\">\n<% for (const item of items) { %>\n  <li <%= metadataAttrs(item) %>>\n    <a href=\"<%- item.href %>\" class=\"listing-name\"><%= item.name %></a><br/>\n    <span class=\"listing-custom-field\"><%= item['custom-field'] %><span>\n  </li>\n<% } %>\n</ul>\n```\nOnce you have included these items in your template, can you then enable the options in your listing:\nlisting:\n  sort-ui: true\n  filter-ui: true\n  page-size: 10\nThe UI elements will now appear on the page and should interact properly with your custom listing.\n\nField Display Names\nYou may want to provide a custom display name for your field to provide a better name than the field name. For example, the field name would appear in the sort UI. You can use field-display-names to create mapping from a field to a display name. For example:\nlisting:\n  template: custom.ejs\n  contents:\n    - items.yml\n  sort-ui: true\n  filter-ui: true\n  page-size: 10\n  field-display-names:\n    name: \"Name\"\n    custom-field: \"Custom\"\n\n\nDate Sorting and Formatting\nTo properly format and sort date values, you can specify type information for fields in your items. If you specify a field is a date, it will automatically be formatted using the specified date formatting (either default or specified using date-format) and will support date sorting in ascending or descending order. If you specific a field as a number, it will support ascending and descending numeric sorting.\nYou and specify field types as follows\nlisting:\n  template: custom.ejs\n  contents:\n    - items.yml\n  field-types:\n    custom-date: date\n    custom-number: number\n\n\nRequired Fields\nSince listings are generated using fields that are specified in other documents or via metadata, it can be helpful to ensure that required fields are present. You can note required fields as following:\nlisting:\n  template: custom.ejs\n  contents:\n    - items.yml\n  field-required: [name, custom-field]\nIf the listing page is rendered an any of contents are missing a value for either of the required fields, an error will be thrown noting the field that is required and the file or metadata that has omitted it."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Quarto",
    "section": "",
    "text": "The overarching goal of Quarto is to make the process of creating and collaborating on scientific and technical documents dramatically better. We hope to do this in several dimensions:\n\nCreate a writing and publishing environment with great integrated tools for technical content. We want to make authoring with embedded code, equations, figures, complex diagrams, interactive widgets, citations, cross references, and the myriad other special requirements of scientific discourse straightforward and productive for everyone.\nHelp authors take full advantage of the web as a connected, interactive platform for communications, while still providing the ability to create excellent printed output from the same document source. Researchers shouldn’t need to choose between LaTeX, MS Word, and HTML but rather be able to author documents that target all of them at the same time.\nMake reproducible research and publications the norm rather than the exception. Reproducibility requires that the code and data required to create a manuscript are an integrated part of it. However, this isn’t often straightforward in practice—Quarto aims to make it easier to adopt a reproducible workflow than not.\n\nQuarto is open source software licensed under the GNU GPL v2. We believe that it’s better for everyone if the tools used for research and science are free and open. Reproducibility, widespread sharing of knowledge and techniques, and the leveling of the playing field by eliminating cost barriers are but a few of the shared benefits of free software in science."
  },
  {
    "objectID": "about.html#project",
    "href": "about.html#project",
    "title": "About Quarto",
    "section": "Project",
    "text": "Project\nAt the core of Quarto is Pandoc, a powerful and flexible document processing tool. Quarto adds a number of facilities to Pandoc aimed at scientific and technical publishing, including:\n\nEmbedding code and output from Python, R, and JavaScript via integration with Jupyter, Knitr, and Observable.\nA variety of extensions to Pandoc markdown useful for technical writing including cross-references, sub-figures, layout panels, hoverable citations and footnotes, callouts, and more.\nA project system for rendering groups of documents at once, sharing options across documents, and producing aggregate output like websites and books.\n\nDevelopment of Quarto is sponsored by RStudio, PBC, where we previously created a similar system (R Markdown) that shared the same goals, but was targeted principally at users of the R language. The same core team works on both Quarto and R Markdown:\n\nJ.J. Allaire (@jjallaire)\nChristophe Dervieux (@cderv)\nCarlos Scheidegger (@cscheid)\nCharles Teague (@dragonstyle)\nYihui Xie (@yihui)\n\nWith Quarto, we are hoping to bring these tools to a much wider audience.\nQuarto is a registered trademark of RStudio. Please see our trademark policy for guidelines on usage of the Quarto trademark."
  },
  {
    "objectID": "about.html#contribute",
    "href": "about.html#contribute",
    "title": "About Quarto",
    "section": "Contribute",
    "text": "Contribute\nYou can contribute to Quarto in many ways:\n\nBy opening issues to provide feedback and share ideas.\nBy submitting Pull Request (PR) to fix opened issues\nBy submitting Pull Request (PR) to suggest new features (it is considered good practice to open an issue for discussion before working on a pull request for a new feature).\n\nPlease be mindful of our code of conduct as you interact with other community members.\n\nPull Requests\nPull requests are very welcome! Here’s how to contribute via PR:\n\nFork the repository, clone it locally, and make your changes in a new branch specific to the PR. For example:\n# clone your fork\n$ git clone https://github.com/<username>/quarto-cli\n\n# configure for your platform (./configure-macos.sh, ./configure-linux.sh, or ./configure-windows.cmd)\n$ cd quarto-cli\n$ ./configure-macos.sh\n\n# checkout a new branch\n$ git checkout -b feature/newthing\nFor significant changes (e.g more than small bug fixes), ensure that you have signed the individual or corporate contributor agreement as appropriate. You can send the signed copy to jj@rstudio.com.\nSubmit the pull request. It is ok to submit as draft in your are still working on it but would like some feedback from us. It always good to share in the open that you are working on it.\n\nWe’ll try to be as responsive as possible in reviewing and accepting pull requests."
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Open Source License",
    "section": "",
    "text": "Quarto is open source software licensed under the GNU GPL v2. We believe that it’s better for everyone if the tools used for research and science are free and open. Reproducibility, widespread sharing of knowledge and techniques, and the leveling of the playing field by eliminating cost barriers are but a few of the shared benefits of free software in science.\nThe Quarto source code is available at https://github.com/quarto-dev/\nQuarto is a registered trademark of RStudio. Please see our trademark policy for guidelines on usage of the Quarto trademark.\nQuarto also makes use of several other open-source projects, the distribution of which is subject to their respective licenses. Major components and their licenses include:\n\n\n\nProject\nLicense\n\n\n\n\nPandoc\nGNU GPL v2\n\n\nBootstrap 5.0\nMIT\n\n\nBootswatch 5.0\nMIT\n\n\nDeno\nMIT\n\n\nesbuild\nMIT\n\n\nDart Sass\nMIT\n\n\nObservable Runtime\nISC"
  },
  {
    "objectID": "docs/visual-editor/markdown.html#overview",
    "href": "docs/visual-editor/markdown.html#overview",
    "title": "Markdown Output",
    "section": "Overview",
    "text": "Overview\nThe Quarto visual editor generates markdown using Pandoc. This means that in some cases your markdown will be rewritten to conform to standard Pandoc idioms. For example, Pandoc inserts 3 spaces after list bullets and automatically escapes characters that might be used for markdown syntax.\nHere is a list of conventions for Pandoc generated markdown that might differ from your own markdown writing style:\n\n*text* is used in preference to _text_\nBacktick code blocks are written as ``` {.md} rather than ```md\nBacktick code blocks with no attributes are rendered as 4-space indented code blocks\nHorizontal rules are written as dashes spanning the full width of the document\nPlain links are written as <https://yihui.org> rather than https://yihui.org\nBullet and numbered lists use additional leading spaces before list item content\nThe blockquote character (>) is included on each new line of a blockquote\nTable captions are written below rather than above tables\nMultiline HTML and TeX blocks use the explicit raw attribute (e.g. ```{=tex})\nInline footnotes are replaced with footnotes immediately below the paragraph\nNested divs use ::: at all levels so long as their attributes are distinct\nUnnumbered sections are designated with {.unnumbered} rather than {-}\nCharacters used for markdown syntax (e.g. *, _, or #) are always escaped\n\nWhile some of this behavior might be bothersome at first, if you decide that visual editing mode is useful for your workflow it’s probably best to just adapt to writing your own markdown the same way that Pandoc does. Note that you can also configure source mode to write markdown using these conventions, ensuring that the same markdown is written no matter which mode edits originate from."
  },
  {
    "objectID": "docs/visual-editor/index.html#overview",
    "href": "docs/visual-editor/index.html#overview",
    "title": "Visual Editor",
    "section": "Overview",
    "text": "Overview\nThe Quarto visual editor provides a WYSIWYM editing interface for all of Pandoc markdown, including tables, citations, cross-references, footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more. The visual editor also includes support for executing code cells and viewing their output inline:\n\nThe visual editor doesn’t attempt to abstract away or obscure the underlying markdown document. Rather, it aims to provide a highly productive writing interface for people that love markdown. You can also still use most markdown constructs (e.g., ## or bold) directly for formatting.\n\nSwitching Modes\nMarkdown documents can be edited in either source or visual mode. To switch into visual mode for a given document, use the  button at the top-right of the document toolbar (or alternatively the ⌘⇧ F4 keyboard shortcut):\n\nNote that you can switch between source and visual mode at any time (editing location and undo/redo state will be preserved when you switch)."
  },
  {
    "objectID": "docs/visual-editor/options.html#shortcuts",
    "href": "docs/visual-editor/options.html#shortcuts",
    "title": "Shortcuts & Options",
    "section": "Shortcuts",
    "text": "Shortcuts\nVisual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading.\nHere are the available keyboard and markdown shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nStrikeout\n\n~~strike~~\n\n\nSubscript\n\n~sub~\n\n\nSuperscript\n\n^super^\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nHeading Attributes\n\n{#id .class}\n\n\nBlockquote\n\n>\n\n\nCode Block\n⇧⌘ \\\n```\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\nRaw Block\n\n```{=html}\n\n\nDiv\n\n:::\n\n\nBullet List\n\n-\n\n\nOrdered List\n\n1.\n\n\nTight List\n⌥⌘ 9\n\n\n\nList Check\n\n[x]\n\n\nLink\n⌘ K\n<href>\n\n\nEmoji\n\n:smile:\n\n\nDefinition\n\n:\n\n\nNon-Breaking Space\n⌃ Space\n\n\n\nHard Line Break\n⇧ Enter\n\n\n\nParagraph\n⌥⌘ 0\n\n\n\nImage\n⇧⌘ I\n\n\n\nFootnote\n⇧⌘ F7\n\n\n\nCitation\n⇧⌘ F8\n[@\n\n\nTable\n⌥⌘ T\n\n\n\nEditing Comment\n⇧⌘ C\n\n\n\nSelect All\n⌘ A\n\n\n\nClear Formatting\n⌘ \\\n\n\n\nEdit Attributes\nF4\n\n\n\nRun Code Chunk\n⇧⌘ Enter\n\n\n\nRun Previous Chunks\n⇧⌥⌘ P\n\n\n\n\n\n\n\n\n\n\nFor markdown shortcuts, if you didn’t intend to use a shortcut and want to reverse its effect, just press the backspace key."
  },
  {
    "objectID": "docs/reference/dates.html#date-parsing",
    "href": "docs/reference/dates.html#date-parsing",
    "title": "Quarto Dates and Date Formatting",
    "section": "Date Parsing",
    "text": "Date Parsing\nWhen you write a date for Quarto document, Quarto will attempt to parse a date string by trying a number of standard forms before ultimately attempting to infer the date format. Quarto will try dates formatted as follows, in the following order:\n\nMM/dd/yyyy\nMM-dd-yyyy\nMM/dd/yy\nMM-dd-yy\nyyyy-MM-dd\ndd MM yyyy\nMM dd, yyyy\nYYYY-MM-DDTHH:mm:ssZ\n\nIn addition, you may also provide date keywords, which will provide a dynamic date.\n\n\n\n\n\n\n\nKeyword\nDate\n\n\n\n\ntoday\nThe current local date, with the time portion set to 0.\n\n\nnow\nThe current local date and time.\n\n\nlast-modified\nThe last modified date and time of the file containing the date."
  },
  {
    "objectID": "docs/reference/globs.html#overview",
    "href": "docs/reference/globs.html#overview",
    "title": "Quarto Glob Syntax",
    "section": "Overview",
    "text": "Overview\nQuarto sometimes allows you to provide a path or paths using glob syntax, providing wildcard expansion and other behavior that makes it simple to match a list of files without having to specify each file individually. Globs may be used:\n\nWhen specifying render targets in Quarto projects (see Render Targets).\nWhen defining resources for Quarto websites (see Site Resources).\nWhen defining documents to include in a listing (see Listing Contents)."
  },
  {
    "objectID": "docs/websites/website-about.html#overview",
    "href": "docs/websites/website-about.html#overview",
    "title": "About Pages",
    "section": "Overview",
    "text": "Overview\nQuarto makes it easy to create a simple about page for an individual or organization. When the about option is provided for a document, a special template will be used to layout the content of the current page with a custom layout designed to present a person or organization.\nFor example:\n---\ntitle: \"Finley Malloc\"\nabout:\n  template: jolla\n  image: profile.jpg\n  links:\n    - icon: twitter\n      text: twitter\n      href: https://twitter.com\n    - icon: github\n      text: Github\n      href: https://github.com\n---\n\nFinley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending  time unicycling and playing with her pet iguana.\n\n## Education\n\nUniversity of California, San Diego | San Diego, CA\nPhD in Mathematics | Sep 2011 - June 2015\n\nMacalester College | St. Paul MA\nB.A in Economics | Sep 2007 - June 2011\n\n## Experience\n\nWengo Analytics | Head Data Scientist | April 2018 - present\n\nGeoScynce | Chief Analyst | Spet 2012 - April 2018\nThe contents of this page will be laid out using the jolla template with the profile.png image, and generate a set of links for the items specified in links.\nYou can write and format the content of the page however you’d like - when the page is rendered, Quarto will use the content and options provided in the about option to create the about page, arranging the content content of the about option with the content in the page itself."
  },
  {
    "objectID": "docs/websites/website-search.html#overview",
    "href": "docs/websites/website-search.html#overview",
    "title": "Website Search",
    "section": "Overview",
    "text": "Overview\nQuarto includes support for full text search of websites and books. By default, Quarto will automatically index the contents of your site and make it searchable using a locally built index. You can also configure Quarto search to use a hosted Algolia index."
  },
  {
    "objectID": "docs/websites/website-listings.html#overview",
    "href": "docs/websites/website-listings.html#overview",
    "title": "Document Listings",
    "section": "Overview",
    "text": "Overview\nListings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data.\nListings are useful for creating blogs, providing navigation for large numbers of documents, or any other scenario where you’d like the contents of a page to be automatically updated as documents are added, updated, and removed.\nYou can enable listings on a page using the listing option in the document front matter. This will instruct Quarto to generate additional content (the ‘listings’) when the page is rendered. For example, the following YAML in the front matter of a document:\n---\ntitle: \"Listing Example\"\nlisting: default\n---\nWill result in a listing of all documents in the directory (with the exception of the current document). It might look something like this:"
  },
  {
    "objectID": "docs/websites/website-navigation.html#overview",
    "href": "docs/websites/website-navigation.html#overview",
    "title": "Website Navigation",
    "section": "Overview",
    "text": "Overview\nThere are a variety of options available for providing website navigation, including:\n\nUsing top navigation (a navbar) with optional sub-menus.\nUsing side navigation with a hierarchy of pages.\nCombining top and side navigation (where top navigation links to different sections of the site each with their own side navigation).\n\nIn addition, you can add full text search to either the top or side navigation interface."
  },
  {
    "objectID": "docs/websites/publishing-websites.html#overview",
    "href": "docs/websites/publishing-websites.html#overview",
    "title": "Publishing Websites",
    "section": "Overview",
    "text": "Overview\nThere are a wide variety of ways to publish Quarto websites. Website content is by default written to the _site sub-directory (you can customize this using the output-dir option). Publishing is simply a matter of copying the output directory to a web server or web hosting service.\nBelow we describe several convenient options for Quarto website deployment including GitHub Pages, Netlify, RStudio Connect, Firebase, Site44, and Amazon S3. We’ll mostly defer to the documentation provided by the various services, but will note any Quarto website specific configuration required."
  },
  {
    "objectID": "docs/websites/website-blog.html#overview",
    "href": "docs/websites/website-blog.html#overview",
    "title": "Creating a Blog",
    "section": "Overview",
    "text": "Overview\nQuarto websites include integrated support for blogging. Blogs consist of a collection of posts along with a navigational page that lists them in reverse chronological order. Blogs can include a custom about page, publish an RSS feed, and use a wide variety of themes.\nYou can create websites that consist entirely of a single blog, websites that have multiple blogs, or you can add a blog to a website that contains other content."
  },
  {
    "objectID": "docs/websites/website-tools.html#headers-footers",
    "href": "docs/websites/website-tools.html#headers-footers",
    "title": "Website Tools",
    "section": "Headers & Footers",
    "text": "Headers & Footers\nYou can provide standard headers and footers for pages on your site. These can apply to the main document body or to the sidebar. Available options include:\n\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\nbody-header\nMarkdown to insert at the beginning of each page’s body (below the title and author block).\n\n\nbody-footer\nMarkdown to insert below each page’s body.\n\n\nmargin-header\nMarkdown to insert above right margin content (i.e. table of contents).\n\n\nmargin-footer\nMarkdown to insert below right margin content.\n\n\n\nFor example:\nbody-header: | \n  This page brought to you by <https://example.com>\nmargin-header: |\n  ![Logo image](logo.png)"
  },
  {
    "objectID": "docs/websites/index.html#overview",
    "href": "docs/websites/index.html#overview",
    "title": "Creating a Website",
    "section": "Overview",
    "text": "Overview\nQuarto Websites are a convenient way to publish groups of documents. Documents published as part of a website share navigational elements, rendering options, and visual style.\nWebsite navigation can be provided through a global navbar, a sidebar with links, or a combination of both for sites that have multiple levels of content. You can also enable full text search for websites.\nThis site is an example of a Quarto Website (you can see the source code for it here: https://github.com/quarto-dev/quarto-web)."
  },
  {
    "objectID": "docs/websites/website-listings-custom.html#overview",
    "href": "docs/websites/website-listings-custom.html#overview",
    "title": "Custom Listings",
    "section": "Overview",
    "text": "Overview\nIn addition to the 3 built in types of listings, you can also build a completely custom display of the items. This custom display can generate any HTML and can optionally still take advantage of the sorting, filtering, and pagination provided by listings."
  },
  {
    "objectID": "about.html#goals",
    "href": "about.html#goals",
    "title": "About Quarto",
    "section": "Goals",
    "text": "Goals\nThe overarching goal of Quarto is to make the process of creating and collaborating on scientific and technical documents dramatically better. We hope to do this in several dimensions:\n\nCreate a writing and publishing environment with great integrated tools for technical content. We want to make authoring with embedded code, equations, figures, complex diagrams, interactive widgets, citations, cross references, and the myriad other special requirements of scientific discourse straightforward and productive for everyone.\nHelp authors take full advantage of the web as a connected, interactive platform for communications, while still providing the ability to create excellent printed output from the same document source. Researchers shouldn’t need to choose between LaTeX, MS Word, and HTML but rather be able to author documents that target all of them at the same time.\nMake reproducible research and publications the norm rather than the exception. Reproducibility requires that the code and data required to create a manuscript are an integrated part of it. However, this isn’t often straightforward in practice—Quarto aims to make it easier to adopt a reproducible workflow than not.\n\nQuarto is open source software licensed under the GNU GPL v2. We believe that it’s better for everyone if the tools used for research and science are free and open. Reproducibility, widespread sharing of knowledge and techniques, and the leveling of the playing field by eliminating cost barriers are but a few of the shared benefits of free software in science."
  }
]